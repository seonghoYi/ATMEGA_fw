
ATMEGA_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00002ad8  00002b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000663  0080019c  0080019c  00002c08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c0  00000000  00000000  00002c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000712b  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f19  00000000  00000000  0000a55f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004362  00000000  00000000  0000c478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013ac  00000000  00000000  000107dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001975  00000000  00000000  00011b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006032  00000000  00000000  000134fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  0001952f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
       6:	00 00       	nop
       8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
       a:	00 00       	nop
       c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	c0 c1       	rjmp	.+896    	; 0x3a6 <__vector_9>
      26:	00 00       	nop
      28:	94 c1       	rjmp	.+808    	; 0x352 <__vector_10>
      2a:	00 00       	nop
      2c:	88 c1       	rjmp	.+784    	; 0x33e <__vector_11>
      2e:	00 00       	nop
      30:	68 c1       	rjmp	.+720    	; 0x302 <__vector_12>
      32:	00 00       	nop
      34:	70 c1       	rjmp	.+736    	; 0x316 <__vector_13>
      36:	00 00       	nop
      38:	5a c1       	rjmp	.+692    	; 0x2ee <__vector_14>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__vector_15>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__vector_16>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	56 c0       	rjmp	.+172    	; 0xf6 <__vector_18>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__vector_20>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	64 c1       	rjmp	.+712    	; 0x32a <__vector_24>
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__vector_25>
      66:	00 00       	nop
      68:	d2 c1       	rjmp	.+932    	; 0x40e <__vector_26>
      6a:	00 00       	nop
      6c:	da c1       	rjmp	.+948    	; 0x422 <__vector_27>
      6e:	00 00       	nop
      70:	e2 c1       	rjmp	.+964    	; 0x436 <__vector_28>
      72:	00 00       	nop
      74:	c2 c1       	rjmp	.+900    	; 0x3fa <__vector_29>
      76:	00 00       	nop
      78:	92 c0       	rjmp	.+292    	; 0x19e <__vector_30>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__vector_32>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 0a       	sbc	r14, r23
      8e:	ef 0a       	sbc	r14, r31
      90:	f7 0a       	sbc	r15, r23
      92:	fb 0a       	sbc	r15, r27
      94:	ff 0a       	sbc	r15, r31
      96:	10 0b       	sbc	r17, r16
      98:	14 0b       	sbc	r17, r20
      9a:	24 0b       	sbc	r18, r20
      9c:	38 0b       	sbc	r19, r24
      9e:	7d 0e       	add	r7, r29
      a0:	90 0e       	add	r9, r16
      a2:	a3 0e       	add	r10, r19
      a4:	b6 0e       	add	r11, r22
      a6:	c9 0e       	add	r12, r25
      a8:	dc 0e       	add	r13, r28
      aa:	ef 0e       	add	r14, r31

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e1       	ldi	r29, 0x10	; 16
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 ed       	ldi	r30, 0xD8	; 216
      c0:	fa e2       	ldi	r31, 0x2A	; 42
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ac 39       	cpi	r26, 0x9C	; 156
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	27 e0       	ldi	r18, 0x07	; 7
      d4:	ac e9       	ldi	r26, 0x9C	; 156
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	af 3f       	cpi	r26, 0xFF	; 255
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 89 13 	call	0x2712	; 0x2712 <main>
      e6:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <apInit>:
#include "uart.h"

void apInit(void)
{
	//uartOpen(_DEF_UART1, 38400);
	sei();
      ec:	78 94       	sei
      ee:	08 95       	ret

000000f0 <apMain>:
		{
			uint8_t rx_data = uartRead(_DEF_UART1);
			uartWrite(_DEF_UART1, &rx_data, 1);
		}
		*/
		rosServerRun();
      f0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <rosServerRun>
      f4:	fd cf       	rjmp	.-6      	; 0xf0 <apMain>

000000f6 <__vector_18>:

#ifdef _USE_HW_UART
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
ISR(USART0_RX_vect)
{
      f6:	1f 92       	push	r1
      f8:	0f 92       	push	r0
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	0f 92       	push	r0
      fe:	11 24       	eor	r1, r1
     100:	0b b6       	in	r0, 0x3b	; 59
     102:	0f 92       	push	r0
     104:	2f 93       	push	r18
     106:	3f 93       	push	r19
     108:	4f 93       	push	r20
     10a:	5f 93       	push	r21
     10c:	6f 93       	push	r22
     10e:	7f 93       	push	r23
     110:	8f 93       	push	r24
     112:	9f 93       	push	r25
     114:	af 93       	push	r26
     116:	bf 93       	push	r27
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	UART_RxIRQHandler(&huart1);
     11c:	81 ed       	ldi	r24, 0xD1	; 209
     11e:	97 e0       	ldi	r25, 0x07	; 7
     120:	0e 94 74 13 	call	0x26e8	; 0x26e8 <UART_RxIRQHandler>
}
     124:	ff 91       	pop	r31
     126:	ef 91       	pop	r30
     128:	bf 91       	pop	r27
     12a:	af 91       	pop	r26
     12c:	9f 91       	pop	r25
     12e:	8f 91       	pop	r24
     130:	7f 91       	pop	r23
     132:	6f 91       	pop	r22
     134:	5f 91       	pop	r21
     136:	4f 91       	pop	r20
     138:	3f 91       	pop	r19
     13a:	2f 91       	pop	r18
     13c:	0f 90       	pop	r0
     13e:	0b be       	out	0x3b, r0	; 59
     140:	0f 90       	pop	r0
     142:	0f be       	out	0x3f, r0	; 63
     144:	0f 90       	pop	r0
     146:	1f 90       	pop	r1
     148:	18 95       	reti

0000014a <__vector_20>:

ISR(USART0_TX_vect)
{
     14a:	1f 92       	push	r1
     14c:	0f 92       	push	r0
     14e:	0f b6       	in	r0, 0x3f	; 63
     150:	0f 92       	push	r0
     152:	11 24       	eor	r1, r1
     154:	0b b6       	in	r0, 0x3b	; 59
     156:	0f 92       	push	r0
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	UART_TxIRQHandler(&huart1);
     170:	81 ed       	ldi	r24, 0xD1	; 209
     172:	97 e0       	ldi	r25, 0x07	; 7
     174:	0e 94 72 13 	call	0x26e4	; 0x26e4 <UART_TxIRQHandler>
}
     178:	ff 91       	pop	r31
     17a:	ef 91       	pop	r30
     17c:	bf 91       	pop	r27
     17e:	af 91       	pop	r26
     180:	9f 91       	pop	r25
     182:	8f 91       	pop	r24
     184:	7f 91       	pop	r23
     186:	6f 91       	pop	r22
     188:	5f 91       	pop	r21
     18a:	4f 91       	pop	r20
     18c:	3f 91       	pop	r19
     18e:	2f 91       	pop	r18
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_30>:

ISR(USART1_RX_vect)
{
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	0b b6       	in	r0, 0x3b	; 59
     1aa:	0f 92       	push	r0
     1ac:	2f 93       	push	r18
     1ae:	3f 93       	push	r19
     1b0:	4f 93       	push	r20
     1b2:	5f 93       	push	r21
     1b4:	6f 93       	push	r22
     1b6:	7f 93       	push	r23
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	af 93       	push	r26
     1be:	bf 93       	push	r27
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
	UART_RxIRQHandler(&huart2);
     1c4:	88 ee       	ldi	r24, 0xE8	; 232
     1c6:	97 e0       	ldi	r25, 0x07	; 7
     1c8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <UART_RxIRQHandler>
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	bf 91       	pop	r27
     1d2:	af 91       	pop	r26
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	7f 91       	pop	r23
     1da:	6f 91       	pop	r22
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0b be       	out	0x3b, r0	; 59
     1e8:	0f 90       	pop	r0
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	0f 90       	pop	r0
     1ee:	1f 90       	pop	r1
     1f0:	18 95       	reti

000001f2 <__vector_32>:

ISR(USART1_TX_vect)
{
     1f2:	1f 92       	push	r1
     1f4:	0f 92       	push	r0
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	0f 92       	push	r0
     1fa:	11 24       	eor	r1, r1
     1fc:	0b b6       	in	r0, 0x3b	; 59
     1fe:	0f 92       	push	r0
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	ef 93       	push	r30
     216:	ff 93       	push	r31
	UART_TxIRQHandler(&huart2);
     218:	88 ee       	ldi	r24, 0xE8	; 232
     21a:	97 e0       	ldi	r25, 0x07	; 7
     21c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <UART_TxIRQHandler>
}
     220:	ff 91       	pop	r31
     222:	ef 91       	pop	r30
     224:	bf 91       	pop	r27
     226:	af 91       	pop	r26
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	7f 91       	pop	r23
     22e:	6f 91       	pop	r22
     230:	5f 91       	pop	r21
     232:	4f 91       	pop	r20
     234:	3f 91       	pop	r19
     236:	2f 91       	pop	r18
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_16>:
extern TIM16_HandleTypeDef htim3;
extern TIM16_HandleTypeDef htim4;


ISR(TIMER0_OVF_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
     268:	ef 93       	push	r30
     26a:	ff 93       	push	r31
	TIM0_OVF_IRQHandler(&htim1);
     26c:	8f ee       	ldi	r24, 0xEF	; 239
     26e:	93 e0       	ldi	r25, 0x03	; 3
     270:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <TIM0_OVF_IRQHandler>
}
     274:	ff 91       	pop	r31
     276:	ef 91       	pop	r30
     278:	bf 91       	pop	r27
     27a:	af 91       	pop	r26
     27c:	9f 91       	pop	r25
     27e:	8f 91       	pop	r24
     280:	7f 91       	pop	r23
     282:	6f 91       	pop	r22
     284:	5f 91       	pop	r21
     286:	4f 91       	pop	r20
     288:	3f 91       	pop	r19
     28a:	2f 91       	pop	r18
     28c:	0f 90       	pop	r0
     28e:	0b be       	out	0x3b, r0	; 59
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <__vector_15>:

ISR(TIMER0_COMP_vect)
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	0b b6       	in	r0, 0x3b	; 59
     2a6:	0f 92       	push	r0
     2a8:	2f 93       	push	r18
     2aa:	3f 93       	push	r19
     2ac:	4f 93       	push	r20
     2ae:	5f 93       	push	r21
     2b0:	6f 93       	push	r22
     2b2:	7f 93       	push	r23
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	af 93       	push	r26
     2ba:	bf 93       	push	r27
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	TIM0_OC_IRQHandler(&htim1);
     2c0:	8f ee       	ldi	r24, 0xEF	; 239
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	0e 94 82 10 	call	0x2104	; 0x2104 <TIM0_OC_IRQHandler>
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0b be       	out	0x3b, r0	; 59
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <__vector_14>:

ISR(TIMER1_OVF_vect)
{
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
	
}
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
	
}
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <__vector_13>:

ISR(TIMER1_COMPB_vect)
{
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
	
}
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <__vector_24>:

ISR(TIMER1_COMPC_vect)
{
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
	
}
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_11>:

ISR(TIMER1_CAPT_vect)
{
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
	
}
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_10>:

ISR(TIMER2_OVF_vect)
{
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	0b b6       	in	r0, 0x3b	; 59
     35e:	0f 92       	push	r0
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	TIM2_OVF_IRQHandler(&htim2);
     378:	83 e5       	ldi	r24, 0x53	; 83
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TIM2_OVF_IRQHandler>
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0b be       	out	0x3b, r0	; 59
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	TIM2_OC_IRQHandler(&htim2);
     3cc:	83 e5       	ldi	r24, 0x53	; 83
     3ce:	94 e0       	ldi	r25, 0x04	; 4
     3d0:	0e 94 85 10 	call	0x210a	; 0x210a <TIM2_OC_IRQHandler>
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_29>:

ISR(TIMER3_OVF_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
	
}
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
	
}
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_27>:

ISR(TIMER3_COMPB_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
	
}
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <__vector_28>:

ISR(TIMER3_COMPC_vect)
{
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
	
}
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_25>:

ISR(TIMER3_CAPT_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
	
}
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <bspInit>:
﻿#include "bsp.h"


void bspInit(void)
{
     45e:	08 95       	ret

00000460 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
     460:	fc 01       	movw	r30, r24
	bool ret = true;

	p_node->in    = 0;
     462:	10 82       	st	Z, r1
     464:	11 82       	std	Z+1, r1	; 0x01
     466:	12 82       	std	Z+2, r1	; 0x02
     468:	13 82       	std	Z+3, r1	; 0x03
	p_node->out   = 0;
     46a:	14 82       	std	Z+4, r1	; 0x04
     46c:	15 82       	std	Z+5, r1	; 0x05
     46e:	16 82       	std	Z+6, r1	; 0x06
     470:	17 82       	std	Z+7, r1	; 0x07
	p_node->len   = length;
     472:	20 87       	std	Z+8, r18	; 0x08
     474:	31 87       	std	Z+9, r19	; 0x09
     476:	42 87       	std	Z+10, r20	; 0x0a
     478:	53 87       	std	Z+11, r21	; 0x0b
	p_node->p_buf = p_buf;
     47a:	75 87       	std	Z+13, r23	; 0x0d
     47c:	64 87       	std	Z+12, r22	; 0x0c

	return ret;
}
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret

00000482 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
     482:	4f 92       	push	r4
     484:	5f 92       	push	r5
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <qbufferWrite+0x1e>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <qbufferWrite+0x20>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <qbufferWrite+0x22>
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	06 2f       	mov	r16, r22
     4ae:	17 2f       	mov	r17, r23
     4b0:	29 01       	movw	r4, r18
     4b2:	3a 01       	movw	r6, r20
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
     4b4:	23 2b       	or	r18, r19
     4b6:	24 2b       	or	r18, r20
     4b8:	25 2b       	or	r18, r21
     4ba:	09 f4       	brne	.+2      	; 0x4be <qbufferWrite+0x3c>
     4bc:	72 c0       	rjmp	.+228    	; 0x5a2 <qbufferWrite+0x120>
	{
		next_in = (p_node->in + 1) %p_node->len;
     4be:	dc 01       	movw	r26, r24
     4c0:	8d 91       	ld	r24, X+
     4c2:	9d 91       	ld	r25, X+
     4c4:	0d 90       	ld	r0, X+
     4c6:	bc 91       	ld	r27, X
     4c8:	a0 2d       	mov	r26, r0
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	9a 83       	std	Y+2, r25	; 0x02
     4ce:	ab 83       	std	Y+3, r26	; 0x03
     4d0:	bc 83       	std	Y+4, r27	; 0x04
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	6f 5f       	subi	r22, 0xFF	; 255
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	8f 4f       	sbci	r24, 0xFF	; 255
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	ed 81       	ldd	r30, Y+5	; 0x05
     4e0:	fe 81       	ldd	r31, Y+6	; 0x06
     4e2:	20 85       	ldd	r18, Z+8	; 0x08
     4e4:	31 85       	ldd	r19, Z+9	; 0x09
     4e6:	42 85       	ldd	r20, Z+10	; 0x0a
     4e8:	53 85       	ldd	r21, Z+11	; 0x0b
     4ea:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__udivmodsi4>
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
     4f2:	ed 81       	ldd	r30, Y+5	; 0x05
     4f4:	fe 81       	ldd	r31, Y+6	; 0x06
     4f6:	84 81       	ldd	r24, Z+4	; 0x04
     4f8:	95 81       	ldd	r25, Z+5	; 0x05
     4fa:	a6 81       	ldd	r26, Z+6	; 0x06
     4fc:	b7 81       	ldd	r27, Z+7	; 0x07
     4fe:	c8 16       	cp	r12, r24
     500:	d9 06       	cpc	r13, r25
     502:	ea 06       	cpc	r14, r26
     504:	fb 06       	cpc	r15, r27
     506:	09 f4       	brne	.+2      	; 0x50a <qbufferWrite+0x88>
     508:	4c c0       	rjmp	.+152    	; 0x5a2 <qbufferWrite+0x120>
     50a:	a0 2e       	mov	r10, r16
     50c:	b1 2e       	mov	r11, r17
     50e:	00 e0       	ldi	r16, 0x00	; 0
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	24 c0       	rjmp	.+72     	; 0x55c <qbufferWrite+0xda>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	6f 5f       	subi	r22, 0xFF	; 255
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	8f 4f       	sbci	r24, 0xFF	; 255
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	ad 81       	ldd	r26, Y+5	; 0x05
     522:	be 81       	ldd	r27, Y+6	; 0x06
     524:	18 96       	adiw	r26, 0x08	; 8
     526:	2d 91       	ld	r18, X+
     528:	3d 91       	ld	r19, X+
     52a:	4d 91       	ld	r20, X+
     52c:	5c 91       	ld	r21, X
     52e:	1b 97       	sbiw	r26, 0x0b	; 11
     530:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__udivmodsi4>
     534:	bf ef       	ldi	r27, 0xFF	; 255
     536:	ab 1a       	sub	r10, r27
     538:	bb 0a       	sbc	r11, r27
     53a:	c9 82       	std	Y+1, r12	; 0x01
     53c:	da 82       	std	Y+2, r13	; 0x02
     53e:	eb 82       	std	Y+3, r14	; 0x03
     540:	fc 82       	std	Y+4, r15	; 0x04

		if (next_in != p_node->out)
     542:	ed 81       	ldd	r30, Y+5	; 0x05
     544:	fe 81       	ldd	r31, Y+6	; 0x06
     546:	c4 80       	ldd	r12, Z+4	; 0x04
     548:	d5 80       	ldd	r13, Z+5	; 0x05
     54a:	e6 80       	ldd	r14, Z+6	; 0x06
     54c:	f7 80       	ldd	r15, Z+7	; 0x07
     54e:	6c 15       	cp	r22, r12
     550:	7d 05       	cpc	r23, r13
     552:	8e 05       	cpc	r24, r14
     554:	9f 05       	cpc	r25, r15
     556:	29 f1       	breq	.+74     	; 0x5a2 <qbufferWrite+0x120>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
     558:	6b 01       	movw	r12, r22
     55a:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
		{
			if (p_node->p_buf != NULL)
     55c:	ad 81       	ldd	r26, Y+5	; 0x05
     55e:	be 81       	ldd	r27, Y+6	; 0x06
     560:	1c 96       	adiw	r26, 0x0c	; 12
     562:	8d 91       	ld	r24, X+
     564:	9c 91       	ld	r25, X
     566:	1d 97       	sbiw	r26, 0x0d	; 13
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	39 f0       	breq	.+14     	; 0x57a <qbufferWrite+0xf8>
			{
				p_node->p_buf[p_node->in] = p_data[i];
     56c:	f5 01       	movw	r30, r10
     56e:	20 81       	ld	r18, Z
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	e8 0f       	add	r30, r24
     576:	f9 1f       	adc	r31, r25
     578:	20 83       	st	Z, r18
			}
			p_node->in = next_in;
     57a:	ad 81       	ldd	r26, Y+5	; 0x05
     57c:	be 81       	ldd	r27, Y+6	; 0x06
     57e:	cd 92       	st	X+, r12
     580:	dd 92       	st	X+, r13
     582:	ed 92       	st	X+, r14
     584:	fc 92       	st	X, r15
     586:	13 97       	sbiw	r26, 0x03	; 3
bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
     588:	0f 5f       	subi	r16, 0xFF	; 255
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
     58c:	c8 01       	movw	r24, r16
     58e:	01 2e       	mov	r0, r17
     590:	00 0c       	add	r0, r0
     592:	aa 0b       	sbc	r26, r26
     594:	bb 0b       	sbc	r27, r27
     596:	84 15       	cp	r24, r4
     598:	95 05       	cpc	r25, r5
     59a:	a6 05       	cpc	r26, r6
     59c:	b7 05       	cpc	r27, r7
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <qbufferWrite+0x120>
     5a0:	b9 cf       	rjmp	.-142    	; 0x514 <qbufferWrite+0x92>
			ret = false;
			break;
		}
	}
	return ret;
}
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	26 96       	adiw	r28, 0x06	; 6
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	08 95       	ret

000005ce <qbufferRead>:


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
     5ce:	4f 92       	push	r4
     5d0:	5f 92       	push	r5
     5d2:	6f 92       	push	r6
     5d4:	7f 92       	push	r7
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
     5ec:	49 01       	movw	r8, r18
     5ee:	5a 01       	movw	r10, r20
	bool ret = true;

	for (int i=0; i<length; i++)
     5f0:	23 2b       	or	r18, r19
     5f2:	24 2b       	or	r18, r20
     5f4:	25 2b       	or	r18, r21
     5f6:	e9 f1       	breq	.+122    	; 0x672 <qbufferRead+0xa4>
     5f8:	06 2f       	mov	r16, r22
     5fa:	17 2f       	mov	r17, r23
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
	{
		if (p_node->p_buf != NULL)
     600:	ec 85       	ldd	r30, Y+12	; 0x0c
     602:	fd 85       	ldd	r31, Y+13	; 0x0d
     604:	30 97       	sbiw	r30, 0x00	; 0
     606:	39 f0       	breq	.+14     	; 0x616 <qbufferRead+0x48>
		{
			p_data[i] = p_node->p_buf[p_node->out];
     608:	8c 81       	ldd	r24, Y+4	; 0x04
     60a:	9d 81       	ldd	r25, Y+5	; 0x05
     60c:	e8 0f       	add	r30, r24
     60e:	f9 1f       	adc	r31, r25
     610:	80 81       	ld	r24, Z
     612:	f8 01       	movw	r30, r16
     614:	80 83       	st	Z, r24
		}

		if (p_node->out != p_node->in)
     616:	8c 81       	ldd	r24, Y+4	; 0x04
     618:	9d 81       	ldd	r25, Y+5	; 0x05
     61a:	ae 81       	ldd	r26, Y+6	; 0x06
     61c:	bf 81       	ldd	r27, Y+7	; 0x07
     61e:	48 80       	ld	r4, Y
     620:	59 80       	ldd	r5, Y+1	; 0x01
     622:	6a 80       	ldd	r6, Y+2	; 0x02
     624:	7b 80       	ldd	r7, Y+3	; 0x03
     626:	84 15       	cp	r24, r4
     628:	95 05       	cpc	r25, r5
     62a:	a6 05       	cpc	r26, r6
     62c:	b7 05       	cpc	r27, r7
     62e:	19 f1       	breq	.+70     	; 0x676 <qbufferRead+0xa8>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	8f 4f       	sbci	r24, 0xFF	; 255
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	28 85       	ldd	r18, Y+8	; 0x08
     63e:	39 85       	ldd	r19, Y+9	; 0x09
     640:	4a 85       	ldd	r20, Y+10	; 0x0a
     642:	5b 85       	ldd	r21, Y+11	; 0x0b
     644:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__udivmodsi4>
     648:	6c 83       	std	Y+4, r22	; 0x04
     64a:	7d 83       	std	Y+5, r23	; 0x05
     64c:	8e 83       	std	Y+6, r24	; 0x06
     64e:	9f 83       	std	Y+7, r25	; 0x07

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = true;

	for (int i=0; i<length; i++)
     650:	ff ef       	ldi	r31, 0xFF	; 255
     652:	ef 1a       	sub	r14, r31
     654:	ff 0a       	sbc	r15, r31
     656:	0f 5f       	subi	r16, 0xFF	; 255
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	c7 01       	movw	r24, r14
     65c:	0f 2c       	mov	r0, r15
     65e:	00 0c       	add	r0, r0
     660:	aa 0b       	sbc	r26, r26
     662:	bb 0b       	sbc	r27, r27
     664:	88 15       	cp	r24, r8
     666:	99 05       	cpc	r25, r9
     668:	aa 05       	cpc	r26, r10
     66a:	bb 05       	cpc	r27, r11
     66c:	48 f2       	brcs	.-110    	; 0x600 <qbufferRead+0x32>
}


bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = true;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	03 c0       	rjmp	.+6      	; 0x678 <qbufferRead+0xaa>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	01 c0       	rjmp	.+2      	; 0x678 <qbufferRead+0xaa>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
		}
		else
		{
			ret = false;
     676:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return ret;
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	7f 90       	pop	r7
     68e:	6f 90       	pop	r6
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	08 95       	ret

00000696 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	fc 01       	movw	r30, r24
	uint32_t ret;

	ret = (p_node->in - p_node->out) %p_node->len;

	return ret;
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	a2 81       	ldd	r26, Z+2	; 0x02
     6a2:	b3 81       	ldd	r27, Z+3	; 0x03
     6a4:	04 81       	ldd	r16, Z+4	; 0x04
     6a6:	15 81       	ldd	r17, Z+5	; 0x05
     6a8:	26 81       	ldd	r18, Z+6	; 0x06
     6aa:	37 81       	ldd	r19, Z+7	; 0x07
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	60 1b       	sub	r22, r16
     6b2:	71 0b       	sbc	r23, r17
     6b4:	82 0b       	sbc	r24, r18
     6b6:	93 0b       	sbc	r25, r19
     6b8:	20 85       	ldd	r18, Z+8	; 0x08
     6ba:	31 85       	ldd	r19, Z+9	; 0x09
     6bc:	42 85       	ldd	r20, Z+10	; 0x0a
     6be:	53 85       	ldd	r21, Z+11	; 0x0b
     6c0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__udivmodsi4>
}
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <qbufferFlush>:


void qbufferFlush(qbuffer_t *p_node)
{
	p_node->in  = 0;
     6ca:	fc 01       	movw	r30, r24
     6cc:	10 82       	st	Z, r1
     6ce:	11 82       	std	Z+1, r1	; 0x01
     6d0:	12 82       	std	Z+2, r1	; 0x02
     6d2:	13 82       	std	Z+3, r1	; 0x03
	p_node->out = 0;
     6d4:	14 82       	std	Z+4, r1	; 0x04
     6d6:	15 82       	std	Z+5, r1	; 0x05
     6d8:	16 82       	std	Z+6, r1	; 0x06
     6da:	17 82       	std	Z+7, r1	; 0x07
     6dc:	08 95       	ret

000006de <ctcInit>:
		break;
		default:
		break;
	}
	return ret;
}
     6de:	e6 ef       	ldi	r30, 0xF6	; 246
     6e0:	f3 e0       	ldi	r31, 0x03	; 3
     6e2:	8a e4       	ldi	r24, 0x4A	; 74
     6e4:	94 e0       	ldi	r25, 0x04	; 4
     6e6:	10 82       	st	Z, r1
     6e8:	12 82       	std	Z+2, r1	; 0x02
     6ea:	11 82       	std	Z+1, r1	; 0x01
     6ec:	14 82       	std	Z+4, r1	; 0x04
     6ee:	13 82       	std	Z+3, r1	; 0x03
     6f0:	16 82       	std	Z+6, r1	; 0x06
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	10 86       	std	Z+8, r1	; 0x08
     6f6:	17 82       	std	Z+7, r1	; 0x07
     6f8:	12 86       	std	Z+10, r1	; 0x0a
     6fa:	11 86       	std	Z+9, r1	; 0x09
     6fc:	14 86       	std	Z+12, r1	; 0x0c
     6fe:	13 86       	std	Z+11, r1	; 0x0b
     700:	16 86       	std	Z+14, r1	; 0x0e
     702:	15 86       	std	Z+13, r1	; 0x0d
     704:	10 8a       	std	Z+16, r1	; 0x10
     706:	17 86       	std	Z+15, r1	; 0x0f
     708:	12 8a       	std	Z+18, r1	; 0x12
     70a:	11 8a       	std	Z+17, r1	; 0x11
     70c:	14 8a       	std	Z+20, r1	; 0x14
     70e:	13 8a       	std	Z+19, r1	; 0x13
     710:	75 96       	adiw	r30, 0x15	; 21
     712:	e8 17       	cp	r30, r24
     714:	f9 07       	cpc	r31, r25
     716:	39 f7       	brne	.-50     	; 0x6e6 <ctcInit+0x8>
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	08 95       	ret

0000071c <ctcBegin>:
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	c8 2f       	mov	r28, r24
     722:	d0 e0       	ldi	r29, 0x00	; 0
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	09 f4       	brne	.+2      	; 0x72a <ctcBegin+0xe>
     728:	57 c0       	rjmp	.+174    	; 0x7d8 <ctcBegin+0xbc>
     72a:	38 f0       	brcs	.+14     	; 0x73a <ctcBegin+0x1e>
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	09 f4       	brne	.+2      	; 0x732 <ctcBegin+0x16>
     730:	78 c0       	rjmp	.+240    	; 0x822 <ctcBegin+0x106>
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	09 f4       	brne	.+2      	; 0x738 <ctcBegin+0x1c>
     736:	c3 c0       	rjmp	.+390    	; 0x8be <ctcBegin+0x1a2>
     738:	e7 c0       	rjmp	.+462    	; 0x908 <ctcBegin+0x1ec>
     73a:	85 e1       	ldi	r24, 0x15	; 21
     73c:	8c 9f       	mul	r24, r28
     73e:	d0 01       	movw	r26, r0
     740:	8d 9f       	mul	r24, r29
     742:	b0 0d       	add	r27, r0
     744:	11 24       	eor	r1, r1
     746:	aa 50       	subi	r26, 0x0A	; 10
     748:	bc 4f       	sbci	r27, 0xFC	; 252
     74a:	ef ee       	ldi	r30, 0xEF	; 239
     74c:	f3 e0       	ldi	r31, 0x03	; 3
     74e:	1e 96       	adiw	r26, 0x0e	; 14
     750:	fc 93       	st	X, r31
     752:	ee 93       	st	-X, r30
     754:	1d 97       	sbiw	r26, 0x0d	; 13
     756:	88 ed       	ldi	r24, 0xD8	; 216
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	52 96       	adiw	r26, 0x12	; 18
     75c:	9c 93       	st	X, r25
     75e:	8e 93       	st	-X, r24
     760:	51 97       	sbiw	r26, 0x11	; 17
     762:	10 82       	st	Z, r1
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	82 83       	std	Z+2, r24	; 0x02
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	13 82       	std	Z+3, r1	; 0x03
     76c:	cf 01       	movw	r24, r30
     76e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <TIM8_Base_Init>
     772:	81 11       	cpse	r24, r1
     774:	cb c0       	rjmp	.+406    	; 0x90c <ctcBegin+0x1f0>
     776:	85 e1       	ldi	r24, 0x15	; 21
     778:	8c 9f       	mul	r24, r28
     77a:	f0 01       	movw	r30, r0
     77c:	8d 9f       	mul	r24, r29
     77e:	f0 0d       	add	r31, r0
     780:	11 24       	eor	r1, r1
     782:	ea 50       	subi	r30, 0x0A	; 10
     784:	fc 4f       	sbci	r31, 0xFC	; 252
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 83       	st	Z, r24
     78a:	a1 89       	ldd	r26, Z+17	; 0x11
     78c:	b2 89       	ldd	r27, Z+18	; 0x12
     78e:	8c 93       	st	X, r24
     790:	a1 89       	ldd	r26, Z+17	; 0x11
     792:	b2 89       	ldd	r27, Z+18	; 0x12
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	8c 93       	st	X, r24
     798:	a1 89       	ldd	r26, Z+17	; 0x11
     79a:	b2 89       	ldd	r27, Z+18	; 0x12
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	8c 93       	st	X, r24
     7a0:	a1 89       	ldd	r26, Z+17	; 0x11
     7a2:	b2 89       	ldd	r27, Z+18	; 0x12
     7a4:	13 96       	adiw	r26, 0x03	; 3
     7a6:	1c 92       	st	X, r1
     7a8:	a1 89       	ldd	r26, Z+17	; 0x11
     7aa:	b2 89       	ldd	r27, Z+18	; 0x12
     7ac:	14 96       	adiw	r26, 0x04	; 4
     7ae:	1c 92       	st	X, r1
     7b0:	61 89       	ldd	r22, Z+17	; 0x11
     7b2:	72 89       	ldd	r23, Z+18	; 0x12
     7b4:	85 85       	ldd	r24, Z+13	; 0x0d
     7b6:	96 85       	ldd	r25, Z+14	; 0x0e
     7b8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TIM8_OC_Init>
     7bc:	88 23       	and	r24, r24
     7be:	09 f4       	brne	.+2      	; 0x7c2 <ctcBegin+0xa6>
     7c0:	a7 c0       	rjmp	.+334    	; 0x910 <ctcBegin+0x1f4>
     7c2:	85 e1       	ldi	r24, 0x15	; 21
     7c4:	8c 9f       	mul	r24, r28
     7c6:	f0 01       	movw	r30, r0
     7c8:	8d 9f       	mul	r24, r29
     7ca:	f0 0d       	add	r31, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	ea 50       	subi	r30, 0x0A	; 10
     7d0:	fc 4f       	sbci	r31, 0xFC	; 252
     7d2:	10 82       	st	Z, r1
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	a1 c0       	rjmp	.+322    	; 0x91a <ctcBegin+0x1fe>
     7d8:	85 e1       	ldi	r24, 0x15	; 21
     7da:	8c 9f       	mul	r24, r28
     7dc:	f0 01       	movw	r30, r0
     7de:	8d 9f       	mul	r24, r29
     7e0:	f0 0d       	add	r31, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	ea 50       	subi	r30, 0x0A	; 10
     7e6:	fc 4f       	sbci	r31, 0xFC	; 252
     7e8:	ad ed       	ldi	r26, 0xDD	; 221
     7ea:	b3 e0       	ldi	r27, 0x03	; 3
     7ec:	b0 8b       	std	Z+16, r27	; 0x10
     7ee:	a7 87       	std	Z+15, r26	; 0x0f
     7f0:	c6 ee       	ldi	r28, 0xE6	; 230
     7f2:	d3 e0       	ldi	r29, 0x03	; 3
     7f4:	d4 8b       	std	Z+20, r29	; 0x14
     7f6:	c3 8b       	std	Z+19, r28	; 0x13
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	8c 93       	st	X, r24
     7fc:	95 e0       	ldi	r25, 0x05	; 5
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	9c 93       	st	X, r25
     802:	12 97       	sbiw	r26, 0x02	; 2
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	1c 92       	st	X, r1
     808:	11 97       	sbiw	r26, 0x01	; 1
     80a:	15 96       	adiw	r26, 0x05	; 5
     80c:	1c 92       	st	X, r1
     80e:	1e 92       	st	-X, r1
     810:	14 97       	sbiw	r26, 0x04	; 4
     812:	1c 82       	std	Y+4, r1	; 0x04
     814:	1b 82       	std	Y+3, r1	; 0x03
     816:	1e 82       	std	Y+6, r1	; 0x06
     818:	1d 82       	std	Y+5, r1	; 0x05
     81a:	18 86       	std	Y+8, r1	; 0x08
     81c:	1f 82       	std	Y+7, r1	; 0x07
     81e:	80 83       	st	Z, r24
     820:	7c c0       	rjmp	.+248    	; 0x91a <ctcBegin+0x1fe>
     822:	85 e1       	ldi	r24, 0x15	; 21
     824:	8c 9f       	mul	r24, r28
     826:	d0 01       	movw	r26, r0
     828:	8d 9f       	mul	r24, r29
     82a:	b0 0d       	add	r27, r0
     82c:	11 24       	eor	r1, r1
     82e:	aa 50       	subi	r26, 0x0A	; 10
     830:	bc 4f       	sbci	r27, 0xFC	; 252
     832:	e3 e5       	ldi	r30, 0x53	; 83
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	1e 96       	adiw	r26, 0x0e	; 14
     838:	fc 93       	st	X, r31
     83a:	ee 93       	st	-X, r30
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	8a e5       	ldi	r24, 0x5A	; 90
     840:	94 e0       	ldi	r25, 0x04	; 4
     842:	52 96       	adiw	r26, 0x12	; 18
     844:	9c 93       	st	X, r25
     846:	8e 93       	st	-X, r24
     848:	51 97       	sbiw	r26, 0x11	; 17
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	80 83       	st	Z, r24
     84e:	85 e0       	ldi	r24, 0x05	; 5
     850:	82 83       	std	Z+2, r24	; 0x02
     852:	11 82       	std	Z+1, r1	; 0x01
     854:	cf 01       	movw	r24, r30
     856:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <TIM8_Base_Init>
     85a:	81 11       	cpse	r24, r1
     85c:	5b c0       	rjmp	.+182    	; 0x914 <ctcBegin+0x1f8>
     85e:	85 e1       	ldi	r24, 0x15	; 21
     860:	8c 9f       	mul	r24, r28
     862:	f0 01       	movw	r30, r0
     864:	8d 9f       	mul	r24, r29
     866:	f0 0d       	add	r31, r0
     868:	11 24       	eor	r1, r1
     86a:	ea 50       	subi	r30, 0x0A	; 10
     86c:	fc 4f       	sbci	r31, 0xFC	; 252
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
     872:	a1 89       	ldd	r26, Z+17	; 0x11
     874:	b2 89       	ldd	r27, Z+18	; 0x12
     876:	8c 93       	st	X, r24
     878:	a1 89       	ldd	r26, Z+17	; 0x11
     87a:	b2 89       	ldd	r27, Z+18	; 0x12
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	8c 93       	st	X, r24
     880:	a1 89       	ldd	r26, Z+17	; 0x11
     882:	b2 89       	ldd	r27, Z+18	; 0x12
     884:	12 96       	adiw	r26, 0x02	; 2
     886:	8c 93       	st	X, r24
     888:	a1 89       	ldd	r26, Z+17	; 0x11
     88a:	b2 89       	ldd	r27, Z+18	; 0x12
     88c:	13 96       	adiw	r26, 0x03	; 3
     88e:	1c 92       	st	X, r1
     890:	a1 89       	ldd	r26, Z+17	; 0x11
     892:	b2 89       	ldd	r27, Z+18	; 0x12
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	1c 92       	st	X, r1
     898:	61 89       	ldd	r22, Z+17	; 0x11
     89a:	72 89       	ldd	r23, Z+18	; 0x12
     89c:	85 85       	ldd	r24, Z+13	; 0x0d
     89e:	96 85       	ldd	r25, Z+14	; 0x0e
     8a0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TIM8_OC_Init>
     8a4:	88 23       	and	r24, r24
     8a6:	c1 f1       	breq	.+112    	; 0x918 <ctcBegin+0x1fc>
     8a8:	85 e1       	ldi	r24, 0x15	; 21
     8aa:	8c 9f       	mul	r24, r28
     8ac:	f0 01       	movw	r30, r0
     8ae:	8d 9f       	mul	r24, r29
     8b0:	f0 0d       	add	r31, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	ea 50       	subi	r30, 0x0A	; 10
     8b6:	fc 4f       	sbci	r31, 0xFC	; 252
     8b8:	10 82       	st	Z, r1
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	2e c0       	rjmp	.+92     	; 0x91a <ctcBegin+0x1fe>
     8be:	85 e1       	ldi	r24, 0x15	; 21
     8c0:	8c 9f       	mul	r24, r28
     8c2:	f0 01       	movw	r30, r0
     8c4:	8d 9f       	mul	r24, r29
     8c6:	f0 0d       	add	r31, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	ea 50       	subi	r30, 0x0A	; 10
     8cc:	fc 4f       	sbci	r31, 0xFC	; 252
     8ce:	af ec       	ldi	r26, 0xCF	; 207
     8d0:	b3 e0       	ldi	r27, 0x03	; 3
     8d2:	b0 8b       	std	Z+16, r27	; 0x10
     8d4:	a7 87       	std	Z+15, r26	; 0x0f
     8d6:	ca e4       	ldi	r28, 0x4A	; 74
     8d8:	d4 e0       	ldi	r29, 0x04	; 4
     8da:	d4 8b       	std	Z+20, r29	; 0x14
     8dc:	c3 8b       	std	Z+19, r28	; 0x13
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	8c 93       	st	X, r24
     8e2:	12 96       	adiw	r26, 0x02	; 2
     8e4:	1c 92       	st	X, r1
     8e6:	12 97       	sbiw	r26, 0x02	; 2
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	1c 92       	st	X, r1
     8ec:	11 97       	sbiw	r26, 0x01	; 1
     8ee:	15 96       	adiw	r26, 0x05	; 5
     8f0:	1c 92       	st	X, r1
     8f2:	1e 92       	st	-X, r1
     8f4:	14 97       	sbiw	r26, 0x04	; 4
     8f6:	1c 82       	std	Y+4, r1	; 0x04
     8f8:	1b 82       	std	Y+3, r1	; 0x03
     8fa:	1e 82       	std	Y+6, r1	; 0x06
     8fc:	1d 82       	std	Y+5, r1	; 0x05
     8fe:	18 86       	std	Y+8, r1	; 0x08
     900:	1f 82       	std	Y+7, r1	; 0x07
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 83       	st	Z, r24
     906:	09 c0       	rjmp	.+18     	; 0x91a <ctcBegin+0x1fe>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	07 c0       	rjmp	.+14     	; 0x91a <ctcBegin+0x1fe>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	05 c0       	rjmp	.+10     	; 0x91a <ctcBegin+0x1fe>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	03 c0       	rjmp	.+6      	; 0x91a <ctcBegin+0x1fe>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	01 c0       	rjmp	.+2      	; 0x91a <ctcBegin+0x1fe>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <ctcStart>:
     920:	28 2f       	mov	r18, r24
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	b9 f0       	breq	.+46     	; 0x956 <ctcStart+0x36>
     928:	28 f0       	brcs	.+10     	; 0x934 <ctcStart+0x14>
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	29 f1       	breq	.+74     	; 0x978 <ctcStart+0x58>
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	a1 f1       	breq	.+104    	; 0x99a <ctcStart+0x7a>
     932:	44 c0       	rjmp	.+136    	; 0x9bc <ctcStart+0x9c>
     934:	85 e1       	ldi	r24, 0x15	; 21
     936:	82 9f       	mul	r24, r18
     938:	f0 01       	movw	r30, r0
     93a:	83 9f       	mul	r24, r19
     93c:	f0 0d       	add	r31, r0
     93e:	11 24       	eor	r1, r1
     940:	ea 50       	subi	r30, 0x0A	; 10
     942:	fc 4f       	sbci	r31, 0xFC	; 252
     944:	85 85       	ldd	r24, Z+13	; 0x0d
     946:	96 85       	ldd	r25, Z+14	; 0x0e
     948:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TIM8_OC_Start>
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	88 23       	and	r24, r24
     950:	b1 f1       	breq	.+108    	; 0x9be <ctcStart+0x9e>
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	34 c0       	rjmp	.+104    	; 0x9be <ctcStart+0x9e>
     956:	85 e1       	ldi	r24, 0x15	; 21
     958:	82 9f       	mul	r24, r18
     95a:	f0 01       	movw	r30, r0
     95c:	83 9f       	mul	r24, r19
     95e:	f0 0d       	add	r31, r0
     960:	11 24       	eor	r1, r1
     962:	ea 50       	subi	r30, 0x0A	; 10
     964:	fc 4f       	sbci	r31, 0xFC	; 252
     966:	87 85       	ldd	r24, Z+15	; 0x0f
     968:	90 89       	ldd	r25, Z+16	; 0x10
     96a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <TIM16_OC_Start>
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	88 23       	and	r24, r24
     972:	29 f1       	breq	.+74     	; 0x9be <ctcStart+0x9e>
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	23 c0       	rjmp	.+70     	; 0x9be <ctcStart+0x9e>
     978:	85 e1       	ldi	r24, 0x15	; 21
     97a:	82 9f       	mul	r24, r18
     97c:	f0 01       	movw	r30, r0
     97e:	83 9f       	mul	r24, r19
     980:	f0 0d       	add	r31, r0
     982:	11 24       	eor	r1, r1
     984:	ea 50       	subi	r30, 0x0A	; 10
     986:	fc 4f       	sbci	r31, 0xFC	; 252
     988:	85 85       	ldd	r24, Z+13	; 0x0d
     98a:	96 85       	ldd	r25, Z+14	; 0x0e
     98c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TIM8_OC_Start>
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	88 23       	and	r24, r24
     994:	a1 f0       	breq	.+40     	; 0x9be <ctcStart+0x9e>
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	12 c0       	rjmp	.+36     	; 0x9be <ctcStart+0x9e>
     99a:	85 e1       	ldi	r24, 0x15	; 21
     99c:	82 9f       	mul	r24, r18
     99e:	f0 01       	movw	r30, r0
     9a0:	83 9f       	mul	r24, r19
     9a2:	f0 0d       	add	r31, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	ea 50       	subi	r30, 0x0A	; 10
     9a8:	fc 4f       	sbci	r31, 0xFC	; 252
     9aa:	87 85       	ldd	r24, Z+15	; 0x0f
     9ac:	90 89       	ldd	r25, Z+16	; 0x10
     9ae:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <TIM16_OC_Start>
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	88 23       	and	r24, r24
     9b6:	19 f0       	breq	.+6      	; 0x9be <ctcStart+0x9e>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <ctcStart+0x9e>
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	89 2f       	mov	r24, r25
     9c0:	08 95       	ret

000009c2 <ctcStop>:
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	b9 f0       	breq	.+46     	; 0x9f8 <ctcStop+0x36>
     9ca:	28 f0       	brcs	.+10     	; 0x9d6 <ctcStop+0x14>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	29 f1       	breq	.+74     	; 0xa1a <ctcStop+0x58>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	a1 f1       	breq	.+104    	; 0xa3c <ctcStop+0x7a>
     9d4:	44 c0       	rjmp	.+136    	; 0xa5e <ctcStop+0x9c>
     9d6:	85 e1       	ldi	r24, 0x15	; 21
     9d8:	82 9f       	mul	r24, r18
     9da:	f0 01       	movw	r30, r0
     9dc:	83 9f       	mul	r24, r19
     9de:	f0 0d       	add	r31, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	ea 50       	subi	r30, 0x0A	; 10
     9e4:	fc 4f       	sbci	r31, 0xFC	; 252
     9e6:	85 85       	ldd	r24, Z+13	; 0x0d
     9e8:	96 85       	ldd	r25, Z+14	; 0x0e
     9ea:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TIM8_OC_Stop>
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	88 23       	and	r24, r24
     9f2:	b1 f1       	breq	.+108    	; 0xa60 <ctcStop+0x9e>
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	34 c0       	rjmp	.+104    	; 0xa60 <ctcStop+0x9e>
     9f8:	85 e1       	ldi	r24, 0x15	; 21
     9fa:	82 9f       	mul	r24, r18
     9fc:	f0 01       	movw	r30, r0
     9fe:	83 9f       	mul	r24, r19
     a00:	f0 0d       	add	r31, r0
     a02:	11 24       	eor	r1, r1
     a04:	ea 50       	subi	r30, 0x0A	; 10
     a06:	fc 4f       	sbci	r31, 0xFC	; 252
     a08:	87 85       	ldd	r24, Z+15	; 0x0f
     a0a:	90 89       	ldd	r25, Z+16	; 0x10
     a0c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <TIM16_OC_Stop>
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	88 23       	and	r24, r24
     a14:	29 f1       	breq	.+74     	; 0xa60 <ctcStop+0x9e>
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	23 c0       	rjmp	.+70     	; 0xa60 <ctcStop+0x9e>
     a1a:	85 e1       	ldi	r24, 0x15	; 21
     a1c:	82 9f       	mul	r24, r18
     a1e:	f0 01       	movw	r30, r0
     a20:	83 9f       	mul	r24, r19
     a22:	f0 0d       	add	r31, r0
     a24:	11 24       	eor	r1, r1
     a26:	ea 50       	subi	r30, 0x0A	; 10
     a28:	fc 4f       	sbci	r31, 0xFC	; 252
     a2a:	85 85       	ldd	r24, Z+13	; 0x0d
     a2c:	96 85       	ldd	r25, Z+14	; 0x0e
     a2e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TIM8_OC_Stop>
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	88 23       	and	r24, r24
     a36:	a1 f0       	breq	.+40     	; 0xa60 <ctcStop+0x9e>
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	12 c0       	rjmp	.+36     	; 0xa60 <ctcStop+0x9e>
     a3c:	85 e1       	ldi	r24, 0x15	; 21
     a3e:	82 9f       	mul	r24, r18
     a40:	f0 01       	movw	r30, r0
     a42:	83 9f       	mul	r24, r19
     a44:	f0 0d       	add	r31, r0
     a46:	11 24       	eor	r1, r1
     a48:	ea 50       	subi	r30, 0x0A	; 10
     a4a:	fc 4f       	sbci	r31, 0xFC	; 252
     a4c:	87 85       	ldd	r24, Z+15	; 0x0f
     a4e:	90 89       	ldd	r25, Z+16	; 0x10
     a50:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <TIM16_OC_Stop>
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	88 23       	and	r24, r24
     a58:	19 f0       	breq	.+6      	; 0xa60 <ctcStop+0x9e>
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <ctcStop+0x9e>
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	89 2f       	mov	r24, r25
     a62:	08 95       	ret

00000a64 <ctcSetTcnt>:
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	d1 f0       	breq	.+52     	; 0xaa0 <ctcSetTcnt+0x3c>
     a6c:	30 f0       	brcs	.+12     	; 0xa7a <ctcSetTcnt+0x16>
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	a9 f1       	breq	.+106    	; 0xadc <ctcSetTcnt+0x78>
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	09 f4       	brne	.+2      	; 0xa78 <ctcSetTcnt+0x14>
     a76:	45 c0       	rjmp	.+138    	; 0xb02 <ctcSetTcnt+0x9e>
     a78:	61 c0       	rjmp	.+194    	; 0xb3c <ctcSetTcnt+0xd8>
     a7a:	85 e1       	ldi	r24, 0x15	; 21
     a7c:	82 9f       	mul	r24, r18
     a7e:	f0 01       	movw	r30, r0
     a80:	83 9f       	mul	r24, r19
     a82:	f0 0d       	add	r31, r0
     a84:	11 24       	eor	r1, r1
     a86:	ea 50       	subi	r30, 0x0A	; 10
     a88:	fc 4f       	sbci	r31, 0xFC	; 252
     a8a:	05 84       	ldd	r0, Z+13	; 0x0d
     a8c:	f6 85       	ldd	r31, Z+14	; 0x0e
     a8e:	e0 2d       	mov	r30, r0
     a90:	04 80       	ldd	r0, Z+4	; 0x04
     a92:	f5 81       	ldd	r31, Z+5	; 0x05
     a94:	e0 2d       	mov	r30, r0
     a96:	02 80       	ldd	r0, Z+2	; 0x02
     a98:	f3 81       	ldd	r31, Z+3	; 0x03
     a9a:	e0 2d       	mov	r30, r0
     a9c:	60 83       	st	Z, r22
     a9e:	4e c0       	rjmp	.+156    	; 0xb3c <ctcSetTcnt+0xd8>
     aa0:	85 e1       	ldi	r24, 0x15	; 21
     aa2:	82 9f       	mul	r24, r18
     aa4:	f0 01       	movw	r30, r0
     aa6:	83 9f       	mul	r24, r19
     aa8:	f0 0d       	add	r31, r0
     aaa:	11 24       	eor	r1, r1
     aac:	ea 50       	subi	r30, 0x0A	; 10
     aae:	fc 4f       	sbci	r31, 0xFC	; 252
     ab0:	a7 85       	ldd	r26, Z+15	; 0x0f
     ab2:	b0 89       	ldd	r27, Z+16	; 0x10
     ab4:	16 96       	adiw	r26, 0x06	; 6
     ab6:	0d 90       	ld	r0, X+
     ab8:	bc 91       	ld	r27, X
     aba:	a0 2d       	mov	r26, r0
     abc:	18 96       	adiw	r26, 0x08	; 8
     abe:	0d 90       	ld	r0, X+
     ac0:	bc 91       	ld	r27, X
     ac2:	a0 2d       	mov	r26, r0
     ac4:	7c 93       	st	X, r23
     ac6:	07 84       	ldd	r0, Z+15	; 0x0f
     ac8:	f0 89       	ldd	r31, Z+16	; 0x10
     aca:	e0 2d       	mov	r30, r0
     acc:	06 80       	ldd	r0, Z+6	; 0x06
     ace:	f7 81       	ldd	r31, Z+7	; 0x07
     ad0:	e0 2d       	mov	r30, r0
     ad2:	06 80       	ldd	r0, Z+6	; 0x06
     ad4:	f7 81       	ldd	r31, Z+7	; 0x07
     ad6:	e0 2d       	mov	r30, r0
     ad8:	60 83       	st	Z, r22
     ada:	30 c0       	rjmp	.+96     	; 0xb3c <ctcSetTcnt+0xd8>
     adc:	85 e1       	ldi	r24, 0x15	; 21
     ade:	82 9f       	mul	r24, r18
     ae0:	f0 01       	movw	r30, r0
     ae2:	83 9f       	mul	r24, r19
     ae4:	f0 0d       	add	r31, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	ea 50       	subi	r30, 0x0A	; 10
     aea:	fc 4f       	sbci	r31, 0xFC	; 252
     aec:	05 84       	ldd	r0, Z+13	; 0x0d
     aee:	f6 85       	ldd	r31, Z+14	; 0x0e
     af0:	e0 2d       	mov	r30, r0
     af2:	04 80       	ldd	r0, Z+4	; 0x04
     af4:	f5 81       	ldd	r31, Z+5	; 0x05
     af6:	e0 2d       	mov	r30, r0
     af8:	02 80       	ldd	r0, Z+2	; 0x02
     afa:	f3 81       	ldd	r31, Z+3	; 0x03
     afc:	e0 2d       	mov	r30, r0
     afe:	60 83       	st	Z, r22
     b00:	1d c0       	rjmp	.+58     	; 0xb3c <ctcSetTcnt+0xd8>
     b02:	85 e1       	ldi	r24, 0x15	; 21
     b04:	82 9f       	mul	r24, r18
     b06:	f0 01       	movw	r30, r0
     b08:	83 9f       	mul	r24, r19
     b0a:	f0 0d       	add	r31, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	ea 50       	subi	r30, 0x0A	; 10
     b10:	fc 4f       	sbci	r31, 0xFC	; 252
     b12:	a7 85       	ldd	r26, Z+15	; 0x0f
     b14:	b0 89       	ldd	r27, Z+16	; 0x10
     b16:	16 96       	adiw	r26, 0x06	; 6
     b18:	0d 90       	ld	r0, X+
     b1a:	bc 91       	ld	r27, X
     b1c:	a0 2d       	mov	r26, r0
     b1e:	18 96       	adiw	r26, 0x08	; 8
     b20:	0d 90       	ld	r0, X+
     b22:	bc 91       	ld	r27, X
     b24:	a0 2d       	mov	r26, r0
     b26:	7c 93       	st	X, r23
     b28:	07 84       	ldd	r0, Z+15	; 0x0f
     b2a:	f0 89       	ldd	r31, Z+16	; 0x10
     b2c:	e0 2d       	mov	r30, r0
     b2e:	06 80       	ldd	r0, Z+6	; 0x06
     b30:	f7 81       	ldd	r31, Z+7	; 0x07
     b32:	e0 2d       	mov	r30, r0
     b34:	06 80       	ldd	r0, Z+6	; 0x06
     b36:	f7 81       	ldd	r31, Z+7	; 0x07
     b38:	e0 2d       	mov	r30, r0
     b3a:	60 83       	st	Z, r22
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret

00000b40 <ctcSetOcr>:

bool ctcSetOcr(uint8_t ch_, uint16_t ocr_, uint8_t channel_)
{
	bool ret = true;
	ctc_t *p_ctc = &ctc_tbl[ch_];
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
	switch(ch_)
     b44:	88 23       	and	r24, r24
     b46:	19 f0       	breq	.+6      	; 0xb4e <ctcSetOcr+0xe>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	a1 f0       	breq	.+40     	; 0xb74 <ctcSetOcr+0x34>
     b4c:	25 c0       	rjmp	.+74     	; 0xb98 <ctcSetOcr+0x58>
	{
		case _DEF_TIM0:
		*(p_ctc->h_tim8->Regs->OCRn) = ocr_ & 0xFF;
     b4e:	85 e1       	ldi	r24, 0x15	; 21
     b50:	82 9f       	mul	r24, r18
     b52:	f0 01       	movw	r30, r0
     b54:	83 9f       	mul	r24, r19
     b56:	f0 0d       	add	r31, r0
     b58:	11 24       	eor	r1, r1
     b5a:	ea 50       	subi	r30, 0x0A	; 10
     b5c:	fc 4f       	sbci	r31, 0xFC	; 252
     b5e:	05 84       	ldd	r0, Z+13	; 0x0d
     b60:	f6 85       	ldd	r31, Z+14	; 0x0e
     b62:	e0 2d       	mov	r30, r0
     b64:	04 80       	ldd	r0, Z+4	; 0x04
     b66:	f5 81       	ldd	r31, Z+5	; 0x05
     b68:	e0 2d       	mov	r30, r0
     b6a:	04 80       	ldd	r0, Z+4	; 0x04
     b6c:	f5 81       	ldd	r31, Z+5	; 0x05
     b6e:	e0 2d       	mov	r30, r0
     b70:	60 83       	st	Z, r22
		break;
     b72:	12 c0       	rjmp	.+36     	; 0xb98 <ctcSetOcr+0x58>
		case _DEF_TIM2:
		*(p_ctc->h_tim8->Regs->OCRn) = ocr_ & 0xFF;
     b74:	85 e1       	ldi	r24, 0x15	; 21
     b76:	82 9f       	mul	r24, r18
     b78:	f0 01       	movw	r30, r0
     b7a:	83 9f       	mul	r24, r19
     b7c:	f0 0d       	add	r31, r0
     b7e:	11 24       	eor	r1, r1
     b80:	ea 50       	subi	r30, 0x0A	; 10
     b82:	fc 4f       	sbci	r31, 0xFC	; 252
     b84:	05 84       	ldd	r0, Z+13	; 0x0d
     b86:	f6 85       	ldd	r31, Z+14	; 0x0e
     b88:	e0 2d       	mov	r30, r0
     b8a:	04 80       	ldd	r0, Z+4	; 0x04
     b8c:	f5 81       	ldd	r31, Z+5	; 0x05
     b8e:	e0 2d       	mov	r30, r0
     b90:	04 80       	ldd	r0, Z+4	; 0x04
     b92:	f5 81       	ldd	r31, Z+5	; 0x05
     b94:	e0 2d       	mov	r30, r0
     b96:	60 83       	st	Z, r22
		break;
		default:
		break;
	}
	
	if (channel_ == _DEF_CH_A)
     b98:	41 30       	cpi	r20, 0x01	; 1
     b9a:	f1 f4       	brne	.+60     	; 0xbd8 <ctcSetOcr+0x98>
	{
		*(p_ctc->h_tim16->Regs->OCRnAH) = (ocr_ >> 8) & 0xFF;
     b9c:	85 e1       	ldi	r24, 0x15	; 21
     b9e:	82 9f       	mul	r24, r18
     ba0:	f0 01       	movw	r30, r0
     ba2:	83 9f       	mul	r24, r19
     ba4:	f0 0d       	add	r31, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	ea 50       	subi	r30, 0x0A	; 10
     baa:	fc 4f       	sbci	r31, 0xFC	; 252
     bac:	a7 85       	ldd	r26, Z+15	; 0x0f
     bae:	b0 89       	ldd	r27, Z+16	; 0x10
     bb0:	16 96       	adiw	r26, 0x06	; 6
     bb2:	0d 90       	ld	r0, X+
     bb4:	bc 91       	ld	r27, X
     bb6:	a0 2d       	mov	r26, r0
     bb8:	1c 96       	adiw	r26, 0x0c	; 12
     bba:	0d 90       	ld	r0, X+
     bbc:	bc 91       	ld	r27, X
     bbe:	a0 2d       	mov	r26, r0
     bc0:	7c 93       	st	X, r23
		*(p_ctc->h_tim16->Regs->OCRnAL) = (ocr_ & 0xFF);
     bc2:	07 84       	ldd	r0, Z+15	; 0x0f
     bc4:	f0 89       	ldd	r31, Z+16	; 0x10
     bc6:	e0 2d       	mov	r30, r0
     bc8:	06 80       	ldd	r0, Z+6	; 0x06
     bca:	f7 81       	ldd	r31, Z+7	; 0x07
     bcc:	e0 2d       	mov	r30, r0
     bce:	02 84       	ldd	r0, Z+10	; 0x0a
     bd0:	f3 85       	ldd	r31, Z+11	; 0x0b
     bd2:	e0 2d       	mov	r30, r0
     bd4:	60 83       	st	Z, r22
     bd6:	1f c0       	rjmp	.+62     	; 0xc16 <ctcSetOcr+0xd6>
	}
	else if (channel_ == _DEF_CH_B)
     bd8:	42 30       	cpi	r20, 0x02	; 2
     bda:	e9 f4       	brne	.+58     	; 0xc16 <ctcSetOcr+0xd6>
	{
		*(p_ctc->h_tim16->Regs->OCRnBH) = (ocr_ >> 8) & 0xFF;
     bdc:	85 e1       	ldi	r24, 0x15	; 21
     bde:	82 9f       	mul	r24, r18
     be0:	f0 01       	movw	r30, r0
     be2:	83 9f       	mul	r24, r19
     be4:	f0 0d       	add	r31, r0
     be6:	11 24       	eor	r1, r1
     be8:	ea 50       	subi	r30, 0x0A	; 10
     bea:	fc 4f       	sbci	r31, 0xFC	; 252
     bec:	a7 85       	ldd	r26, Z+15	; 0x0f
     bee:	b0 89       	ldd	r27, Z+16	; 0x10
     bf0:	16 96       	adiw	r26, 0x06	; 6
     bf2:	0d 90       	ld	r0, X+
     bf4:	bc 91       	ld	r27, X
     bf6:	a0 2d       	mov	r26, r0
     bf8:	50 96       	adiw	r26, 0x10	; 16
     bfa:	0d 90       	ld	r0, X+
     bfc:	bc 91       	ld	r27, X
     bfe:	a0 2d       	mov	r26, r0
     c00:	7c 93       	st	X, r23
		*(p_ctc->h_tim16->Regs->OCRnBL) = (ocr_ & 0xFF);
     c02:	07 84       	ldd	r0, Z+15	; 0x0f
     c04:	f0 89       	ldd	r31, Z+16	; 0x10
     c06:	e0 2d       	mov	r30, r0
     c08:	06 80       	ldd	r0, Z+6	; 0x06
     c0a:	f7 81       	ldd	r31, Z+7	; 0x07
     c0c:	e0 2d       	mov	r30, r0
     c0e:	06 84       	ldd	r0, Z+14	; 0x0e
     c10:	f7 85       	ldd	r31, Z+15	; 0x0f
     c12:	e0 2d       	mov	r30, r0
     c14:	60 83       	st	Z, r22
	}
	
	return ret;
}
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	08 95       	ret

00000c1a <motorRun>:
	{
		return 3;
	}
#endif
	return 0;
}
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	cf e9       	ldi	r28, 0x9F	; 159
     c20:	d1 e0       	ldi	r29, 0x01	; 1
     c22:	ea 81       	ldd	r30, Y+2	; 0x02
     c24:	fb 81       	ldd	r31, Y+3	; 0x03
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	09 95       	icall
     c2a:	ea 81       	ldd	r30, Y+2	; 0x02
     c2c:	fb 81       	ldd	r31, Y+3	; 0x03
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	09 95       	icall
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <motorStop>:
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cf e9       	ldi	r28, 0x9F	; 159
     c3e:	d1 e0       	ldi	r29, 0x01	; 1
     c40:	ec 81       	ldd	r30, Y+4	; 0x04
     c42:	fd 81       	ldd	r31, Y+5	; 0x05
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	09 95       	icall
     c48:	ec 81       	ldd	r30, Y+4	; 0x04
     c4a:	fd 81       	ldd	r31, Y+5	; 0x05
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	09 95       	icall
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <motorBreak>:
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cf e9       	ldi	r28, 0x9F	; 159
     c5c:	d1 e0       	ldi	r29, 0x01	; 1
     c5e:	ee 81       	ldd	r30, Y+6	; 0x06
     c60:	ff 81       	ldd	r31, Y+7	; 0x07
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	09 95       	icall
     c66:	ee 81       	ldd	r30, Y+6	; 0x06
     c68:	ff 81       	ldd	r31, Y+7	; 0x07
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	09 95       	icall
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <motorSetSpeed>:
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	85 36       	cpi	r24, 0x65	; 101
     c7e:	f0 f4       	brcc	.+60     	; 0xcbc <motorSetSpeed+0x48>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	82 9f       	mul	r24, r18
     c84:	c0 01       	movw	r24, r0
     c86:	11 24       	eor	r1, r1
     c88:	68 e7       	ldi	r22, 0x78	; 120
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     c90:	cf ef       	ldi	r28, 0xFF	; 255
     c92:	d0 e0       	ldi	r29, 0x00	; 0
     c94:	c6 1b       	sub	r28, r22
     c96:	d7 0b       	sbc	r29, r23
     c98:	0f e9       	ldi	r16, 0x9F	; 159
     c9a:	11 e0       	ldi	r17, 0x01	; 1
     c9c:	d8 01       	movw	r26, r16
     c9e:	18 96       	adiw	r26, 0x08	; 8
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	19 97       	sbiw	r26, 0x09	; 9
     ca6:	6c 2f       	mov	r22, r28
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	09 95       	icall
     cac:	d8 01       	movw	r26, r16
     cae:	18 96       	adiw	r26, 0x08	; 8
     cb0:	ed 91       	ld	r30, X+
     cb2:	fc 91       	ld	r31, X
     cb4:	19 97       	sbiw	r26, 0x09	; 9
     cb6:	6c 2f       	mov	r22, r28
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	09 95       	icall
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <motorGetSpeed>:
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cf e9       	ldi	r28, 0x9F	; 159
     cce:	d1 e0       	ldi	r29, 0x01	; 1
     cd0:	ea 85       	ldd	r30, Y+10	; 0x0a
     cd2:	fb 85       	ldd	r31, Y+11	; 0x0b
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	09 95       	icall
     cd8:	18 2f       	mov	r17, r24
     cda:	ea 85       	ldd	r30, Y+10	; 0x0a
     cdc:	fb 85       	ldd	r31, Y+11	; 0x0b
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	09 95       	icall
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	1f 3f       	cpi	r17, 0xFF	; 255
     ce6:	08 f4       	brcc	.+2      	; 0xcea <motorGetSpeed+0x24>
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	28 e7       	ldi	r18, 0x78	; 120
     cec:	92 9f       	mul	r25, r18
     cee:	90 2d       	mov	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	90 95       	com	r25
     cf4:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <__data_end>
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	8f 3f       	cpi	r24, 0xFF	; 255
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <motorGetSpeed+0x3a>
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	88 e7       	ldi	r24, 0x78	; 120
     d02:	98 9f       	mul	r25, r24
     d04:	90 2d       	mov	r25, r0
     d06:	11 24       	eor	r1, r1
     d08:	90 95       	com	r25
     d0a:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
     d0e:	8c e9       	ldi	r24, 0x9C	; 156
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	08 95       	ret

00000d1a <motorSetMotionState>:
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	99 f0       	breq	.+38     	; 0xd48 <motorSetMotionState+0x2e>
     d22:	28 f0       	brcs	.+10     	; 0xd2e <motorSetMotionState+0x14>
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	e9 f0       	breq	.+58     	; 0xd62 <motorSetMotionState+0x48>
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	41 f1       	breq	.+80     	; 0xd7c <motorSetMotionState+0x62>
     d2c:	33 c0       	rjmp	.+102    	; 0xd94 <motorSetMotionState+0x7a>
     d2e:	cf e9       	ldi	r28, 0x9F	; 159
     d30:	d1 e0       	ldi	r29, 0x01	; 1
     d32:	ec 85       	ldd	r30, Y+12	; 0x0c
     d34:	fd 85       	ldd	r31, Y+13	; 0x0d
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	09 95       	icall
     d3c:	ec 85       	ldd	r30, Y+12	; 0x0c
     d3e:	fd 85       	ldd	r31, Y+13	; 0x0d
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	09 95       	icall
     d46:	26 c0       	rjmp	.+76     	; 0xd94 <motorSetMotionState+0x7a>
     d48:	cf e9       	ldi	r28, 0x9F	; 159
     d4a:	d1 e0       	ldi	r29, 0x01	; 1
     d4c:	ec 85       	ldd	r30, Y+12	; 0x0c
     d4e:	fd 85       	ldd	r31, Y+13	; 0x0d
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	09 95       	icall
     d56:	ec 85       	ldd	r30, Y+12	; 0x0c
     d58:	fd 85       	ldd	r31, Y+13	; 0x0d
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	09 95       	icall
     d60:	19 c0       	rjmp	.+50     	; 0xd94 <motorSetMotionState+0x7a>
     d62:	cf e9       	ldi	r28, 0x9F	; 159
     d64:	d1 e0       	ldi	r29, 0x01	; 1
     d66:	ec 85       	ldd	r30, Y+12	; 0x0c
     d68:	fd 85       	ldd	r31, Y+13	; 0x0d
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	09 95       	icall
     d70:	ec 85       	ldd	r30, Y+12	; 0x0c
     d72:	fd 85       	ldd	r31, Y+13	; 0x0d
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	09 95       	icall
     d7a:	0c c0       	rjmp	.+24     	; 0xd94 <motorSetMotionState+0x7a>
     d7c:	cf e9       	ldi	r28, 0x9F	; 159
     d7e:	d1 e0       	ldi	r29, 0x01	; 1
     d80:	ec 85       	ldd	r30, Y+12	; 0x0c
     d82:	fd 85       	ldd	r31, Y+13	; 0x0d
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	09 95       	icall
     d8a:	ec 85       	ldd	r30, Y+12	; 0x0c
     d8c:	fd 85       	ldd	r31, Y+13	; 0x0d
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	09 95       	icall
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <motorInit>:
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	ad d1       	rcall	.+858    	; 0x10fc <a4988Init>
     da2:	88 23       	and	r24, r24
     da4:	49 f0       	breq	.+18     	; 0xdb8 <motorInit+0x1e>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	a9 d1       	rcall	.+850    	; 0x10fc <a4988Init>
     daa:	88 23       	and	r24, r24
     dac:	29 f0       	breq	.+10     	; 0xdb8 <motorInit+0x1e>
     dae:	8f e9       	ldi	r24, 0x9F	; 159
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	74 d2       	rcall	.+1256   	; 0x129c <a4988DriverInit>
     db4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <is_init>
     db8:	cf e9       	ldi	r28, 0x9F	; 159
     dba:	d1 e0       	ldi	r29, 0x01	; 1
     dbc:	e8 89       	ldd	r30, Y+16	; 0x10
     dbe:	f9 89       	ldd	r31, Y+17	; 0x11
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	09 95       	icall
     dc8:	e8 89       	ldd	r30, Y+16	; 0x10
     dca:	f9 89       	ldd	r31, Y+17	; 0x11
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	09 95       	icall
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	a1 df       	rcall	.-190    	; 0xd1a <motorSetMotionState>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	4c df       	rcall	.-360    	; 0xc74 <motorSetSpeed>
     ddc:	3c df       	rcall	.-392    	; 0xc56 <motorBreak>
     dde:	2c df       	rcall	.-424    	; 0xc38 <motorStop>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <motorAdvance>:

void motorAdvance(void)
{
#ifdef _USE_HW_A4988
	motorSetMotionState(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	97 df       	rcall	.-210    	; 0xd1a <motorSetMotionState>
	motorRun();
     dec:	16 cf       	rjmp	.-468    	; 0xc1a <motorRun>
     dee:	08 95       	ret

00000df0 <motorGoBackward>:
     df0:	82 e0       	ldi	r24, 0x02	; 2
}

void motorGoBackward(void)
{
#ifdef _USE_HW_A4988
	motorSetMotionState(2);
     df2:	93 df       	rcall	.-218    	; 0xd1a <motorSetMotionState>
	motorRun();
     df4:	12 cf       	rjmp	.-476    	; 0xc1a <motorRun>
     df6:	08 95       	ret

00000df8 <motorSpin>:
     df8:	88 23       	and	r24, r24
}

void motorSpin(bool spinwise_)
{
#ifdef _USE_HW_A4988
	if (spinwise_)
     dfa:	19 f0       	breq	.+6      	; 0xe02 <motorSpin+0xa>
	{
		motorSetMotionState(3);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	8d df       	rcall	.-230    	; 0xd1a <motorSetMotionState>
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <motorSpin+0xe>
	}
	else
	{
		motorSetMotionState(1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
	}
	motorRun();
     e04:	8a df       	rcall	.-236    	; 0xd1a <motorSetMotionState>
     e06:	09 cf       	rjmp	.-494    	; 0xc1a <motorRun>
     e08:	08 95       	ret

00000e0a <motorSteering>:
	
#endif
}

void motorSteering(int8_t steering_degrees_)
{
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
	const uint8_t power_max = 255;
	const uint8_t scale_limit = 20;
	uint8_t steering_bias_proportion = abs(steering_degrees_);
	uint8_t *power_proportion = NULL;
		
	if (steering_degrees_ < -100 || steering_degrees_ > 100)
     e1a:	94 e6       	ldi	r25, 0x64	; 100
     e1c:	98 0f       	add	r25, r24
     e1e:	99 3c       	cpi	r25, 0xC9	; 201
     e20:	08 f0       	brcs	.+2      	; 0xe24 <motorSteering+0x1a>
     e22:	2a c1       	rjmp	.+596    	; 0x1078 <motorSteering+0x26e>

void motorSteering(int8_t steering_degrees_)
{
	const uint8_t power_max = 255;
	const uint8_t scale_limit = 20;
	uint8_t steering_bias_proportion = abs(steering_degrees_);
     e24:	28 2f       	mov	r18, r24
     e26:	08 2e       	mov	r0, r24
     e28:	00 0c       	add	r0, r0
     e2a:	33 0b       	sbc	r19, r19
     e2c:	33 23       	and	r19, r19
     e2e:	1c f4       	brge	.+6      	; 0xe36 <motorSteering+0x2c>
     e30:	31 95       	neg	r19
     e32:	21 95       	neg	r18
     e34:	31 09       	sbc	r19, r1
     e36:	c8 2f       	mov	r28, r24
     e38:	d2 2f       	mov	r29, r18
	if (steering_degrees_ < -100 || steering_degrees_ > 100)
	{
		return;
	}
#ifdef _USE_HW_A4988
	power_proportion = motorGetSpeed();
     e3a:	45 df       	rcall	.-374    	; 0xcc6 <motorGetSpeed>
     e3c:	8c 01       	movw	r16, r24

	if (steering_degrees_ < 0)
     e3e:	cc 23       	and	r28, r28
     e40:	0c f0       	brlt	.+2      	; 0xe44 <motorSteering+0x3a>
     e42:	68 c0       	rjmp	.+208    	; 0xf14 <motorSteering+0x10a>
	{
		if (power_proportion[0] >= power_proportion[1])
     e44:	dc 01       	movw	r26, r24
     e46:	8c 91       	ld	r24, X
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	2c 91       	ld	r18, X
     e4c:	82 17       	cp	r24, r18
     e4e:	88 f1       	brcs	.+98     	; 0xeb2 <motorSteering+0xa8>
		{
			steering_bias_proportion = (uint8_t)((power_proportion[0] * steering_bias_proportion) / (100 + scale_limit));
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
     e50:	d8 9f       	mul	r29, r24
     e52:	c0 01       	movw	r24, r0
     e54:	11 24       	eor	r1, r1
     e56:	0f 2e       	mov	r0, r31
     e58:	f8 e7       	ldi	r31, 0x78	; 120
     e5a:	ef 2e       	mov	r14, r31
     e5c:	f1 2c       	mov	r15, r1
     e5e:	f0 2d       	mov	r31, r0
     e60:	b7 01       	movw	r22, r14
     e62:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     e66:	cf ef       	ldi	r28, 0xFF	; 255
     e68:	6c 9f       	mul	r22, r28
     e6a:	c0 01       	movw	r24, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	b7 01       	movw	r22, r14
     e70:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     e74:	60 95       	com	r22
     e76:	0f 2e       	mov	r0, r31
     e78:	ff e9       	ldi	r31, 0x9F	; 159
     e7a:	cf 2e       	mov	r12, r31
     e7c:	f1 e0       	ldi	r31, 0x01	; 1
     e7e:	df 2e       	mov	r13, r31
     e80:	f0 2d       	mov	r31, r0
     e82:	d6 01       	movw	r26, r12
     e84:	18 96       	adiw	r26, 0x08	; 8
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	19 97       	sbiw	r26, 0x09	; 9
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max * power_proportion[0]) / (100 + scale_limit)));
     e90:	f8 01       	movw	r30, r16
     e92:	80 81       	ld	r24, Z
     e94:	c8 9f       	mul	r28, r24
     e96:	c0 01       	movw	r24, r0
     e98:	11 24       	eor	r1, r1
     e9a:	b7 01       	movw	r22, r14
     e9c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     ea0:	60 95       	com	r22
     ea2:	d6 01       	movw	r26, r12
     ea4:	18 96       	adiw	r26, 0x08	; 8
     ea6:	ed 91       	ld	r30, X+
     ea8:	fc 91       	ld	r31, X
     eaa:	19 97       	sbiw	r26, 0x09	; 9
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	09 95       	icall
     eb0:	e2 c0       	rjmp	.+452    	; 0x1076 <motorSteering+0x26c>
		}
		else if (power_proportion[0] < power_proportion[1])
		{
			steering_bias_proportion = (uint8_t)((power_proportion[1] * steering_bias_proportion) / (100 + scale_limit));
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
     eb2:	d2 9f       	mul	r29, r18
     eb4:	c0 01       	movw	r24, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	0f 2e       	mov	r0, r31
     eba:	f8 e7       	ldi	r31, 0x78	; 120
     ebc:	ef 2e       	mov	r14, r31
     ebe:	f1 2c       	mov	r15, r1
     ec0:	f0 2d       	mov	r31, r0
     ec2:	b7 01       	movw	r22, r14
     ec4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     ec8:	cf ef       	ldi	r28, 0xFF	; 255
     eca:	6c 9f       	mul	r22, r28
     ecc:	c0 01       	movw	r24, r0
     ece:	11 24       	eor	r1, r1
     ed0:	b7 01       	movw	r22, r14
     ed2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     ed6:	60 95       	com	r22
     ed8:	0f 2e       	mov	r0, r31
     eda:	ff e9       	ldi	r31, 0x9F	; 159
     edc:	cf 2e       	mov	r12, r31
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	df 2e       	mov	r13, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	d6 01       	movw	r26, r12
     ee6:	18 96       	adiw	r26, 0x08	; 8
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	19 97       	sbiw	r26, 0x09	; 9
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max * power_proportion[1]) / (100 + scale_limit)));
     ef2:	f8 01       	movw	r30, r16
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	c8 9f       	mul	r28, r24
     ef8:	c0 01       	movw	r24, r0
     efa:	11 24       	eor	r1, r1
     efc:	b7 01       	movw	r22, r14
     efe:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     f02:	60 95       	com	r22
     f04:	d6 01       	movw	r26, r12
     f06:	18 96       	adiw	r26, 0x08	; 8
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	19 97       	sbiw	r26, 0x09	; 9
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	09 95       	icall
     f12:	b1 c0       	rjmp	.+354    	; 0x1076 <motorSteering+0x26c>
		}
	}
	else if (steering_degrees_ > 0)
     f14:	1c 16       	cp	r1, r28
     f16:	0c f0       	brlt	.+2      	; 0xf1a <motorSteering+0x110>
     f18:	6e c0       	rjmp	.+220    	; 0xff6 <motorSteering+0x1ec>
	{
		if (power_proportion[0] >= power_proportion[1])
     f1a:	fc 01       	movw	r30, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	01 81       	ldd	r16, Z+1	; 0x01
     f20:	80 17       	cp	r24, r16
     f22:	a8 f1       	brcs	.+106    	; 0xf8e <motorSteering+0x184>
		{
			steering_bias_proportion = (uint8_t)((power_proportion[0] * steering_bias_proportion) / (100 + scale_limit));
     f24:	08 2f       	mov	r16, r24
     f26:	10 e0       	ldi	r17, 0x00	; 0
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max * power_proportion[0]) / (100 + scale_limit)));
     f28:	cf ef       	ldi	r28, 0xFF	; 255
     f2a:	c0 9f       	mul	r28, r16
     f2c:	c0 01       	movw	r24, r0
     f2e:	c1 9f       	mul	r28, r17
     f30:	90 0d       	add	r25, r0
     f32:	11 24       	eor	r1, r1
     f34:	0f 2e       	mov	r0, r31
     f36:	f8 e7       	ldi	r31, 0x78	; 120
     f38:	ef 2e       	mov	r14, r31
     f3a:	f1 2c       	mov	r15, r1
     f3c:	f0 2d       	mov	r31, r0
     f3e:	b7 01       	movw	r22, r14
     f40:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     f44:	60 95       	com	r22
     f46:	0f 2e       	mov	r0, r31
     f48:	ff e9       	ldi	r31, 0x9F	; 159
     f4a:	cf 2e       	mov	r12, r31
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	df 2e       	mov	r13, r31
     f50:	f0 2d       	mov	r31, r0
     f52:	d6 01       	movw	r26, r12
     f54:	18 96       	adiw	r26, 0x08	; 8
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	19 97       	sbiw	r26, 0x09	; 9
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
     f60:	d0 9f       	mul	r29, r16
     f62:	c0 01       	movw	r24, r0
     f64:	d1 9f       	mul	r29, r17
     f66:	90 0d       	add	r25, r0
     f68:	11 24       	eor	r1, r1
     f6a:	b7 01       	movw	r22, r14
     f6c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     f70:	6c 9f       	mul	r22, r28
     f72:	c0 01       	movw	r24, r0
     f74:	11 24       	eor	r1, r1
     f76:	b7 01       	movw	r22, r14
     f78:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     f7c:	60 95       	com	r22
     f7e:	d6 01       	movw	r26, r12
     f80:	18 96       	adiw	r26, 0x08	; 8
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	19 97       	sbiw	r26, 0x09	; 9
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	09 95       	icall
     f8c:	74 c0       	rjmp	.+232    	; 0x1076 <motorSteering+0x26c>
		}
		else if (power_proportion[0] < power_proportion[1])
		{
			steering_bias_proportion = (uint8_t)((power_proportion[1] * steering_bias_proportion) / (100 + scale_limit));
     f8e:	10 e0       	ldi	r17, 0x00	; 0
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max *  power_proportion[1]) / (100 + scale_limit)));
     f90:	cf ef       	ldi	r28, 0xFF	; 255
     f92:	c0 9f       	mul	r28, r16
     f94:	c0 01       	movw	r24, r0
     f96:	c1 9f       	mul	r28, r17
     f98:	90 0d       	add	r25, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	0f 2e       	mov	r0, r31
     f9e:	f8 e7       	ldi	r31, 0x78	; 120
     fa0:	ef 2e       	mov	r14, r31
     fa2:	f1 2c       	mov	r15, r1
     fa4:	f0 2d       	mov	r31, r0
     fa6:	b7 01       	movw	r22, r14
     fa8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     fac:	60 95       	com	r22
     fae:	0f 2e       	mov	r0, r31
     fb0:	ff e9       	ldi	r31, 0x9F	; 159
     fb2:	cf 2e       	mov	r12, r31
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	df 2e       	mov	r13, r31
     fb8:	f0 2d       	mov	r31, r0
     fba:	d6 01       	movw	r26, r12
     fbc:	18 96       	adiw	r26, 0x08	; 8
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	19 97       	sbiw	r26, 0x09	; 9
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max *steering_bias_proportion) / (100 + scale_limit)));
     fc8:	d0 9f       	mul	r29, r16
     fca:	c0 01       	movw	r24, r0
     fcc:	d1 9f       	mul	r29, r17
     fce:	90 0d       	add	r25, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     fd8:	6c 9f       	mul	r22, r28
     fda:	c0 01       	movw	r24, r0
     fdc:	11 24       	eor	r1, r1
     fde:	b7 01       	movw	r22, r14
     fe0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
     fe4:	60 95       	com	r22
     fe6:	d6 01       	movw	r26, r12
     fe8:	18 96       	adiw	r26, 0x08	; 8
     fea:	ed 91       	ld	r30, X+
     fec:	fc 91       	ld	r31, X
     fee:	19 97       	sbiw	r26, 0x09	; 9
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	09 95       	icall
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <motorSteering+0x26c>
		}
	}
	else if (steering_degrees_ == 0)
     ff6:	c1 11       	cpse	r28, r1
     ff8:	3e c0       	rjmp	.+124    	; 0x1076 <motorSteering+0x26c>
	{
		if (power_proportion[0] >= power_proportion[1])
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	89 17       	cp	r24, r25
    1002:	e8 f0       	brcs	.+58     	; 0x103e <motorSteering+0x234>
		{
			steering_bias_proportion = power_proportion[0];
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
    1004:	ff ef       	ldi	r31, 0xFF	; 255
    1006:	8f 9f       	mul	r24, r31
    1008:	c0 01       	movw	r24, r0
    100a:	11 24       	eor	r1, r1
    100c:	68 e7       	ldi	r22, 0x78	; 120
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
    1014:	c6 2f       	mov	r28, r22
    1016:	c0 95       	com	r28
    1018:	0f e9       	ldi	r16, 0x9F	; 159
    101a:	11 e0       	ldi	r17, 0x01	; 1
    101c:	d8 01       	movw	r26, r16
    101e:	18 96       	adiw	r26, 0x08	; 8
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	19 97       	sbiw	r26, 0x09	; 9
    1026:	6c 2f       	mov	r22, r28
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
    102c:	d8 01       	movw	r26, r16
    102e:	18 96       	adiw	r26, 0x08	; 8
    1030:	ed 91       	ld	r30, X+
    1032:	fc 91       	ld	r31, X
    1034:	19 97       	sbiw	r26, 0x09	; 9
    1036:	6c 2f       	mov	r22, r28
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	09 95       	icall
    103c:	1c c0       	rjmp	.+56     	; 0x1076 <motorSteering+0x26c>
		}
		else if (power_proportion[0] < power_proportion[1])
		{
			steering_bias_proportion = power_proportion[1];
			motor.setSpeed(_DEF_A4988_0, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
    103e:	bf ef       	ldi	r27, 0xFF	; 255
    1040:	9b 9f       	mul	r25, r27
    1042:	c0 01       	movw	r24, r0
    1044:	11 24       	eor	r1, r1
    1046:	68 e7       	ldi	r22, 0x78	; 120
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__divmodhi4>
    104e:	c6 2f       	mov	r28, r22
    1050:	c0 95       	com	r28
    1052:	0f e9       	ldi	r16, 0x9F	; 159
    1054:	11 e0       	ldi	r17, 0x01	; 1
    1056:	d8 01       	movw	r26, r16
    1058:	18 96       	adiw	r26, 0x08	; 8
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	19 97       	sbiw	r26, 0x09	; 9
    1060:	6c 2f       	mov	r22, r28
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	09 95       	icall
			motor.setSpeed(_DEF_A4988_1, power_max - (uint8_t)((power_max * steering_bias_proportion) / (100 + scale_limit)));
    1066:	d8 01       	movw	r26, r16
    1068:	18 96       	adiw	r26, 0x08	; 8
    106a:	ed 91       	ld	r30, X+
    106c:	fc 91       	ld	r31, X
    106e:	19 97       	sbiw	r26, 0x09	; 9
    1070:	6c 2f       	mov	r22, r28
    1072:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	motorRun();
    1074:	09 95       	icall
    1076:	d1 dd       	rcall	.-1118   	; 0xc1a <motorRun>
#endif
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	08 95       	ret

0000108a <a4988GetDirection>:

bool a4988GetDirection(uint8_t ch_)
{
	bool ret;
	
	a4988_t *p_a4988 = &a4988_tbl[ch_];
    108a:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	*/
	if (p_a4988->h_a4988->direction)
    108c:	fc 01       	movw	r30, r24
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	e5 59       	subi	r30, 0x95	; 149
    109c:	fb 4f       	sbci	r31, 0xFB	; 251
    109e:	03 80       	ldd	r0, Z+3	; 0x03
    10a0:	f4 81       	ldd	r31, Z+4	; 0x04
    10a2:	e0 2d       	mov	r30, r0
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	22 23       	and	r18, r18
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <a4988GetDirection+0x38>
	{
		ret = p_a4988->normal_rotate;
    10aa:	fc 01       	movw	r30, r24
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	8e 0f       	add	r24, r30
    10b6:	9f 1f       	adc	r25, r31
    10b8:	fc 01       	movw	r30, r24
    10ba:	e5 59       	subi	r30, 0x95	; 149
    10bc:	fb 4f       	sbci	r31, 0xFB	; 251
    10be:	81 81       	ldd	r24, Z+1	; 0x01
    10c0:	08 95       	ret
	}
	else
	{
		ret = p_a4988->reverse_rotate;
    10c2:	fc 01       	movw	r30, r24
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	8e 0f       	add	r24, r30
    10ce:	9f 1f       	adc	r25, r31
    10d0:	fc 01       	movw	r30, r24
    10d2:	e5 59       	subi	r30, 0x95	; 149
    10d4:	fb 4f       	sbci	r31, 0xFB	; 251
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
	}
	return ret;
}
    10d8:	08 95       	ret

000010da <a4988GetSpeed>:
uint8_t a4988GetSpeed(uint8_t ch_)
{
	uint8_t ret = 0;
	
	a4988_t *p_a4988 = &a4988_tbl[ch_];
	ret = p_a4988->h_a4988->speed;
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	fc 01       	movw	r30, r24
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	8e 0f       	add	r24, r30
    10e8:	9f 1f       	adc	r25, r31
    10ea:	fc 01       	movw	r30, r24
    10ec:	e5 59       	subi	r30, 0x95	; 149
    10ee:	fb 4f       	sbci	r31, 0xFB	; 251
    10f0:	03 80       	ldd	r0, Z+3	; 0x03
    10f2:	f4 81       	ldd	r31, Z+4	; 0x04
    10f4:	e0 2d       	mov	r30, r0
	return ret;
}
    10f6:	85 81       	ldd	r24, Z+5	; 0x05
    10f8:	08 95       	ret

000010fa <a4988SetCallBack>:

void a4988SetCallBack(uint8_t ch_, void (*p_func)(void))
{
    10fa:	08 95       	ret

000010fc <a4988Init>:

bool a4988Enable(void);
bool a4988Disable(void);

bool a4988Init(uint8_t ch_)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
	bool ret = false;
	
	
	a4988_t *p_a4988 = &a4988_tbl[ch_];
    1100:	c8 2f       	mov	r28, r24
    1102:	d0 e0       	ldi	r29, 0x00	; 0

	switch(ch_)
    1104:	88 23       	and	r24, r24
    1106:	19 f0       	breq	.+6      	; 0x110e <__stack+0xf>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	e9 f0       	breq	.+58     	; 0x1146 <__stack+0x47>
    110c:	38 c0       	rjmp	.+112    	; 0x117e <__stack+0x7f>
	{
		case _DEF_A4988_0:
		p_a4988->h_a4988				= &h_a4988_1;
    110e:	de 01       	movw	r26, r28
    1110:	aa 0f       	add	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	aa 0f       	add	r26, r26
    1116:	bb 1f       	adc	r27, r27
    1118:	ac 0f       	add	r26, r28
    111a:	bd 1f       	adc	r27, r29
    111c:	a5 59       	subi	r26, 0x95	; 149
    111e:	bb 4f       	sbci	r27, 0xFB	; 251
    1120:	ef e5       	ldi	r30, 0x5F	; 95
    1122:	f4 e0       	ldi	r31, 0x04	; 4
    1124:	14 96       	adiw	r26, 0x04	; 4
    1126:	fc 93       	st	X, r31
    1128:	ee 93       	st	-X, r30
    112a:	13 97       	sbiw	r26, 0x03	; 3
		
		p_a4988->normal_rotate			= _DEF_CCW;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	8c 93       	st	X, r24
    1132:	11 97       	sbiw	r26, 0x01	; 1
		p_a4988->reverse_rotate			= _DEF_CW;
    1134:	12 96       	adiw	r26, 0x02	; 2
    1136:	1c 92       	st	X, r1
		p_a4988->h_a4988->Init.ch		= _DEF_A4988_0;
    1138:	10 82       	st	Z, r1
		p_a4988->h_a4988->Init.timer	= TIM0;
    113a:	11 82       	std	Z+1, r1	; 0x01
		p_a4988->h_a4988->Init.phase	= A4988_FULL_STEP;
    113c:	12 82       	std	Z+2, r1	; 0x02
		p_a4988->h_a4988->enable		= false;
    113e:	13 82       	std	Z+3, r1	; 0x03
		p_a4988->h_a4988->direction		= _NORMAL_ROTATION;
    1140:	84 83       	std	Z+4, r24	; 0x04
		p_a4988->h_a4988->speed			= 0;
    1142:	15 82       	std	Z+5, r1	; 0x05
		
		break;
    1144:	1c c0       	rjmp	.+56     	; 0x117e <__stack+0x7f>
		case _DEF_A4988_1:
		p_a4988->h_a4988				= &h_a4988_2;
    1146:	de 01       	movw	r26, r28
    1148:	aa 0f       	add	r26, r26
    114a:	bb 1f       	adc	r27, r27
    114c:	aa 0f       	add	r26, r26
    114e:	bb 1f       	adc	r27, r27
    1150:	ac 0f       	add	r26, r28
    1152:	bd 1f       	adc	r27, r29
    1154:	a5 59       	subi	r26, 0x95	; 149
    1156:	bb 4f       	sbci	r27, 0xFB	; 251
    1158:	e5 e6       	ldi	r30, 0x65	; 101
    115a:	f4 e0       	ldi	r31, 0x04	; 4
    115c:	14 96       	adiw	r26, 0x04	; 4
    115e:	fc 93       	st	X, r31
    1160:	ee 93       	st	-X, r30
    1162:	13 97       	sbiw	r26, 0x03	; 3
		
		p_a4988->normal_rotate			= _DEF_CCW;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	11 96       	adiw	r26, 0x01	; 1
    1168:	8c 93       	st	X, r24
    116a:	11 97       	sbiw	r26, 0x01	; 1
		p_a4988->reverse_rotate			= _DEF_CW;
    116c:	12 96       	adiw	r26, 0x02	; 2
    116e:	1c 92       	st	X, r1
		p_a4988->h_a4988->Init.ch		= _DEF_A4988_1;
    1170:	80 83       	st	Z, r24
		p_a4988->h_a4988->Init.timer	= TIM2;
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	91 83       	std	Z+1, r25	; 0x01
		p_a4988->h_a4988->Init.phase	= A4988_FULL_STEP;
    1176:	12 82       	std	Z+2, r1	; 0x02
		p_a4988->h_a4988->enable		= false;
    1178:	13 82       	std	Z+3, r1	; 0x03
		p_a4988->h_a4988->direction		= _NORMAL_ROTATION;
    117a:	84 83       	std	Z+4, r24	; 0x04
		p_a4988->h_a4988->speed			= 0;
    117c:	15 82       	std	Z+5, r1	; 0x05
		default:
		break;
	}
	
	
	if (ctcBegin(p_a4988->h_a4988->Init.timer) != true)
    117e:	fe 01       	movw	r30, r28
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ec 0f       	add	r30, r28
    118a:	fd 1f       	adc	r31, r29
    118c:	e5 59       	subi	r30, 0x95	; 149
    118e:	fb 4f       	sbci	r31, 0xFB	; 251
    1190:	03 80       	ldd	r0, Z+3	; 0x03
    1192:	f4 81       	ldd	r31, Z+4	; 0x04
    1194:	e0 2d       	mov	r30, r0
    1196:	81 81       	ldd	r24, Z+1	; 0x01
    1198:	c1 da       	rcall	.-2686   	; 0x71c <ctcBegin>
    119a:	88 23       	and	r24, r24
    119c:	61 f0       	breq	.+24     	; 0x11b6 <__stack+0xb7>
	{
		ret = false;
	}
	else
	{
		p_a4988->is_open = true;
    119e:	ce 01       	movw	r24, r28
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	c8 0f       	add	r28, r24
    11aa:	d9 1f       	adc	r29, r25
    11ac:	c5 59       	subi	r28, 0x95	; 149
    11ae:	db 4f       	sbci	r29, 0xFB	; 251
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	88 83       	st	Y, r24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <__stack+0xb9>
	}
	
	
	if (ctcBegin(p_a4988->h_a4988->Init.timer) != true)
	{
		ret = false;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
		p_a4988->is_open = true;
		ret = true;
	}
	
	return ret;
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <a4988SetDirection>:
}

bool a4988SetDirection(uint8_t ch_, bool dir_)
{
	bool ret = true;
	a4988_t *p_a4988 = &a4988_tbl[ch_];
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t side = 0;
	p_a4988->h_a4988->direction = dir_;
    11c2:	f9 01       	movw	r30, r18
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	e5 59       	subi	r30, 0x95	; 149
    11d2:	fb 4f       	sbci	r31, 0xFB	; 251
    11d4:	03 80       	ldd	r0, Z+3	; 0x03
    11d6:	f4 81       	ldd	r31, Z+4	; 0x04
    11d8:	e0 2d       	mov	r30, r0
    11da:	64 83       	std	Z+4, r22	; 0x04
	
	switch(ch_)
    11dc:	88 23       	and	r24, r24
    11de:	19 f0       	breq	.+6      	; 0x11e6 <a4988SetDirection+0x28>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	19 f0       	breq	.+6      	; 0x11ea <a4988SetDirection+0x2c>
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <a4988SetDirection+0x30>
	{
		case _DEF_A4988_0:
		side = _PIN_GPIO_A4988_LDIR;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <a4988SetDirection+0x32>
		break;
		case _DEF_A4988_1:
		side = _PIN_GPIO_A4988_RDIR;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
		break;
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <a4988SetDirection+0x32>

bool a4988SetDirection(uint8_t ch_, bool dir_)
{
	bool ret = true;
	a4988_t *p_a4988 = &a4988_tbl[ch_];
	uint8_t side = 0;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	
	if (p_a4988->h_a4988->direction)
    11f0:	f9 01       	movw	r30, r18
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e2 0f       	add	r30, r18
    11fc:	f3 1f       	adc	r31, r19
    11fe:	e5 59       	subi	r30, 0x95	; 149
    1200:	fb 4f       	sbci	r31, 0xFB	; 251
    1202:	03 80       	ldd	r0, Z+3	; 0x03
    1204:	f4 81       	ldd	r31, Z+4	; 0x04
    1206:	e0 2d       	mov	r30, r0
    1208:	94 81       	ldd	r25, Z+4	; 0x04
    120a:	99 23       	and	r25, r25
    120c:	69 f0       	breq	.+26     	; 0x1228 <a4988SetDirection+0x6a>
	{
		gpioPinWrite(side, p_a4988->normal_rotate);
    120e:	f9 01       	movw	r30, r18
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	2e 0f       	add	r18, r30
    121a:	3f 1f       	adc	r19, r31
    121c:	f9 01       	movw	r30, r18
    121e:	e5 59       	subi	r30, 0x95	; 149
    1220:	fb 4f       	sbci	r31, 0xFB	; 251
    1222:	61 81       	ldd	r22, Z+1	; 0x01
    1224:	d5 d0       	rcall	.+426    	; 0x13d0 <gpioPinWrite>
    1226:	0c c0       	rjmp	.+24     	; 0x1240 <a4988SetDirection+0x82>
	}
	else
	{
		gpioPinWrite(side, p_a4988->reverse_rotate);
    1228:	f9 01       	movw	r30, r18
    122a:	ee 0f       	add	r30, r30
    122c:	ff 1f       	adc	r31, r31
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	2e 0f       	add	r18, r30
    1234:	3f 1f       	adc	r19, r31
    1236:	f9 01       	movw	r30, r18
    1238:	e5 59       	subi	r30, 0x95	; 149
    123a:	fb 4f       	sbci	r31, 0xFB	; 251
    123c:	62 81       	ldd	r22, Z+2	; 0x02
    123e:	c8 d0       	rcall	.+400    	; 0x13d0 <gpioPinWrite>
	}
	return ret;
}
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	08 95       	ret

00001244 <a4988SetSpeed>:
	}
	return ret;
}

bool a4988SetSpeed(uint8_t ch_, uint8_t speed_)
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
	bool ret = false;

	a4988_t *p_a4988 = &a4988_tbl[ch_];
    1248:	90 e0       	ldi	r25, 0x00	; 0
	
	p_a4988->h_a4988->speed = speed_;
    124a:	ec 01       	movw	r28, r24
    124c:	cc 0f       	add	r28, r28
    124e:	dd 1f       	adc	r29, r29
    1250:	cc 0f       	add	r28, r28
    1252:	dd 1f       	adc	r29, r29
    1254:	8c 0f       	add	r24, r28
    1256:	9d 1f       	adc	r25, r29
    1258:	ec 01       	movw	r28, r24
    125a:	c5 59       	subi	r28, 0x95	; 149
    125c:	db 4f       	sbci	r29, 0xFB	; 251
    125e:	eb 81       	ldd	r30, Y+3	; 0x03
    1260:	fc 81       	ldd	r31, Y+4	; 0x04
    1262:	65 83       	std	Z+5, r22	; 0x05
	
	ctcSetTcnt(p_a4988->h_a4988->Init.timer, 0);
    1264:	eb 81       	ldd	r30, Y+3	; 0x03
    1266:	fc 81       	ldd	r31, Y+4	; 0x04
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	81 81       	ldd	r24, Z+1	; 0x01
    126e:	fa db       	rcall	.-2060   	; 0xa64 <ctcSetTcnt>
	if (p_a4988->h_a4988->Init.timer == TIM0 || p_a4988->h_a4988->Init.timer == TIM2)
    1270:	eb 81       	ldd	r30, Y+3	; 0x03
    1272:	fc 81       	ldd	r31, Y+4	; 0x04
    1274:	81 81       	ldd	r24, Z+1	; 0x01
    1276:	98 2f       	mov	r25, r24
    1278:	9d 7f       	andi	r25, 0xFD	; 253
    127a:	29 f4       	brne	.+10     	; 0x1286 <a4988SetSpeed+0x42>
	{
		ret = ctcSetOcr(p_a4988->h_a4988->Init.timer, p_a4988->h_a4988->speed, _DEF_CH_NONE);	
    127c:	65 81       	ldd	r22, Z+5	; 0x05
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	5e dc       	rcall	.-1860   	; 0xb40 <ctcSetOcr>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <a4988SetSpeed+0x52>
	}
	else if (p_a4988->h_a4988->Init.timer == TIM1 || p_a4988->h_a4988->Init.timer == TIM3)
    1286:	91 30       	cpi	r25, 0x01	; 1
    1288:	29 f4       	brne	.+10     	; 0x1294 <a4988SetSpeed+0x50>
	{
		ret = ctcSetOcr(p_a4988->h_a4988->Init.timer, p_a4988->h_a4988->speed, _DEF_CH_A);	
    128a:	65 81       	ldd	r22, Z+5	; 0x05
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	57 dc       	rcall	.-1874   	; 0xb40 <ctcSetOcr>
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <a4988SetSpeed+0x52>
	return ret;
}

bool a4988SetSpeed(uint8_t ch_, uint8_t speed_)
{
	bool ret = false;
    1294:	80 e0       	ldi	r24, 0x00	; 0
	else if (p_a4988->h_a4988->Init.timer == TIM1 || p_a4988->h_a4988->Init.timer == TIM3)
	{
		ret = ctcSetOcr(p_a4988->h_a4988->Init.timer, p_a4988->h_a4988->speed, _DEF_CH_A);	
	}
	return ret;
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <a4988DriverInit>:
	return ret;
}


bool a4988DriverInit(drivemotor_driver_t *p_driver)
{
    129c:	fc 01       	movw	r30, r24
	p_driver->init			= a4988Init;
    129e:	8e e7       	ldi	r24, 0x7E	; 126
    12a0:	98 e0       	ldi	r25, 0x08	; 8
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	80 83       	st	Z, r24
	p_driver->startMotor	= a4988Start;
    12a6:	8a e7       	ldi	r24, 0x7A	; 122
    12a8:	99 e0       	ldi	r25, 0x09	; 9
    12aa:	93 83       	std	Z+3, r25	; 0x03
    12ac:	82 83       	std	Z+2, r24	; 0x02
	p_driver->stopMotor		= a4988Stop;
    12ae:	85 e9       	ldi	r24, 0x95	; 149
    12b0:	99 e0       	ldi	r25, 0x09	; 9
    12b2:	95 83       	std	Z+5, r25	; 0x05
    12b4:	84 83       	std	Z+4, r24	; 0x04
	p_driver->breakMotor	= a4988Hold;
    12b6:	8b ea       	ldi	r24, 0xAB	; 171
    12b8:	99 e0       	ldi	r25, 0x09	; 9
    12ba:	97 83       	std	Z+7, r25	; 0x07
    12bc:	86 83       	std	Z+6, r24	; 0x06
	p_driver->setSpeed		= a4988SetSpeed;
    12be:	82 e2       	ldi	r24, 0x22	; 34
    12c0:	99 e0       	ldi	r25, 0x09	; 9
    12c2:	91 87       	std	Z+9, r25	; 0x09
    12c4:	80 87       	std	Z+8, r24	; 0x08
	p_driver->getSpeed		= a4988GetSpeed;
    12c6:	8d e6       	ldi	r24, 0x6D	; 109
    12c8:	98 e0       	ldi	r25, 0x08	; 8
    12ca:	93 87       	std	Z+11, r25	; 0x0b
    12cc:	82 87       	std	Z+10, r24	; 0x0a
	p_driver->setDirection	= a4988SetDirection;
    12ce:	8f ed       	ldi	r24, 0xDF	; 223
    12d0:	98 e0       	ldi	r25, 0x08	; 8
    12d2:	95 87       	std	Z+13, r25	; 0x0d
    12d4:	84 87       	std	Z+12, r24	; 0x0c
	p_driver->getDirection	= a4988GetDirection;
    12d6:	85 e4       	ldi	r24, 0x45	; 69
    12d8:	98 e0       	ldi	r25, 0x08	; 8
    12da:	97 87       	std	Z+15, r25	; 0x0f
    12dc:	86 87       	std	Z+14, r24	; 0x0e
	p_driver->setCallBack	= a4988SetCallBack;
    12de:	8d e7       	ldi	r24, 0x7D	; 125
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	91 8b       	std	Z+17, r25	; 0x11
    12e4:	80 8b       	std	Z+16, r24	; 0x10
	return true;
}
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	08 95       	ret

000012ea <a4988Enable>:
}

bool a4988Enable(void)
{
	bool ret = true;
	gpioPinWrite(_PIN_GPIO_A4988_EN, true);
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	70 d0       	rcall	.+224    	; 0x13d0 <gpioPinWrite>
	return ret;
}
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	08 95       	ret

000012f4 <a4988Start>:
	p_driver->setCallBack	= a4988SetCallBack;
	return true;
}

bool a4988Start(uint8_t ch_)
{
    12f4:	cf 93       	push	r28
	bool ret = false;
	a4988_t *p_a4988 = &a4988_tbl[ch_];
	
	if (ctcStart(p_a4988->h_a4988->Init.timer) != true)
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	fc 01       	movw	r30, r24
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	8e 0f       	add	r24, r30
    1304:	9f 1f       	adc	r25, r31
    1306:	fc 01       	movw	r30, r24
    1308:	e5 59       	subi	r30, 0x95	; 149
    130a:	fb 4f       	sbci	r31, 0xFB	; 251
    130c:	03 80       	ldd	r0, Z+3	; 0x03
    130e:	f4 81       	ldd	r31, Z+4	; 0x04
    1310:	e0 2d       	mov	r30, r0
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	05 db       	rcall	.-2550   	; 0x920 <ctcStart>
    1316:	c8 2f       	mov	r28, r24
	}
	else
	{
		ret = true;
	}
	a4988Enable();
    1318:	e8 df       	rcall	.-48     	; 0x12ea <a4988Enable>
    131a:	8c 2f       	mov	r24, r28
	
	return ret;
}
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <a4988Disable>:
    1320:	60 e0       	ldi	r22, 0x00	; 0
}

bool a4988Disable()
{
	bool ret = true;
	gpioPinWrite(_PIN_GPIO_A4988_EN, false);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	55 d0       	rcall	.+170    	; 0x13d0 <gpioPinWrite>
	return ret;
}
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	08 95       	ret

0000132a <a4988Stop>:
	return ret;
}


bool a4988Stop(uint8_t ch_)
{
    132a:	cf 93       	push	r28
	bool ret = false;
	a4988_t *p_a4988 = &a4988_tbl[ch_];
	
	if (ctcStop(p_a4988->h_a4988->Init.timer) != true)
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	8e 0f       	add	r24, r30
    133a:	9f 1f       	adc	r25, r31
    133c:	fc 01       	movw	r30, r24
    133e:	e5 59       	subi	r30, 0x95	; 149
    1340:	fb 4f       	sbci	r31, 0xFB	; 251
    1342:	03 80       	ldd	r0, Z+3	; 0x03
    1344:	f4 81       	ldd	r31, Z+4	; 0x04
    1346:	e0 2d       	mov	r30, r0
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	3b db       	rcall	.-2442   	; 0x9c2 <ctcStop>
    134c:	c8 2f       	mov	r28, r24
	}
	else
	{
		ret = true;
	}
	a4988Disable();
    134e:	e8 df       	rcall	.-48     	; 0x1320 <a4988Disable>
    1350:	8c 2f       	mov	r24, r28
	return ret;
}
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <a4988Hold>:
    1356:	e9 df       	rcall	.-46     	; 0x132a <a4988Stop>

bool a4988Hold(uint8_t ch_)
{
	bool ret = a4988Stop(ch_);
	ret = a4988Enable();
    1358:	c8 cf       	rjmp	.-112    	; 0x12ea <a4988Enable>
    135a:	08 95       	ret

0000135c <gpioPinMode>:
	
	return ret;
}
    135c:	cf 93       	push	r28
	}
	return ret;
}

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
    135e:	df 93       	push	r29
    1360:	00 d0       	rcall	.+0      	; 0x1362 <gpioPinMode+0x6>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	19 82       	std	Y+1, r1	; 0x01
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
    136a:	86 30       	cpi	r24, 0x06	; 6
    136c:	b8 f4       	brcc	.+46     	; 0x139c <gpioPinMode+0x40>
	
	switch(mode)
    136e:	61 30       	cpi	r22, 0x01	; 1
    1370:	11 f4       	brne	.+4      	; 0x1376 <gpioPinMode+0x1a>
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		break;
		
		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9a 83       	std	Y+2, r25	; 0x02
		break;
		default:
		break;
	}
	
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	e0 50       	subi	r30, 0x00	; 0
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
    138e:	be 01       	movw	r22, r28
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	1f d3       	rcall	.+1598   	; 0x19d6 <GPIO_Init>
	ret = true;
	
	return ret;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	01 c0       	rjmp	.+2      	; 0x139e <gpioPinMode+0x42>
{
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
    139c:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
	ret = true;
	
	return ret;
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <gpioInit>:
};

bool gpioPinMode(uint8_t ch, uint8_t mode);

bool gpioInit(void)
{
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	11 e0       	ldi	r17, 0x01	; 1
    13b2:	c0 e0       	ldi	r28, 0x00	; 0
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
	{
		gpioPinMode(i, gpio_tbl[i].mode);
    13b4:	f8 01       	movw	r30, r16
    13b6:	62 81       	ldd	r22, Z+2	; 0x02
    13b8:	8c 2f       	mov	r24, r28
    13ba:	d0 df       	rcall	.-96     	; 0x135c <gpioPinMode>
    13bc:	0b 5f       	subi	r16, 0xFB	; 251
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	cf 5f       	subi	r28, 0xFF	; 255

bool gpioInit(void)
{
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
    13c2:	c6 30       	cpi	r28, 0x06	; 6
    13c4:	b9 f7       	brne	.-18     	; 0x13b4 <gpioInit+0xc>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
	}
	return ret;
}
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <gpioPinWrite>:
	return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
	if (ch < 0 || ch >= GPIO_MAX_CH) return;
    13d0:	86 30       	cpi	r24, 0x06	; 6
    13d2:	00 f5       	brcc	.+64     	; 0x1414 <gpioPinWrite+0x44>
	if (value)
    13d4:	66 23       	and	r22, r22
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <gpioPinWrite+0x28>
	{
		GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	8e 0f       	add	r24, r30
    13e6:	9f 1f       	adc	r25, r31
    13e8:	fc 01       	movw	r30, r24
    13ea:	e0 50       	subi	r30, 0x00	; 0
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	43 81       	ldd	r20, Z+3	; 0x03
    13f0:	61 81       	ldd	r22, Z+1	; 0x01
    13f2:	80 81       	ld	r24, Z
    13f4:	2b c3       	rjmp	.+1622   	; 0x1a4c <GPIO_WritePin>
    13f6:	08 95       	ret
	}
	else
	{
		GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e8 0f       	add	r30, r24
    1406:	f9 1f       	adc	r31, r25
    1408:	e0 50       	subi	r30, 0x00	; 0
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	44 81       	ldd	r20, Z+4	; 0x04
    140e:	61 81       	ldd	r22, Z+1	; 0x01
    1410:	80 81       	ld	r24, Z
    1412:	1c c3       	rjmp	.+1592   	; 0x1a4c <GPIO_WritePin>
    1414:	08 95       	ret

00001416 <pwmInit>:

pwm_t pwm_tbl[PWM_MAX_CH];


bool pwmInit(void)
{
    1416:	e5 e7       	ldi	r30, 0x75	; 117
    1418:	f4 e0       	ldi	r31, 0x04	; 4
    141a:	89 e9       	ldi	r24, 0x99	; 153
    141c:	94 e0       	ldi	r25, 0x04	; 4
	bool ret = true;
	
	for (int i = 0; i < PWM_MAX_CH; i++)
	{
		pwm_tbl[i].is_open		= false;
    141e:	10 82       	st	Z, r1
		pwm_tbl[i].h_tim8		= NULL;
    1420:	12 82       	std	Z+2, r1	; 0x02
    1422:	11 82       	std	Z+1, r1	; 0x01
		pwm_tbl[i].h_tim16		= NULL;
    1424:	14 82       	std	Z+4, r1	; 0x04
    1426:	13 82       	std	Z+3, r1	; 0x03
		pwm_tbl[i].h_tim8_pwm	= NULL;
    1428:	16 82       	std	Z+6, r1	; 0x06
    142a:	15 82       	std	Z+5, r1	; 0x05
		pwm_tbl[i].h_tim16_pwm	= NULL;
    142c:	10 86       	std	Z+8, r1	; 0x08
    142e:	17 82       	std	Z+7, r1	; 0x07
    1430:	39 96       	adiw	r30, 0x09	; 9

bool pwmInit(void)
{
	bool ret = true;
	
	for (int i = 0; i < PWM_MAX_CH; i++)
    1432:	e8 17       	cp	r30, r24
    1434:	f9 07       	cpc	r31, r25
    1436:	99 f7       	brne	.-26     	; 0x141e <pwmInit+0x8>
		pwm_tbl[i].h_tim8_pwm	= NULL;
		pwm_tbl[i].h_tim16_pwm	= NULL;
	}
	
	return ret;
}
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	08 95       	ret

0000143c <hold>:
	motorStop();
}

void hold(uint8_t *params)
{
	motorBreak();
    143c:	0c cc       	rjmp	.-2024   	; 0xc56 <motorBreak>
    143e:	08 95       	ret

00001440 <stop>:

#ifdef _USE_HW_DRIVEMOTOR

void stop(uint8_t *params)
{
	motorBreak();
    1440:	0a dc       	rcall	.-2028   	; 0xc56 <motorBreak>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1442:	2f ef       	ldi	r18, 0xFF	; 255
    1444:	81 ee       	ldi	r24, 0xE1	; 225
    1446:	94 e0       	ldi	r25, 0x04	; 4
    1448:	21 50       	subi	r18, 0x01	; 1
    144a:	80 40       	sbci	r24, 0x00	; 0
    144c:	90 40       	sbci	r25, 0x00	; 0
    144e:	e1 f7       	brne	.-8      	; 0x1448 <stop+0x8>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <stop+0x12>
	_delay_ms(100);
	motorStop();
    1452:	00 00       	nop
    1454:	f1 cb       	rjmp	.-2078   	; 0xc38 <motorStop>
    1456:	08 95       	ret

00001458 <advance>:
	motorBreak();
}

void advance(uint8_t *params)
{
	motorSetSpeed(params[0]);
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	0b dc       	rcall	.-2026   	; 0xc74 <motorSetSpeed>
	motorAdvance();
    145e:	c4 cc       	rjmp	.-1656   	; 0xde8 <motorAdvance>
    1460:	08 95       	ret

00001462 <reverse>:
    1462:	fc 01       	movw	r30, r24
}

void reverse(uint8_t *params)
{
	motorSetSpeed(params[0]);
    1464:	80 81       	ld	r24, Z
    1466:	06 dc       	rcall	.-2036   	; 0xc74 <motorSetSpeed>
	motorGoBackward();
    1468:	c3 cc       	rjmp	.-1658   	; 0xdf0 <motorGoBackward>
    146a:	08 95       	ret

0000146c <turn>:
    146c:	cf 93       	push	r28
}

void turn(uint8_t *params)
{
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
	motorSetSpeed(params[1]);
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	ff db       	rcall	.-2050   	; 0xc74 <motorSetSpeed>
	motorSpin(params[0]);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	98 81       	ld	r25, Y
    147a:	91 11       	cpse	r25, r1
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <turn+0x14>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	bb dc       	rcall	.-1674   	; 0xdf8 <motorSpin>
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <steering>:

void steering(uint8_t *params)
{
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
	motorSetSpeed(params[1]);
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	f1 db       	rcall	.-2078   	; 0xc74 <motorSetSpeed>
	motorSteering(params[0]);
    1492:	88 81       	ld	r24, Y
    1494:	ba dc       	rcall	.-1676   	; 0xe0a <motorSteering>
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <rosServerInit>:



void rosServerInit(void)
{
	rosInit();
    149c:	3b d0       	rcall	.+118    	; 0x1514 <rosInit>
	rosLoadDriver(&ros_handle);
    149e:	81 eb       	ldi	r24, 0xB1	; 177
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	3a d0       	rcall	.+116    	; 0x1518 <rosLoadDriver>
	rosOpen(&ros_handle, _DEF_ROS0, 38400);
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	36 e9       	ldi	r19, 0x96	; 150
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	81 eb       	ldi	r24, 0xB1	; 177
    14b0:	94 e0       	ldi	r25, 0x04	; 4
    14b2:	37 d0       	rcall	.+110    	; 0x1522 <rosOpen>
	rosAddService(&ros_handle, stop);
    14b4:	60 e2       	ldi	r22, 0x20	; 32
    14b6:	7a e0       	ldi	r23, 0x0A	; 10
    14b8:	81 eb       	ldi	r24, 0xB1	; 177
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	14 d1       	rcall	.+552    	; 0x16e6 <rosAddService>
	rosAddService(&ros_handle, hold);
    14be:	6e e1       	ldi	r22, 0x1E	; 30
    14c0:	7a e0       	ldi	r23, 0x0A	; 10
    14c2:	81 eb       	ldi	r24, 0xB1	; 177
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0f d1       	rcall	.+542    	; 0x16e6 <rosAddService>
	rosAddService(&ros_handle, advance);
    14c8:	6c e2       	ldi	r22, 0x2C	; 44
    14ca:	7a e0       	ldi	r23, 0x0A	; 10
    14cc:	81 eb       	ldi	r24, 0xB1	; 177
    14ce:	94 e0       	ldi	r25, 0x04	; 4
    14d0:	0a d1       	rcall	.+532    	; 0x16e6 <rosAddService>
	rosAddService(&ros_handle, reverse);
    14d2:	61 e3       	ldi	r22, 0x31	; 49
    14d4:	7a e0       	ldi	r23, 0x0A	; 10
    14d6:	81 eb       	ldi	r24, 0xB1	; 177
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	05 d1       	rcall	.+522    	; 0x16e6 <rosAddService>
	rosAddService(&ros_handle, turn);
    14dc:	66 e3       	ldi	r22, 0x36	; 54
    14de:	7a e0       	ldi	r23, 0x0A	; 10
    14e0:	81 eb       	ldi	r24, 0xB1	; 177
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	00 d1       	rcall	.+512    	; 0x16e6 <rosAddService>
	rosAddService(&ros_handle, steering);
    14e6:	64 e4       	ldi	r22, 0x44	; 68
    14e8:	7a e0       	ldi	r23, 0x0A	; 10
    14ea:	81 eb       	ldi	r24, 0xB1	; 177
    14ec:	94 e0       	ldi	r25, 0x04	; 4
    14ee:	fb c0       	rjmp	.+502    	; 0x16e6 <rosAddService>
    14f0:	08 95       	ret

000014f2 <rosServerRun>:
    14f2:	81 eb       	ldi	r24, 0xB1	; 177
void rosServerRun(void)
{
	//char *str = "hello";
	//rosSendInst(&ros_handle, 0x00, 0x00, (uint8_t*)str, 6);
	uint8_t service_id;
	if (rosReceivePacket(&ros_handle))
    14f4:	94 e0       	ldi	r25, 0x04	; 4
    14f6:	42 d0       	rcall	.+132    	; 0x157c <rosReceivePacket>
    14f8:	88 23       	and	r24, r24
    14fa:	59 f0       	breq	.+22     	; 0x1512 <rosServerRun+0x20>
	{
		service_id = ros_handle.packet.inst;
    14fc:	60 91 bf 04 	lds	r22, 0x04BF	; 0x8004bf <ros_handle+0xe>
		if ((service_id < 0 || service_id >= ROS_MAX_SERVICE))
    1500:	66 23       	and	r22, r22
    1502:	3c f0       	brlt	.+14     	; 0x1512 <rosServerRun+0x20>
		{
			return;
		}
		//ros_handle.driver.write(ros_handle.ch, (uint8_t*)&(ros_handle.packet.msgs[0]), 1);
		rosCallService(&ros_handle, service_id, &ros_handle.packet.msgs[0]);
    1504:	40 91 c0 04 	lds	r20, 0x04C0	; 0x8004c0 <ros_handle+0xf>
    1508:	50 91 c1 04 	lds	r21, 0x04C1	; 0x8004c1 <ros_handle+0x10>
    150c:	81 eb       	ldi	r24, 0xB1	; 177
    150e:	94 e0       	ldi	r25, 0x04	; 4
    1510:	fc c0       	rjmp	.+504    	; 0x170a <rosCallService>
    1512:	08 95       	ret

00001514 <rosInit>:
	p_ros->packet_buf[index++] = 255 - (uint8_t)(checksum % 256);
	
	p_ros->driver.write(p_ros->ch, p_ros->packet_buf, index);
	
	return ret;
}
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	08 95       	ret

00001518 <rosLoadDriver>:
    1518:	8e 5e       	subi	r24, 0xEE	; 238
    151a:	9d 4f       	sbci	r25, 0xFD	; 253
    151c:	2f d1       	rcall	.+606    	; 0x177c <rosUartDriver>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	08 95       	ret

00001522 <rosOpen>:
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	96 2f       	mov	r25, r22
    152a:	fe 01       	movw	r30, r28
    152c:	ee 5e       	subi	r30, 0xEE	; 238
    152e:	fd 4f       	sbci	r31, 0xFD	; 253
    1530:	80 81       	ld	r24, Z
    1532:	88 23       	and	r24, r24
    1534:	01 f1       	breq	.+64     	; 0x1576 <rosOpen+0x54>
    1536:	ba 01       	movw	r22, r20
    1538:	a9 01       	movw	r20, r18
    153a:	89 2f       	mov	r24, r25
    153c:	99 83       	std	Y+1, r25	; 0x01
    153e:	4a 83       	std	Y+2, r20	; 0x02
    1540:	5b 83       	std	Y+3, r21	; 0x03
    1542:	6c 83       	std	Y+4, r22	; 0x04
    1544:	7d 83       	std	Y+5, r23	; 0x05
    1546:	1f 82       	std	Y+7, r1	; 0x07
    1548:	1e 82       	std	Y+6, r1	; 0x06
    154a:	18 8a       	std	Y+16, r1	; 0x10
    154c:	1f 86       	std	Y+15, r1	; 0x0f
    154e:	31 96       	adiw	r30, 0x01	; 1
    1550:	01 90       	ld	r0, Z+
    1552:	f0 81       	ld	r31, Z
    1554:	e0 2d       	mov	r30, r0
    1556:	09 95       	icall
    1558:	88 83       	st	Y, r24
    155a:	fe 01       	movw	r30, r28
    155c:	e1 5e       	subi	r30, 0xE1	; 225
    155e:	fd 4f       	sbci	r31, 0xFD	; 253
    1560:	9e 01       	movw	r18, r28
    1562:	21 5e       	subi	r18, 0xE1	; 225
    1564:	3c 4f       	sbci	r19, 0xFC	; 252
    1566:	11 92       	st	Z+, r1
    1568:	11 92       	st	Z+, r1
    156a:	e2 17       	cp	r30, r18
    156c:	f3 07       	cpc	r31, r19
    156e:	d9 f7       	brne	.-10     	; 0x1566 <rosOpen+0x44>
    1570:	c1 5e       	subi	r28, 0xE1	; 225
    1572:	dc 4f       	sbci	r29, 0xFC	; 252
    1574:	18 82       	st	Y, r1
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <rosReceivePacket>:


bool rosReceivePacket(ros_t *p_ros)
{
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
	bool ret = false;
	uint8_t rx_data;
	uint8_t index;
	uint32_t buf;
	
	if (p_ros->is_open != true)
    1582:	fc 01       	movw	r30, r24
    1584:	10 81       	ld	r17, Z
    1586:	11 23       	and	r17, r17
    1588:	09 f4       	brne	.+2      	; 0x158c <rosReceivePacket+0x10>
    158a:	a8 c0       	rjmp	.+336    	; 0x16dc <rosReceivePacket+0x160>
    158c:	ec 01       	movw	r28, r24
	{
		return false;
	}
	
	if (p_ros->driver.available(p_ros->ch) > 0)
    158e:	e9 5e       	subi	r30, 0xE9	; 233
    1590:	fd 4f       	sbci	r31, 0xFD	; 253
    1592:	01 90       	ld	r0, Z+
    1594:	f0 81       	ld	r31, Z
    1596:	e0 2d       	mov	r30, r0
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	09 95       	icall
    159c:	67 2b       	or	r22, r23
    159e:	68 2b       	or	r22, r24
    15a0:	69 2b       	or	r22, r25
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <rosReceivePacket+0x2a>
    15a4:	96 c0       	rjmp	.+300    	; 0x16d2 <rosReceivePacket+0x156>
	{
		//rx_data = p_ros->driver.available(p_ros->ch);
		//p_ros->driver.write(p_ros->ch, &rx_data, 1);
		rx_data = p_ros->driver.read(p_ros->ch);
    15a6:	fe 01       	movw	r30, r28
    15a8:	e5 5e       	subi	r30, 0xE5	; 229
    15aa:	fd 4f       	sbci	r31, 0xFD	; 253
    15ac:	01 90       	ld	r0, Z+
    15ae:	f0 81       	ld	r31, Z
    15b0:	e0 2d       	mov	r30, r0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	09 95       	icall
	else
	{
		return false;
	}

	switch(p_ros->state)
    15b6:	ee 81       	ldd	r30, Y+6	; 0x06
    15b8:	4e 2f       	mov	r20, r30
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	49 30       	cpi	r20, 0x09	; 9
    15be:	51 05       	cpc	r21, r1
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <rosReceivePacket+0x48>
    15c2:	7f c0       	rjmp	.+254    	; 0x16c2 <rosReceivePacket+0x146>
    15c4:	fa 01       	movw	r30, r20
    15c6:	ea 5b       	subi	r30, 0xBA	; 186
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__tablejump2__>
	{
		case ROS_STATE_SYNC1:
			if (rx_data == 0xFF)
    15ce:	8f 3f       	cpi	r24, 0xFF	; 255
    15d0:	21 f4       	brne	.+8      	; 0x15da <rosReceivePacket+0x5e>
			{
				p_ros->packet_buf[ROS_PKT_SYNC1] = rx_data;
    15d2:	8a 8b       	std	Y+18, r24	; 0x12
				p_ros->state = ROS_STATE_SYNC2;	
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8e 83       	std	Y+6, r24	; 0x06
    15d8:	80 c0       	rjmp	.+256    	; 0x16da <rosReceivePacket+0x15e>
			}
			else
			{
				p_ros->state = ROS_STATE_SYNC1;	
    15da:	1e 82       	std	Y+6, r1	; 0x06
    15dc:	7e c0       	rjmp	.+252    	; 0x16da <rosReceivePacket+0x15e>
			}
			break;
		case ROS_STATE_SYNC2:
			if (rx_data == 0xFF)
    15de:	8f 3f       	cpi	r24, 0xFF	; 255
    15e0:	21 f4       	brne	.+8      	; 0x15ea <rosReceivePacket+0x6e>
			{
				p_ros->packet_buf[ROS_PKT_SYNC2] = rx_data;
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
				p_ros->state = ROS_STATE_LEN1;
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	8e 83       	std	Y+6, r24	; 0x06
    15e8:	78 c0       	rjmp	.+240    	; 0x16da <rosReceivePacket+0x15e>
			}
			else
			{
				p_ros->state = ROS_STATE_SYNC1;
    15ea:	1e 82       	std	Y+6, r1	; 0x06
    15ec:	76 c0       	rjmp	.+236    	; 0x16da <rosReceivePacket+0x15e>
			}
			break;
		case ROS_STATE_LEN1:
			p_ros->packet_buf[ROS_PKT_LEN1] = rx_data;
    15ee:	8c 8b       	std	Y+20, r24	; 0x14
			p_ros->state = ROS_STATE_LEN2;
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	8e 83       	std	Y+6, r24	; 0x06
			break;
    15f4:	72 c0       	rjmp	.+228    	; 0x16da <rosReceivePacket+0x15e>
		case ROS_STATE_LEN2:
			p_ros->packet_buf[ROS_PKT_LEN2] = rx_data;
    15f6:	8d 8b       	std	Y+21, r24	; 0x15
			p_ros->state = ROS_STATE_LENCHECK;
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	8e 83       	std	Y+6, r24	; 0x06
			break;
    15fc:	6e c0       	rjmp	.+220    	; 0x16da <rosReceivePacket+0x15e>
		case ROS_STATE_LENCHECK:
			p_ros->packet_buf[ROS_STATE_LENCHECK] = rx_data;
    15fe:	8e 8b       	std	Y+22, r24	; 0x16
			
			buf = p_ros->packet_buf[ROS_PKT_LEN1] + p_ros->packet_buf[ROS_PKT_LEN2];
    1600:	2c 89       	ldd	r18, Y+20	; 0x14
			p_ros->packet.msg_len_checksum = 255 - (uint8_t)(buf % 256);
    1602:	9d 89       	ldd	r25, Y+21	; 0x15
    1604:	92 0f       	add	r25, r18
    1606:	90 95       	com	r25
    1608:	9c 87       	std	Y+12, r25	; 0x0c
			
			if (p_ros->packet.msg_len_checksum == p_ros->packet_buf[ROS_PKT_LENCHECK])
    160a:	89 13       	cpse	r24, r25
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <rosReceivePacket+0x98>
			{
				p_ros->state = ROS_STATE_ID1;
    160e:	85 e0       	ldi	r24, 0x05	; 5
    1610:	8e 83       	std	Y+6, r24	; 0x06
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <rosReceivePacket+0x9a>
			}
			else
			{
				p_ros->state = ROS_STATE_SYNC1;
    1614:	1e 82       	std	Y+6, r1	; 0x06
			}
			p_ros->packet.msg_len =	(p_ros->packet_buf[ROS_PKT_LEN1] >> 0) & 0xFF;
    1616:	82 2f       	mov	r24, r18
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9b 87       	std	Y+11, r25	; 0x0b
    161c:	8a 87       	std	Y+10, r24	; 0x0a
			p_ros->packet.msg_len |= (p_ros->packet_buf[ROS_PKT_LEN2] >> 8) & 0xFF;
			
			break;
    161e:	5d c0       	rjmp	.+186    	; 0x16da <rosReceivePacket+0x15e>
		case ROS_STATE_ID1:
			p_ros->packet_buf[ROS_STATE_ID1] = rx_data;
    1620:	8f 8b       	std	Y+23, r24	; 0x17
			p_ros->state = ROS_STATE_ID2;
    1622:	86 e0       	ldi	r24, 0x06	; 6
    1624:	8e 83       	std	Y+6, r24	; 0x06
			break;
    1626:	59 c0       	rjmp	.+178    	; 0x16da <rosReceivePacket+0x15e>
		case ROS_STATE_ID2:
			p_ros->packet_buf[ROS_STATE_ID2] = rx_data;
    1628:	88 8f       	std	Y+24, r24	; 0x18
			p_ros->index = 7;
    162a:	87 e0       	ldi	r24, 0x07	; 7
    162c:	8f 83       	std	Y+7, r24	; 0x07
			p_ros->packet.msgs = &p_ros->packet_buf[7];
    162e:	ce 01       	movw	r24, r28
    1630:	49 96       	adiw	r24, 0x19	; 25
    1632:	98 8b       	std	Y+16, r25	; 0x10
    1634:	8f 87       	std	Y+15, r24	; 0x0f
			if (p_ros->packet.msg_len > 0)
    1636:	8a 85       	ldd	r24, Y+10	; 0x0a
    1638:	9b 85       	ldd	r25, Y+11	; 0x0b
    163a:	89 2b       	or	r24, r25
    163c:	19 f0       	breq	.+6      	; 0x1644 <rosReceivePacket+0xc8>
			{
				p_ros->state = ROS_STATE_MSGS;
    163e:	87 e0       	ldi	r24, 0x07	; 7
    1640:	8e 83       	std	Y+6, r24	; 0x06
    1642:	4b c0       	rjmp	.+150    	; 0x16da <rosReceivePacket+0x15e>
			}
			else
			{
				p_ros->state = ROS_STATE_SYNC1;
    1644:	1e 82       	std	Y+6, r1	; 0x06
    1646:	40 c0       	rjmp	.+128    	; 0x16c8 <rosReceivePacket+0x14c>
				ret = true;
			}
			break;
		case ROS_STATE_MSGS:
			index = p_ros->index;
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
			p_ros->index++;
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	92 0f       	add	r25, r18
    164e:	9f 83       	std	Y+7, r25	; 0x07
			p_ros->packet_buf[index] = rx_data;
    1650:	fe 01       	movw	r30, r28
    1652:	e2 0f       	add	r30, r18
    1654:	f1 1d       	adc	r31, r1
    1656:	82 8b       	std	Z+18, r24	; 0x12
			
			if (p_ros->index >= p_ros->packet.msg_len + 7)
    1658:	89 2f       	mov	r24, r25
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	2a 85       	ldd	r18, Y+10	; 0x0a
    165e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1660:	29 5f       	subi	r18, 0xF9	; 249
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	82 17       	cp	r24, r18
    1666:	93 07       	cpc	r25, r19
    1668:	c0 f1       	brcs	.+112    	; 0x16da <rosReceivePacket+0x15e>
			{
				p_ros->state = ROS_STATE_CS;
    166a:	88 e0       	ldi	r24, 0x08	; 8
    166c:	8e 83       	std	Y+6, r24	; 0x06
    166e:	35 c0       	rjmp	.+106    	; 0x16da <rosReceivePacket+0x15e>
				//p_ros->driver.write(p_ros->ch, p_ros->packet_buf, p_ros->packet.msg_len + 7);
			}
			break;
		case ROS_STATE_CS:
			index = p_ros->index;
			p_ros->packet_buf[index] = rx_data;
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	fe 01       	movw	r30, r28
    1674:	e9 0f       	add	r30, r25
    1676:	f1 1d       	adc	r31, r1
    1678:	82 8b       	std	Z+18, r24	; 0x12
			buf = 0;
			for (int i = 0; i < p_ros->packet.msg_len; i++)
    167a:	2a 85       	ldd	r18, Y+10	; 0x0a
    167c:	3b 85       	ldd	r19, Y+11	; 0x0b
    167e:	21 15       	cp	r18, r1
    1680:	31 05       	cpc	r19, r1
    1682:	91 f0       	breq	.+36     	; 0x16a8 <rosReceivePacket+0x12c>
    1684:	fe 01       	movw	r30, r28
    1686:	79 96       	adiw	r30, 0x19	; 25
    1688:	27 5e       	subi	r18, 0xE7	; 231
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	2c 0f       	add	r18, r28
    168e:	3d 1f       	adc	r19, r29
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	ba 01       	movw	r22, r20
			{
				buf += p_ros->packet_buf[7 + i];
    1696:	91 91       	ld	r25, Z+
    1698:	49 0f       	add	r20, r25
    169a:	51 1d       	adc	r21, r1
    169c:	61 1d       	adc	r22, r1
    169e:	71 1d       	adc	r23, r1
			break;
		case ROS_STATE_CS:
			index = p_ros->index;
			p_ros->packet_buf[index] = rx_data;
			buf = 0;
			for (int i = 0; i < p_ros->packet.msg_len; i++)
    16a0:	e2 17       	cp	r30, r18
    16a2:	f3 07       	cpc	r31, r19
    16a4:	c1 f7       	brne	.-16     	; 0x1696 <rosReceivePacket+0x11a>
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <rosReceivePacket+0x132>
			}
			break;
		case ROS_STATE_CS:
			index = p_ros->index;
			p_ros->packet_buf[index] = rx_data;
			buf = 0;
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	ba 01       	movw	r22, r20
			for (int i = 0; i < p_ros->packet.msg_len; i++)
			{
				buf += p_ros->packet_buf[7 + i];
			}
			p_ros->packet.checksum = 255 - (uint8_t)(buf % 256);
    16ae:	40 95       	com	r20
    16b0:	49 8b       	std	Y+17, r20	; 0x11
			//p_ros->driver.write(p_ros->ch, (uint8_t *)&(p_ros->packet.checksum), 1);
			if (p_ros->packet_buf[index] == p_ros->packet.checksum)
    16b2:	84 13       	cpse	r24, r20
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <rosReceivePacket+0x140>
			{
				ret = true;
				p_ros->state = ROS_STATE_SYNC1;
    16b6:	1e 82       	std	Y+6, r1	; 0x06
			}
			p_ros->packet.checksum = 255 - (uint8_t)(buf % 256);
			//p_ros->driver.write(p_ros->ch, (uint8_t *)&(p_ros->packet.checksum), 1);
			if (p_ros->packet_buf[index] == p_ros->packet.checksum)
			{
				ret = true;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <rosReceivePacket+0x142>
}


bool rosReceivePacket(ros_t *p_ros)
{
	bool ret = false;
    16bc:	80 e0       	ldi	r24, 0x00	; 0
			{
				ret = true;
				p_ros->state = ROS_STATE_SYNC1;
			}
			
			p_ros->index = 0;
    16be:	1f 82       	std	Y+7, r1	; 0x07
		break;
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <rosReceivePacket+0x148>
}


bool rosReceivePacket(ros_t *p_ros)
{
	bool ret = false;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
			p_ros->index = 0;
		break;
		default:
			break;
	}
	if (ret == true)
    16c4:	88 23       	and	r24, r24
    16c6:	39 f0       	breq	.+14     	; 0x16d6 <rosReceivePacket+0x15a>
	{
		p_ros->packet.id = p_ros->packet_buf[ROS_PKT_ID2];
    16c8:	88 8d       	ldd	r24, Y+24	; 0x18
    16ca:	8d 87       	std	Y+13, r24	; 0x0d
		p_ros->packet.inst = p_ros->packet_buf[ROS_PKT_ID1];
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	8e 87       	std	Y+14, r24	; 0x0e
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <rosReceivePacket+0x160>
		rx_data = p_ros->driver.read(p_ros->ch);
		//p_ros->driver.write(p_ros->ch, &rx_data, 1);
	}
	else
	{
		return false;
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <rosReceivePacket+0x160>
	{
		p_ros->packet.id = p_ros->packet_buf[ROS_PKT_ID2];
		p_ros->packet.inst = p_ros->packet_buf[ROS_PKT_ID1];
	}
	
	return ret;
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <rosReceivePacket+0x160>
    16da:	10 e0       	ldi	r17, 0x00	; 0
}
    16dc:	81 2f       	mov	r24, r17
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	08 95       	ret

000016e6 <rosAddService>:


void rosAddService(ros_t *p_ros, void (*func)(uint8_t *params))
{
    16e6:	9c 01       	movw	r18, r24
	p_ros->func[p_ros->service_index] = func;
    16e8:	dc 01       	movw	r26, r24
    16ea:	a1 5e       	subi	r26, 0xE1	; 225
    16ec:	bc 4f       	sbci	r27, 0xFC	; 252
    16ee:	9c 91       	ld	r25, X
    16f0:	e9 2f       	mov	r30, r25
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	e2 0f       	add	r30, r18
    16fa:	f3 1f       	adc	r31, r19
    16fc:	e1 5e       	subi	r30, 0xE1	; 225
    16fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1700:	71 83       	std	Z+1, r23	; 0x01
    1702:	60 83       	st	Z, r22
	p_ros->service_index++;
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	9c 93       	st	X, r25
    1708:	08 95       	ret

0000170a <rosCallService>:
}

void rosCallService(ros_t *p_ros, uint8_t service_ch_, uint8_t *params_)
{
	if (service_ch_ < 0 || service_ch_ >= ROS_MAX_SERVICE)
    170a:	66 23       	and	r22, r22
    170c:	6c f0       	brlt	.+26     	; 0x1728 <rosCallService+0x1e>
    170e:	fc 01       	movw	r30, r24
	{
		return;
	}
	
	p_ros->func[service_ch_](params_);
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	e6 0f       	add	r30, r22
    1718:	f7 1f       	adc	r31, r23
    171a:	e1 5e       	subi	r30, 0xE1	; 225
    171c:	fd 4f       	sbci	r31, 0xFD	; 253
    171e:	01 90       	ld	r0, Z+
    1720:	f0 81       	ld	r31, Z
    1722:	e0 2d       	mov	r30, r0
    1724:	ca 01       	movw	r24, r20
    1726:	09 95       	icall
    1728:	08 95       	ret

0000172a <close>:

bool close(uint8_t ros_ch_)
{
	bool ret = true;
	return ret;
}
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	08 95       	ret

0000172e <open>:


bool open(uint8_t ros_ch_, uint32_t baud_)
{
	bool ret = false;
	switch(ros_ch_)
    172e:	81 11       	cpse	r24, r1
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <open+0xa>
	{
		case _DEF_ROS0:
		ret = uartOpen(ros_ch_tbl[ros_ch_], baud_);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	42 c0       	rjmp	.+132    	; 0x17ba <uartOpen>
		break;
    1736:	08 95       	ret
}


bool open(uint8_t ros_ch_, uint32_t baud_)
{
	bool ret = false;
    1738:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}
	
	return ret;
}
    173a:	08 95       	ret

0000173c <available>:
}

uint32_t available(uint8_t ros_ch_)
{
	uint32_t ret = 0;
	switch(ros_ch_)
    173c:	81 11       	cpse	r24, r1
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <available+0xa>
	{
		case _DEF_ROS0:
		ret = uartAvailable(ros_ch_tbl[ros_ch_]);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	98 c0       	rjmp	.+304    	; 0x1874 <uartAvailable>
		break;
    1744:	08 95       	ret
	return ret;
}

uint32_t available(uint8_t ros_ch_)
{
	uint32_t ret = 0;
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	cb 01       	movw	r24, r22
		break;
		default:
		break;
	}
	return ret;
}
    174c:	08 95       	ret

0000174e <write>:

uint32_t write(uint8_t ros_ch_, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
	switch(ros_ch_)
    174e:	81 11       	cpse	r24, r1
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <write+0xa>
	{
		case _DEF_ROS0:
		ret = uartWrite(ros_ch_tbl[ros_ch_], p_data, length);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	d1 c0       	rjmp	.+418    	; 0x18f8 <uartWrite>
		break;
    1756:	08 95       	ret
	return ret;
}

uint32_t write(uint8_t ros_ch_, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	cb 01       	movw	r24, r22
		break;
		default:
		break;
	}
	return ret;
}
    175e:	08 95       	ret

00001760 <read>:

uint8_t read(uint8_t ros_ch_)
{
	uint8_t ret = 0;
	switch(ros_ch_)
    1760:	81 11       	cpse	r24, r1
    1762:	03 c0       	rjmp	.+6      	; 0x176a <read+0xa>
	{
		case _DEF_ROS0:
		ret = uartRead(ros_ch_tbl[ros_ch_]);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	99 c0       	rjmp	.+306    	; 0x189a <uartRead>
		break;
    1768:	08 95       	ret
	return ret;
}

uint8_t read(uint8_t ros_ch_)
{
	uint8_t ret = 0;
    176a:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}	
	
	return ret;
}
    176c:	08 95       	ret

0000176e <flush>:

bool flush(uint8_t ros_ch_)
{
	bool ret = true;
	switch(ros_ch_)
    176e:	81 11       	cpse	r24, r1
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <flush+0xa>
	{
		case _DEF_ROS0:
		ret = uartFlush(ros_ch_tbl[ros_ch_]);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	f8 c0       	rjmp	.+496    	; 0x1966 <uartFlush>
		break;
    1776:	08 95       	ret
	return ret;
}

bool flush(uint8_t ros_ch_)
{
	bool ret = true;
    1778:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		break;
	}
	return ret;
}
    177a:	08 95       	ret

0000177c <rosUartDriver>:
uint8_t		read(uint8_t ros_ch_);
bool		flush(uint8_t ros_ch_);


bool rosUartDriver(ros_driver_t *p_driver)
{
    177c:	fc 01       	movw	r30, r24
	bool ret = true;
	p_driver->is_init	= true;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
	p_driver->open		= open;
    1782:	87 e9       	ldi	r24, 0x97	; 151
    1784:	9b e0       	ldi	r25, 0x0B	; 11
    1786:	92 83       	std	Z+2, r25	; 0x02
    1788:	81 83       	std	Z+1, r24	; 0x01
	p_driver->close		= close;
    178a:	85 e9       	ldi	r24, 0x95	; 149
    178c:	9b e0       	ldi	r25, 0x0B	; 11
    178e:	94 83       	std	Z+4, r25	; 0x04
    1790:	83 83       	std	Z+3, r24	; 0x03
	p_driver->available = available;
    1792:	8e e9       	ldi	r24, 0x9E	; 158
    1794:	9b e0       	ldi	r25, 0x0B	; 11
    1796:	96 83       	std	Z+6, r25	; 0x06
    1798:	85 83       	std	Z+5, r24	; 0x05
	p_driver->write		= write;
    179a:	87 ea       	ldi	r24, 0xA7	; 167
    179c:	9b e0       	ldi	r25, 0x0B	; 11
    179e:	90 87       	std	Z+8, r25	; 0x08
    17a0:	87 83       	std	Z+7, r24	; 0x07
	p_driver->read		= read;
    17a2:	80 eb       	ldi	r24, 0xB0	; 176
    17a4:	9b e0       	ldi	r25, 0x0B	; 11
    17a6:	92 87       	std	Z+10, r25	; 0x0a
    17a8:	81 87       	std	Z+9, r24	; 0x09
	p_driver->flush		= flush;
    17aa:	87 eb       	ldi	r24, 0xB7	; 183
    17ac:	9b e0       	ldi	r25, 0x0B	; 11
    17ae:	94 87       	std	Z+12, r25	; 0x0c
    17b0:	83 87       	std	Z+11, r24	; 0x0b
	
	return ret;
}
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	08 95       	ret

000017b6 <uartInit>:
		case _DEF_UART1:
		baud = huart2.Init.BaudRate;
		break;
	}
	return baud;
}
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	08 95       	ret

000017ba <uartOpen>:
    17ba:	88 23       	and	r24, r24
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <uartOpen+0xa>
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	49 f1       	breq	.+82     	; 0x1814 <uartOpen+0x5a>
    17c2:	51 c0       	rjmp	.+162    	; 0x1866 <uartOpen+0xac>
    17c4:	e1 ed       	ldi	r30, 0xD1	; 209
    17c6:	f7 e0       	ldi	r31, 0x07	; 7
    17c8:	10 82       	st	Z, r1
    17ca:	41 83       	std	Z+1, r20	; 0x01
    17cc:	52 83       	std	Z+2, r21	; 0x02
    17ce:	63 83       	std	Z+3, r22	; 0x03
    17d0:	74 83       	std	Z+4, r23	; 0x04
    17d2:	16 82       	std	Z+6, r1	; 0x06
    17d4:	17 82       	std	Z+7, r1	; 0x07
    17d6:	15 82       	std	Z+5, r1	; 0x05
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	80 87       	std	Z+8, r24	; 0x08
    17dc:	11 86       	std	Z+9, r1	; 0x09
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	63 eb       	ldi	r22, 0xB3	; 179
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	83 eb       	ldi	r24, 0xB3	; 179
    17ec:	93 e0       	ldi	r25, 0x03	; 3
    17ee:	0e 94 30 02 	call	0x460	; 0x460 <qbufferCreate>
    17f2:	81 ed       	ldi	r24, 0xD1	; 209
    17f4:	97 e0       	ldi	r25, 0x07	; 7
    17f6:	8b d4       	rcall	.+2326   	; 0x210e <UART_Init>
    17f8:	81 11       	cpse	r24, r1
    17fa:	37 c0       	rjmp	.+110    	; 0x186a <uartOpen+0xb0>
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	61 eb       	ldi	r22, 0xB1	; 177
    1802:	71 e0       	ldi	r23, 0x01	; 1
    1804:	81 ed       	ldi	r24, 0xD1	; 209
    1806:	97 e0       	ldi	r25, 0x07	; 7
    1808:	51 d7       	rcall	.+3746   	; 0x26ac <UART_Receive_IT>
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	88 23       	and	r24, r24
    180e:	81 f1       	breq	.+96     	; 0x1870 <uartOpen+0xb6>
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	2e c0       	rjmp	.+92     	; 0x1870 <uartOpen+0xb6>
    1814:	e8 ee       	ldi	r30, 0xE8	; 232
    1816:	f7 e0       	ldi	r31, 0x07	; 7
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	41 83       	std	Z+1, r20	; 0x01
    181e:	52 83       	std	Z+2, r21	; 0x02
    1820:	63 83       	std	Z+3, r22	; 0x03
    1822:	74 83       	std	Z+4, r23	; 0x04
    1824:	16 82       	std	Z+6, r1	; 0x06
    1826:	17 82       	std	Z+7, r1	; 0x07
    1828:	15 82       	std	Z+5, r1	; 0x05
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	80 87       	std	Z+8, r24	; 0x08
    182e:	11 86       	std	Z+9, r1	; 0x09
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	31 e0       	ldi	r19, 0x01	; 1
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	63 eb       	ldi	r22, 0xB3	; 179
    183a:	72 e0       	ldi	r23, 0x02	; 2
    183c:	81 ec       	ldi	r24, 0xC1	; 193
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	0e 94 30 02 	call	0x460	; 0x460 <qbufferCreate>
    1844:	88 ee       	ldi	r24, 0xE8	; 232
    1846:	97 e0       	ldi	r25, 0x07	; 7
    1848:	62 d4       	rcall	.+2244   	; 0x210e <UART_Init>
    184a:	81 11       	cpse	r24, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <uartOpen+0xb4>
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	62 eb       	ldi	r22, 0xB2	; 178
    1854:	71 e0       	ldi	r23, 0x01	; 1
    1856:	88 ee       	ldi	r24, 0xE8	; 232
    1858:	97 e0       	ldi	r25, 0x07	; 7
    185a:	28 d7       	rcall	.+3664   	; 0x26ac <UART_Receive_IT>
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	88 23       	and	r24, r24
    1860:	39 f0       	breq	.+14     	; 0x1870 <uartOpen+0xb6>
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <uartOpen+0xb6>
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <uartOpen+0xb6>
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <uartOpen+0xb6>
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	89 2f       	mov	r24, r25
    1872:	08 95       	ret

00001874 <uartAvailable>:
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <uartAvailable+0xa>
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	31 f0       	breq	.+12     	; 0x1888 <uartAvailable+0x14>
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <uartAvailable+0x1e>
    187e:	83 eb       	ldi	r24, 0xB3	; 179
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	0c 94 4b 03 	jmp	0x696	; 0x696 <qbufferAvailable>
    1886:	08 95       	ret
    1888:	81 ec       	ldi	r24, 0xC1	; 193
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0c 94 4b 03 	jmp	0x696	; 0x696 <qbufferAvailable>
    1890:	08 95       	ret
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	cb 01       	movw	r24, r22
    1898:	08 95       	ret

0000189a <uartRead>:
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	19 82       	std	Y+1, r1	; 0x01
    18a6:	88 23       	and	r24, r24
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <uartRead+0x16>
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	89 f0       	breq	.+34     	; 0x18d0 <uartRead+0x36>
    18ae:	1f c0       	rjmp	.+62     	; 0x18ee <uartRead+0x54>
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	83 eb       	ldi	r24, 0xB3	; 179
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <qbufferRead>
    18c6:	81 11       	cpse	r24, r1
    18c8:	12 c0       	rjmp	.+36     	; 0x18ee <uartRead+0x54>
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <uartRead+0x54>
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	be 01       	movw	r22, r28
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	81 ec       	ldi	r24, 0xC1	; 193
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <qbufferRead>
    18e6:	81 11       	cpse	r24, r1
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <uartRead+0x54>
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <uartWrite>:
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	69 01       	movw	r12, r18
    1906:	7a 01       	movw	r14, r20
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <uartWrite+0x1a>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	61 f0       	breq	.+24     	; 0x1928 <uartWrite+0x30>
    1910:	16 c0       	rjmp	.+44     	; 0x193e <uartWrite+0x46>
    1912:	04 e6       	ldi	r16, 0x64	; 100
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	a6 01       	movw	r20, r12
    191c:	81 ed       	ldi	r24, 0xD1	; 209
    191e:	97 e0       	ldi	r25, 0x07	; 7
    1920:	f3 d5       	rcall	.+3046   	; 0x2508 <UART_Transmit>
    1922:	81 11       	cpse	r24, r1
    1924:	10 c0       	rjmp	.+32     	; 0x1946 <uartWrite+0x4e>
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <uartWrite+0x5c>
    1928:	04 e6       	ldi	r16, 0x64	; 100
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	a6 01       	movw	r20, r12
    1932:	88 ee       	ldi	r24, 0xE8	; 232
    1934:	97 e0       	ldi	r25, 0x07	; 7
    1936:	e8 d5       	rcall	.+3024   	; 0x2508 <UART_Transmit>
    1938:	88 23       	and	r24, r24
    193a:	61 f0       	breq	.+24     	; 0x1954 <uartWrite+0x5c>
    193c:	08 c0       	rjmp	.+16     	; 0x194e <uartWrite+0x56>
    193e:	c1 2c       	mov	r12, r1
    1940:	d1 2c       	mov	r13, r1
    1942:	76 01       	movw	r14, r12
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <uartWrite+0x5c>
    1946:	c1 2c       	mov	r12, r1
    1948:	d1 2c       	mov	r13, r1
    194a:	76 01       	movw	r14, r12
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <uartWrite+0x5c>
    194e:	c1 2c       	mov	r12, r1
    1950:	d1 2c       	mov	r13, r1
    1952:	76 01       	movw	r14, r12
    1954:	c7 01       	movw	r24, r14
    1956:	b6 01       	movw	r22, r12
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret

00001966 <uartFlush>:

bool uartFlush(uint8_t ch)
{
	bool ret = true;
	
	switch(ch)
    1966:	88 23       	and	r24, r24
    1968:	19 f0       	breq	.+6      	; 0x1970 <uartFlush+0xa>
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	31 f0       	breq	.+12     	; 0x197a <uartFlush+0x14>
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <uartFlush+0x1c>
	{
		case _DEF_UART0:
		qbufferFlush(&qbuffer[_DEF_UART0]);
    1970:	83 eb       	ldi	r24, 0xB3	; 179
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	0e 94 65 03 	call	0x6ca	; 0x6ca <qbufferFlush>
		break;
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <uartFlush+0x1c>
		case _DEF_UART1:
		qbufferFlush(&qbuffer[_DEF_UART1]);
    197a:	81 ec       	ldi	r24, 0xC1	; 193
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	0e 94 65 03 	call	0x6ca	; 0x6ca <qbufferFlush>
		break;
	}
	
	return ret;
}
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	08 95       	ret

00001986 <UART_TxCpltCallback>:


void UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    1986:	08 95       	ret

00001988 <UART_RxCpltCallback>:
	return;
}

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    1988:	fc 01       	movw	r30, r24
	switch(huart->USARTn)
    198a:	80 81       	ld	r24, Z
    198c:	88 23       	and	r24, r24
    198e:	19 f0       	breq	.+6      	; 0x1996 <UART_RxCpltCallback+0xe>
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	61 f0       	breq	.+24     	; 0x19ac <UART_RxCpltCallback+0x24>
    1994:	08 95       	ret
	{
		case USART0:
		qbufferWrite(&qbuffer[_DEF_UART0], huart->pRxBuffPtr, huart->RxXferSize);
    1996:	20 89       	ldd	r18, Z+16	; 0x10
    1998:	31 89       	ldd	r19, Z+17	; 0x11
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	64 85       	ldd	r22, Z+12	; 0x0c
    19a0:	75 85       	ldd	r23, Z+13	; 0x0d
    19a2:	83 eb       	ldi	r24, 0xB3	; 179
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0c 94 41 02 	jmp	0x482	; 0x482 <qbufferWrite>
		//uartPrintf(_DEF_UART0, "Rx callback available: %d", uartAvailable(_DEF_UART0));
		//uartPrintf(_DEF_UART0, "Rx callback called\n");
		break;
    19aa:	08 95       	ret
		case USART1:
		qbufferWrite(&qbuffer[_DEF_UART1], huart->pRxBuffPtr, huart->RxXferSize);
    19ac:	20 89       	ldd	r18, Z+16	; 0x10
    19ae:	31 89       	ldd	r19, Z+17	; 0x11
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	64 85       	ldd	r22, Z+12	; 0x0c
    19b6:	75 85       	ldd	r23, Z+13	; 0x0d
    19b8:	81 ec       	ldi	r24, 0xC1	; 193
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0c 94 41 02 	jmp	0x482	; 0x482 <qbufferWrite>
    19c0:	08 95       	ret

000019c2 <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
    19c2:	0e 94 2f 02 	call	0x45e	; 0x45e <bspInit>
	gpioInit();
    19c6:	f0 dc       	rcall	.-1568   	; 0x13a8 <gpioInit>
	uartInit();
    19c8:	f6 de       	rcall	.-532    	; 0x17b6 <uartInit>
    19ca:	0e 94 6f 03 	call	0x6de	; 0x6de <ctcInit>
	//timerInit();
	//a4988Init();
	ctcInit();
	pwmInit();
    19ce:	23 dd       	rcall	.-1466   	; 0x1416 <pwmInit>
	motorInit();
    19d0:	e4 d9       	rcall	.-3128   	; 0xd9a <motorInit>
    19d2:	64 cd       	rjmp	.-1336   	; 0x149c <rosServerInit>
	rosServerInit();
    19d4:	08 95       	ret

000019d6 <GPIO_Init>:
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	db 01       	movw	r26, r22
	GPIO_PinState ret = 0x00;
	GPIO_TypeDef *gpio = &GPIO_descripter[port];

	ret = READB(*(gpio->PINn), pin);
	return ret;
}
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	2c 91       	ld	r18, X
    19de:	11 97       	sbiw	r26, 0x01	; 1
    19e0:	21 11       	cpse	r18, r1
    19e2:	19 c0       	rjmp	.+50     	; 0x1a16 <GPIO_Init+0x40>
    19e4:	fc 01       	movw	r30, r24
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	e8 0f       	add	r30, r24
    19ec:	f9 1f       	adc	r31, r25
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	e2 5e       	subi	r30, 0xE2	; 226
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	01 90       	ld	r0, Z+
    19f8:	f0 81       	ld	r31, Z
    19fa:	e0 2d       	mov	r30, r0
    19fc:	20 81       	ld	r18, Z
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0c 90       	ld	r0, X
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_Init+0x34>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_Init+0x30>
    1a0e:	80 95       	com	r24
    1a10:	82 23       	and	r24, r18
    1a12:	80 83       	st	Z, r24
    1a14:	08 95       	ret
    1a16:	21 30       	cpi	r18, 0x01	; 1
    1a18:	c1 f4       	brne	.+48     	; 0x1a4a <GPIO_Init+0x74>
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	e8 0f       	add	r30, r24
    1a22:	f9 1f       	adc	r31, r25
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	e2 5e       	subi	r30, 0xE2	; 226
    1a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	f0 81       	ld	r31, Z
    1a30:	e0 2d       	mov	r30, r0
    1a32:	20 81       	ld	r18, Z
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	db 01       	movw	r26, r22
    1a3a:	0c 90       	ld	r0, X
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_Init+0x6c>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_Init+0x68>
    1a46:	82 2b       	or	r24, r18
    1a48:	80 83       	st	Z, r24
    1a4a:	08 95       	ret

00001a4c <GPIO_WritePin>:

void GPIO_WritePin(uint8_t port, uint8_t pin, GPIO_PinState pinState)
{
	GPIO_TypeDef *gpio = &GPIO_descripter[port];
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
	
	if(pinState == PIN_RESET)
    1a4e:	41 11       	cpse	r20, r1
    1a50:	18 c0       	rjmp	.+48     	; 0x1a82 <GPIO_WritePin+0x36>
	{
		CLRB(*(gpio->PORTn), pin);
    1a52:	fc 01       	movw	r30, r24
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e8 0f       	add	r30, r24
    1a5a:	f9 1f       	adc	r31, r25
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	e2 5e       	subi	r30, 0xE2	; 226
    1a62:	fe 4f       	sbci	r31, 0xFE	; 254
    1a64:	02 80       	ldd	r0, Z+2	; 0x02
    1a66:	f3 81       	ldd	r31, Z+3	; 0x03
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	20 81       	ld	r18, Z
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_WritePin+0x2a>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	6a 95       	dec	r22
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_WritePin+0x26>
    1a7a:	80 95       	com	r24
    1a7c:	82 23       	and	r24, r18
    1a7e:	80 83       	st	Z, r24
    1a80:	08 95       	ret
	}
	else if(pinState == PIN_SET)
    1a82:	41 30       	cpi	r20, 0x01	; 1
    1a84:	b1 f4       	brne	.+44     	; 0x1ab2 <GPIO_WritePin+0x66>
	{
		SETB(*(gpio->PORTn), pin);
    1a86:	fc 01       	movw	r30, r24
    1a88:	ee 0f       	add	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	e8 0f       	add	r30, r24
    1a8e:	f9 1f       	adc	r31, r25
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	e2 5e       	subi	r30, 0xE2	; 226
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	02 80       	ldd	r0, Z+2	; 0x02
    1a9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	20 81       	ld	r18, Z
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <GPIO_WritePin+0x5e>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	6a 95       	dec	r22
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <GPIO_WritePin+0x5a>
    1aae:	82 2b       	or	r24, r18
    1ab0:	80 83       	st	Z, r24
    1ab2:	08 95       	ret

00001ab4 <TIM8_Base_Init>:
{
	TIM2_OVF_ElapsedCallback(htim);
}
void TIM3_OVF_IRQHandler(TIM16_HandleTypeDef *htim)
{
	TIM3_OVF_ElapsedCallback(htim);
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <TIM8_Base_Init+0xa>
    1abc:	48 c0       	rjmp	.+144    	; 0x1b4e <TIM8_Base_Init+0x9a>
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	e9 f1       	breq	.+122    	; 0x1b3c <TIM8_Base_Init+0x88>
    1ac2:	38 c0       	rjmp	.+112    	; 0x1b34 <TIM8_Base_Init+0x80>
    1ac4:	81 81       	ldd	r24, Z+1	; 0x01
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <TIM8_Base_Init+0x1c>
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	d1 f0       	breq	.+52     	; 0x1b02 <TIM8_Base_Init+0x4e>
    1ace:	34 c0       	rjmp	.+104    	; 0x1b38 <TIM8_Base_Init+0x84>
    1ad0:	e4 e7       	ldi	r30, 0x74	; 116
    1ad2:	f1 e0       	ldi	r31, 0x01	; 1
    1ad4:	a0 85       	ldd	r26, Z+8	; 0x08
    1ad6:	b1 85       	ldd	r27, Z+9	; 0x09
    1ad8:	8c 91       	ld	r24, X
    1ada:	88 7f       	andi	r24, 0xF8	; 248
    1adc:	8c 93       	st	X, r24
    1ade:	a0 85       	ldd	r26, Z+8	; 0x08
    1ae0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ae2:	8c 91       	ld	r24, X
    1ae4:	84 60       	ori	r24, 0x04	; 4
    1ae6:	8c 93       	st	X, r24
    1ae8:	a0 85       	ldd	r26, Z+8	; 0x08
    1aea:	b1 85       	ldd	r27, Z+9	; 0x09
    1aec:	8c 91       	ld	r24, X
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	8c 93       	st	X, r24
    1af2:	00 84       	ldd	r0, Z+8	; 0x08
    1af4:	f1 85       	ldd	r31, Z+9	; 0x09
    1af6:	e0 2d       	mov	r30, r0
    1af8:	80 81       	ld	r24, Z
    1afa:	8e 7f       	andi	r24, 0xFE	; 254
    1afc:	80 83       	st	Z, r24
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	08 95       	ret
    1b02:	e4 e7       	ldi	r30, 0x74	; 116
    1b04:	f1 e0       	ldi	r31, 0x01	; 1
    1b06:	a0 85       	ldd	r26, Z+8	; 0x08
    1b08:	b1 85       	ldd	r27, Z+9	; 0x09
    1b0a:	8c 91       	ld	r24, X
    1b0c:	88 7f       	andi	r24, 0xF8	; 248
    1b0e:	8c 93       	st	X, r24
    1b10:	a0 85       	ldd	r26, Z+8	; 0x08
    1b12:	b1 85       	ldd	r27, Z+9	; 0x09
    1b14:	8c 91       	ld	r24, X
    1b16:	84 60       	ori	r24, 0x04	; 4
    1b18:	8c 93       	st	X, r24
    1b1a:	a0 85       	ldd	r26, Z+8	; 0x08
    1b1c:	b1 85       	ldd	r27, Z+9	; 0x09
    1b1e:	8c 91       	ld	r24, X
    1b20:	82 60       	ori	r24, 0x02	; 2
    1b22:	8c 93       	st	X, r24
    1b24:	00 84       	ldd	r0, Z+8	; 0x08
    1b26:	f1 85       	ldd	r31, Z+9	; 0x09
    1b28:	e0 2d       	mov	r30, r0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	81 60       	ori	r24, 0x01	; 1
    1b2e:	80 83       	st	Z, r24
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	08 95       	ret
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	08 95       	ret
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret
    1b3c:	2c e7       	ldi	r18, 0x7C	; 124
    1b3e:	31 e0       	ldi	r19, 0x01	; 1
    1b40:	35 83       	std	Z+5, r19	; 0x05
    1b42:	24 83       	std	Z+4, r18	; 0x04
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <TIM8_Base_Init+0x96>
    1b48:	bd cf       	rjmp	.-134    	; 0x1ac4 <TIM8_Base_Init+0x10>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	08 95       	ret
    1b4e:	84 e7       	ldi	r24, 0x74	; 116
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	95 83       	std	Z+5, r25	; 0x05
    1b54:	84 83       	std	Z+4, r24	; 0x04
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret

00001b5a <TIM8_OC_Init>:
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	dc 01       	movw	r26, r24
    1b64:	2c 91       	ld	r18, X
    1b66:	22 23       	and	r18, r18
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <TIM8_OC_Init+0x12>
    1b6a:	7f c0       	rjmp	.+254    	; 0x1c6a <TIM8_OC_Init+0x110>
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <TIM8_OC_Init+0x18>
    1b70:	7a c0       	rjmp	.+244    	; 0x1c66 <TIM8_OC_Init+0x10c>
    1b72:	0c e7       	ldi	r16, 0x7C	; 124
    1b74:	11 e0       	ldi	r17, 0x01	; 1
    1b76:	7b c0       	rjmp	.+246    	; 0x1c6e <TIM8_OC_Init+0x114>
    1b78:	d8 01       	movw	r26, r16
    1b7a:	ed 91       	ld	r30, X+
    1b7c:	fc 91       	ld	r31, X
    1b7e:	11 97       	sbiw	r26, 0x01	; 1
    1b80:	80 81       	ld	r24, Z
    1b82:	8f 7b       	andi	r24, 0xBF	; 191
    1b84:	80 83       	st	Z, r24
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	80 81       	ld	r24, Z
    1b8c:	87 7f       	andi	r24, 0xF7	; 247
    1b8e:	80 83       	st	Z, r24
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <TIM8_OC_Init+0x50>
    1b92:	d8 01       	movw	r26, r16
    1b94:	ed 91       	ld	r30, X+
    1b96:	fc 91       	ld	r31, X
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7b       	andi	r24, 0xBF	; 191
    1b9e:	80 83       	st	Z, r24
    1ba0:	ed 91       	ld	r30, X+
    1ba2:	fc 91       	ld	r31, X
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 60       	ori	r24, 0x08	; 8
    1ba8:	80 83       	st	Z, r24
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 23       	and	r24, r24
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <TIM8_OC_Init+0x5c>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	41 f0       	breq	.+16     	; 0x1bc4 <TIM8_OC_Init+0x6a>
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <TIM8_OC_Init+0x76>
    1bb6:	d8 01       	movw	r26, r16
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8f 77       	andi	r24, 0x7F	; 127
    1bc0:	80 83       	st	Z, r24
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <TIM8_OC_Init+0x76>
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	80 83       	st	Z, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	99 f0       	breq	.+38     	; 0x1bfc <TIM8_OC_Init+0xa2>
    1bd6:	28 f0       	brcs	.+10     	; 0x1be2 <TIM8_OC_Init+0x88>
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	e9 f0       	breq	.+58     	; 0x1c16 <TIM8_OC_Init+0xbc>
    1bdc:	83 30       	cpi	r24, 0x03	; 3
    1bde:	41 f1       	breq	.+80     	; 0x1c30 <TIM8_OC_Init+0xd6>
    1be0:	33 c0       	rjmp	.+102    	; 0x1c48 <TIM8_OC_Init+0xee>
    1be2:	d8 01       	movw	r26, r16
    1be4:	ed 91       	ld	r30, X+
    1be6:	fc 91       	ld	r31, X
    1be8:	11 97       	sbiw	r26, 0x01	; 1
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 7e       	andi	r24, 0xEF	; 239
    1bee:	80 83       	st	Z, r24
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8f 7d       	andi	r24, 0xDF	; 223
    1bf8:	80 83       	st	Z, r24
    1bfa:	26 c0       	rjmp	.+76     	; 0x1c48 <TIM8_OC_Init+0xee>
    1bfc:	d8 01       	movw	r26, r16
    1bfe:	ed 91       	ld	r30, X+
    1c00:	fc 91       	ld	r31, X
    1c02:	11 97       	sbiw	r26, 0x01	; 1
    1c04:	80 81       	ld	r24, Z
    1c06:	80 61       	ori	r24, 0x10	; 16
    1c08:	80 83       	st	Z, r24
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7d       	andi	r24, 0xDF	; 223
    1c12:	80 83       	st	Z, r24
    1c14:	19 c0       	rjmp	.+50     	; 0x1c48 <TIM8_OC_Init+0xee>
    1c16:	d8 01       	movw	r26, r16
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	80 81       	ld	r24, Z
    1c20:	8f 7e       	andi	r24, 0xEF	; 239
    1c22:	80 83       	st	Z, r24
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 62       	ori	r24, 0x20	; 32
    1c2c:	80 83       	st	Z, r24
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <TIM8_OC_Init+0xee>
    1c30:	d8 01       	movw	r26, r16
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 61       	ori	r24, 0x10	; 16
    1c3c:	80 83       	st	Z, r24
    1c3e:	ed 91       	ld	r30, X+
    1c40:	fc 91       	ld	r31, X
    1c42:	80 81       	ld	r24, Z
    1c44:	80 62       	ori	r24, 0x20	; 32
    1c46:	80 83       	st	Z, r24
    1c48:	d8 01       	movw	r26, r16
    1c4a:	14 96       	adiw	r26, 0x04	; 4
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	15 97       	sbiw	r26, 0x05	; 5
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	80 83       	st	Z, r24
    1c56:	12 96       	adiw	r26, 0x02	; 2
    1c58:	ed 91       	ld	r30, X+
    1c5a:	fc 91       	ld	r31, X
    1c5c:	13 97       	sbiw	r26, 0x03	; 3
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	80 83       	st	Z, r24
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	0e c0       	rjmp	.+28     	; 0x1c82 <TIM8_OC_Init+0x128>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	0c c0       	rjmp	.+24     	; 0x1c82 <TIM8_OC_Init+0x128>
    1c6a:	04 e7       	ldi	r16, 0x74	; 116
    1c6c:	11 e0       	ldi	r17, 0x01	; 1
    1c6e:	eb 01       	movw	r28, r22
    1c70:	21 df       	rcall	.-446    	; 0x1ab4 <TIM8_Base_Init>
    1c72:	88 81       	ld	r24, Y
    1c74:	88 23       	and	r24, r24
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <TIM8_OC_Init+0x120>
    1c78:	7f cf       	rjmp	.-258    	; 0x1b78 <TIM8_OC_Init+0x1e>
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <TIM8_OC_Init+0x126>
    1c7e:	89 cf       	rjmp	.-238    	; 0x1b92 <TIM8_OC_Init+0x38>
    1c80:	94 cf       	rjmp	.-216    	; 0x1baa <TIM8_OC_Init+0x50>
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <TIM8_OC_Stop>:
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	88 23       	and	r24, r24
    1c92:	39 f0       	breq	.+14     	; 0x1ca2 <TIM8_OC_Stop+0x16>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <TIM8_OC_Stop+0x12>
    1c98:	ec e7       	ldi	r30, 0x7C	; 124
    1c9a:	f1 e0       	ldi	r31, 0x01	; 1
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <TIM8_OC_Stop+0x1a>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	08 95       	ret
    1ca2:	e4 e7       	ldi	r30, 0x74	; 116
    1ca4:	f1 e0       	ldi	r31, 0x01	; 1
    1ca6:	01 90       	ld	r0, Z+
    1ca8:	f0 81       	ld	r31, Z
    1caa:	e0 2d       	mov	r30, r0
    1cac:	80 81       	ld	r24, Z
    1cae:	88 7f       	andi	r24, 0xF8	; 248
    1cb0:	80 83       	st	Z, r24
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	08 95       	ret

00001cb6 <TIM16_OC_Stop>:
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	80 81       	ld	r24, Z
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	39 f0       	breq	.+14     	; 0x1ccc <TIM16_OC_Stop+0x16>
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	19 f4       	brne	.+6      	; 0x1cc8 <TIM16_OC_Stop+0x12>
    1cc2:	ee e5       	ldi	r30, 0x5E	; 94
    1cc4:	f1 e0       	ldi	r31, 0x01	; 1
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <TIM16_OC_Stop+0x1a>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	08 95       	ret
    1ccc:	e8 e4       	ldi	r30, 0x48	; 72
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	02 80       	ldd	r0, Z+2	; 0x02
    1cd2:	f3 81       	ldd	r31, Z+3	; 0x03
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 7f       	andi	r24, 0xF8	; 248
    1cda:	80 83       	st	Z, r24
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	08 95       	ret

00001ce0 <TIM0_CLK_Configuration>:
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	12 96       	adiw	r26, 0x02	; 2
    1ce4:	ec 91       	ld	r30, X
    1ce6:	8e 2f       	mov	r24, r30
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	87 30       	cpi	r24, 0x07	; 7
    1cec:	91 05       	cpc	r25, r1
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <TIM0_CLK_Configuration+0x12>
    1cf0:	88 c0       	rjmp	.+272    	; 0x1e02 <TIM0_CLK_Configuration+0x122>
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e1 5b       	subi	r30, 0xB1	; 177
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	d0 c6       	rjmp	.+3488   	; 0x2a9a <__tablejump2__>
    1cfa:	e4 e7       	ldi	r30, 0x74	; 116
    1cfc:	f1 e0       	ldi	r31, 0x01	; 1
    1cfe:	a0 81       	ld	r26, Z
    1d00:	b1 81       	ldd	r27, Z+1	; 0x01
    1d02:	8c 91       	ld	r24, X
    1d04:	8b 7f       	andi	r24, 0xFB	; 251
    1d06:	8c 93       	st	X, r24
    1d08:	a0 81       	ld	r26, Z
    1d0a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d0c:	8c 91       	ld	r24, X
    1d0e:	8d 7f       	andi	r24, 0xFD	; 253
    1d10:	8c 93       	st	X, r24
    1d12:	01 90       	ld	r0, Z+
    1d14:	f0 81       	ld	r31, Z
    1d16:	e0 2d       	mov	r30, r0
    1d18:	80 81       	ld	r24, Z
    1d1a:	81 60       	ori	r24, 0x01	; 1
    1d1c:	80 83       	st	Z, r24
    1d1e:	08 95       	ret
    1d20:	e4 e7       	ldi	r30, 0x74	; 116
    1d22:	f1 e0       	ldi	r31, 0x01	; 1
    1d24:	a0 81       	ld	r26, Z
    1d26:	b1 81       	ldd	r27, Z+1	; 0x01
    1d28:	8c 91       	ld	r24, X
    1d2a:	8b 7f       	andi	r24, 0xFB	; 251
    1d2c:	8c 93       	st	X, r24
    1d2e:	a0 81       	ld	r26, Z
    1d30:	b1 81       	ldd	r27, Z+1	; 0x01
    1d32:	8c 91       	ld	r24, X
    1d34:	82 60       	ori	r24, 0x02	; 2
    1d36:	8c 93       	st	X, r24
    1d38:	01 90       	ld	r0, Z+
    1d3a:	f0 81       	ld	r31, Z
    1d3c:	e0 2d       	mov	r30, r0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8e 7f       	andi	r24, 0xFE	; 254
    1d42:	80 83       	st	Z, r24
    1d44:	08 95       	ret
    1d46:	e4 e7       	ldi	r30, 0x74	; 116
    1d48:	f1 e0       	ldi	r31, 0x01	; 1
    1d4a:	a0 81       	ld	r26, Z
    1d4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d4e:	8c 91       	ld	r24, X
    1d50:	8b 7f       	andi	r24, 0xFB	; 251
    1d52:	8c 93       	st	X, r24
    1d54:	a0 81       	ld	r26, Z
    1d56:	b1 81       	ldd	r27, Z+1	; 0x01
    1d58:	8c 91       	ld	r24, X
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	8c 93       	st	X, r24
    1d5e:	01 90       	ld	r0, Z+
    1d60:	f0 81       	ld	r31, Z
    1d62:	e0 2d       	mov	r30, r0
    1d64:	80 81       	ld	r24, Z
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	80 83       	st	Z, r24
    1d6a:	08 95       	ret
    1d6c:	e4 e7       	ldi	r30, 0x74	; 116
    1d6e:	f1 e0       	ldi	r31, 0x01	; 1
    1d70:	a0 81       	ld	r26, Z
    1d72:	b1 81       	ldd	r27, Z+1	; 0x01
    1d74:	8c 91       	ld	r24, X
    1d76:	84 60       	ori	r24, 0x04	; 4
    1d78:	8c 93       	st	X, r24
    1d7a:	a0 81       	ld	r26, Z
    1d7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d7e:	8c 91       	ld	r24, X
    1d80:	8d 7f       	andi	r24, 0xFD	; 253
    1d82:	8c 93       	st	X, r24
    1d84:	01 90       	ld	r0, Z+
    1d86:	f0 81       	ld	r31, Z
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8e 7f       	andi	r24, 0xFE	; 254
    1d8e:	80 83       	st	Z, r24
    1d90:	08 95       	ret
    1d92:	e4 e7       	ldi	r30, 0x74	; 116
    1d94:	f1 e0       	ldi	r31, 0x01	; 1
    1d96:	a0 81       	ld	r26, Z
    1d98:	b1 81       	ldd	r27, Z+1	; 0x01
    1d9a:	8c 91       	ld	r24, X
    1d9c:	84 60       	ori	r24, 0x04	; 4
    1d9e:	8c 93       	st	X, r24
    1da0:	a0 81       	ld	r26, Z
    1da2:	b1 81       	ldd	r27, Z+1	; 0x01
    1da4:	8c 91       	ld	r24, X
    1da6:	8d 7f       	andi	r24, 0xFD	; 253
    1da8:	8c 93       	st	X, r24
    1daa:	01 90       	ld	r0, Z+
    1dac:	f0 81       	ld	r31, Z
    1dae:	e0 2d       	mov	r30, r0
    1db0:	80 81       	ld	r24, Z
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	80 83       	st	Z, r24
    1db6:	08 95       	ret
    1db8:	e4 e7       	ldi	r30, 0x74	; 116
    1dba:	f1 e0       	ldi	r31, 0x01	; 1
    1dbc:	a0 81       	ld	r26, Z
    1dbe:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc0:	8c 91       	ld	r24, X
    1dc2:	84 60       	ori	r24, 0x04	; 4
    1dc4:	8c 93       	st	X, r24
    1dc6:	a0 81       	ld	r26, Z
    1dc8:	b1 81       	ldd	r27, Z+1	; 0x01
    1dca:	8c 91       	ld	r24, X
    1dcc:	82 60       	ori	r24, 0x02	; 2
    1dce:	8c 93       	st	X, r24
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	f0 81       	ld	r31, Z
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8e 7f       	andi	r24, 0xFE	; 254
    1dda:	80 83       	st	Z, r24
    1ddc:	08 95       	ret
    1dde:	e4 e7       	ldi	r30, 0x74	; 116
    1de0:	f1 e0       	ldi	r31, 0x01	; 1
    1de2:	a0 81       	ld	r26, Z
    1de4:	b1 81       	ldd	r27, Z+1	; 0x01
    1de6:	8c 91       	ld	r24, X
    1de8:	84 60       	ori	r24, 0x04	; 4
    1dea:	8c 93       	st	X, r24
    1dec:	a0 81       	ld	r26, Z
    1dee:	b1 81       	ldd	r27, Z+1	; 0x01
    1df0:	8c 91       	ld	r24, X
    1df2:	82 60       	ori	r24, 0x02	; 2
    1df4:	8c 93       	st	X, r24
    1df6:	01 90       	ld	r0, Z+
    1df8:	f0 81       	ld	r31, Z
    1dfa:	e0 2d       	mov	r30, r0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	81 60       	ori	r24, 0x01	; 1
    1e00:	80 83       	st	Z, r24
    1e02:	08 95       	ret

00001e04 <TIM2_CLK_Configuration>:
    1e04:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TIM8_descripter+0x8>
    1e08:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TIM8_descripter+0x9>
    1e0c:	20 81       	ld	r18, Z
    1e0e:	20 81       	ld	r18, Z
    1e10:	dc 01       	movw	r26, r24
    1e12:	12 96       	adiw	r26, 0x02	; 2
    1e14:	8c 91       	ld	r24, X
    1e16:	83 30       	cpi	r24, 0x03	; 3
    1e18:	71 f1       	breq	.+92     	; 0x1e76 <TIM2_CLK_Configuration+0x72>
    1e1a:	28 f4       	brcc	.+10     	; 0x1e26 <TIM2_CLK_Configuration+0x22>
    1e1c:	88 23       	and	r24, r24
    1e1e:	49 f0       	breq	.+18     	; 0x1e32 <TIM2_CLK_Configuration+0x2e>
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	c1 f0       	breq	.+48     	; 0x1e54 <TIM2_CLK_Configuration+0x50>
    1e24:	08 95       	ret
    1e26:	85 30       	cpi	r24, 0x05	; 5
    1e28:	b9 f1       	breq	.+110    	; 0x1e98 <TIM2_CLK_Configuration+0x94>
    1e2a:	86 30       	cpi	r24, 0x06	; 6
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <TIM2_CLK_Configuration+0x2c>
    1e2e:	45 c0       	rjmp	.+138    	; 0x1eba <TIM2_CLK_Configuration+0xb6>
    1e30:	08 95       	ret
    1e32:	80 81       	ld	r24, Z
    1e34:	8b 7f       	andi	r24, 0xFB	; 251
    1e36:	80 83       	st	Z, r24
    1e38:	e4 e7       	ldi	r30, 0x74	; 116
    1e3a:	f1 e0       	ldi	r31, 0x01	; 1
    1e3c:	a0 85       	ldd	r26, Z+8	; 0x08
    1e3e:	b1 85       	ldd	r27, Z+9	; 0x09
    1e40:	8c 91       	ld	r24, X
    1e42:	8d 7f       	andi	r24, 0xFD	; 253
    1e44:	8c 93       	st	X, r24
    1e46:	00 84       	ldd	r0, Z+8	; 0x08
    1e48:	f1 85       	ldd	r31, Z+9	; 0x09
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	81 60       	ori	r24, 0x01	; 1
    1e50:	80 83       	st	Z, r24
    1e52:	08 95       	ret
    1e54:	80 81       	ld	r24, Z
    1e56:	8b 7f       	andi	r24, 0xFB	; 251
    1e58:	80 83       	st	Z, r24
    1e5a:	e4 e7       	ldi	r30, 0x74	; 116
    1e5c:	f1 e0       	ldi	r31, 0x01	; 1
    1e5e:	a0 85       	ldd	r26, Z+8	; 0x08
    1e60:	b1 85       	ldd	r27, Z+9	; 0x09
    1e62:	8c 91       	ld	r24, X
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	8c 93       	st	X, r24
    1e68:	00 84       	ldd	r0, Z+8	; 0x08
    1e6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8e 7f       	andi	r24, 0xFE	; 254
    1e72:	80 83       	st	Z, r24
    1e74:	08 95       	ret
    1e76:	80 81       	ld	r24, Z
    1e78:	8b 7f       	andi	r24, 0xFB	; 251
    1e7a:	80 83       	st	Z, r24
    1e7c:	e4 e7       	ldi	r30, 0x74	; 116
    1e7e:	f1 e0       	ldi	r31, 0x01	; 1
    1e80:	a0 85       	ldd	r26, Z+8	; 0x08
    1e82:	b1 85       	ldd	r27, Z+9	; 0x09
    1e84:	8c 91       	ld	r24, X
    1e86:	82 60       	ori	r24, 0x02	; 2
    1e88:	8c 93       	st	X, r24
    1e8a:	00 84       	ldd	r0, Z+8	; 0x08
    1e8c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	80 81       	ld	r24, Z
    1e92:	81 60       	ori	r24, 0x01	; 1
    1e94:	80 83       	st	Z, r24
    1e96:	08 95       	ret
    1e98:	80 81       	ld	r24, Z
    1e9a:	84 60       	ori	r24, 0x04	; 4
    1e9c:	80 83       	st	Z, r24
    1e9e:	e4 e7       	ldi	r30, 0x74	; 116
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
    1ea2:	a0 85       	ldd	r26, Z+8	; 0x08
    1ea4:	b1 85       	ldd	r27, Z+9	; 0x09
    1ea6:	8c 91       	ld	r24, X
    1ea8:	8d 7f       	andi	r24, 0xFD	; 253
    1eaa:	8c 93       	st	X, r24
    1eac:	00 84       	ldd	r0, Z+8	; 0x08
    1eae:	f1 85       	ldd	r31, Z+9	; 0x09
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	80 83       	st	Z, r24
    1eb8:	08 95       	ret
    1eba:	80 81       	ld	r24, Z
    1ebc:	84 60       	ori	r24, 0x04	; 4
    1ebe:	80 83       	st	Z, r24
    1ec0:	e4 e7       	ldi	r30, 0x74	; 116
    1ec2:	f1 e0       	ldi	r31, 0x01	; 1
    1ec4:	a0 85       	ldd	r26, Z+8	; 0x08
    1ec6:	b1 85       	ldd	r27, Z+9	; 0x09
    1ec8:	8c 91       	ld	r24, X
    1eca:	8d 7f       	andi	r24, 0xFD	; 253
    1ecc:	8c 93       	st	X, r24
    1ece:	00 84       	ldd	r0, Z+8	; 0x08
    1ed0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ed2:	e0 2d       	mov	r30, r0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 60       	ori	r24, 0x01	; 1
    1ed8:	80 83       	st	Z, r24
    1eda:	08 95       	ret

00001edc <TIM8_OC_Start>:
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 81       	ld	r18, Z
    1ee0:	22 23       	and	r18, r18
    1ee2:	89 f0       	breq	.+34     	; 0x1f06 <TIM8_OC_Start+0x2a>
    1ee4:	22 30       	cpi	r18, 0x02	; 2
    1ee6:	59 f4       	brne	.+22     	; 0x1efe <TIM8_OC_Start+0x22>
    1ee8:	ac e7       	ldi	r26, 0x7C	; 124
    1eea:	b1 e0       	ldi	r27, 0x01	; 1
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <TIM8_OC_Start+0x2e>
    1eee:	cf 01       	movw	r24, r30
    1ef0:	f7 de       	rcall	.-530    	; 0x1ce0 <TIM0_CLK_Configuration>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	08 95       	ret
    1ef6:	cf 01       	movw	r24, r30
    1ef8:	85 df       	rcall	.-246    	; 0x1e04 <TIM2_CLK_Configuration>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	08 95       	ret
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	08 95       	ret
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	08 95       	ret
    1f06:	a4 e7       	ldi	r26, 0x74	; 116
    1f08:	b1 e0       	ldi	r27, 0x01	; 1
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	0d 90       	ld	r0, X+
    1f10:	bc 91       	ld	r27, X
    1f12:	a0 2d       	mov	r26, r0
    1f14:	83 81       	ldd	r24, Z+3	; 0x03
    1f16:	8c 93       	st	X, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 23       	and	r24, r24
    1f1c:	41 f3       	breq	.-48     	; 0x1eee <TIM8_OC_Start+0x12>
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	51 f3       	breq	.-44     	; 0x1ef6 <TIM8_OC_Start+0x1a>
    1f22:	ef cf       	rjmp	.-34     	; 0x1f02 <TIM8_OC_Start+0x26>

00001f24 <TIM1_CLK_Configuration>:
    1f24:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <TIM16_descripter+0x2>
    1f28:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <TIM16_descripter+0x3>
    1f2c:	20 81       	ld	r18, Z
    1f2e:	20 81       	ld	r18, Z
    1f30:	dc 01       	movw	r26, r24
    1f32:	12 96       	adiw	r26, 0x02	; 2
    1f34:	8c 91       	ld	r24, X
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	71 f1       	breq	.+92     	; 0x1f96 <TIM1_CLK_Configuration+0x72>
    1f3a:	28 f4       	brcc	.+10     	; 0x1f46 <TIM1_CLK_Configuration+0x22>
    1f3c:	88 23       	and	r24, r24
    1f3e:	49 f0       	breq	.+18     	; 0x1f52 <TIM1_CLK_Configuration+0x2e>
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	c1 f0       	breq	.+48     	; 0x1f74 <TIM1_CLK_Configuration+0x50>
    1f44:	08 95       	ret
    1f46:	85 30       	cpi	r24, 0x05	; 5
    1f48:	b9 f1       	breq	.+110    	; 0x1fb8 <TIM1_CLK_Configuration+0x94>
    1f4a:	86 30       	cpi	r24, 0x06	; 6
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <TIM1_CLK_Configuration+0x2c>
    1f4e:	45 c0       	rjmp	.+138    	; 0x1fda <TIM1_CLK_Configuration+0xb6>
    1f50:	08 95       	ret
    1f52:	80 81       	ld	r24, Z
    1f54:	8b 7f       	andi	r24, 0xFB	; 251
    1f56:	80 83       	st	Z, r24
    1f58:	e8 e4       	ldi	r30, 0x48	; 72
    1f5a:	f1 e0       	ldi	r31, 0x01	; 1
    1f5c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f5e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f60:	8c 91       	ld	r24, X
    1f62:	8d 7f       	andi	r24, 0xFD	; 253
    1f64:	8c 93       	st	X, r24
    1f66:	02 80       	ldd	r0, Z+2	; 0x02
    1f68:	f3 81       	ldd	r31, Z+3	; 0x03
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	81 60       	ori	r24, 0x01	; 1
    1f70:	80 83       	st	Z, r24
    1f72:	08 95       	ret
    1f74:	80 81       	ld	r24, Z
    1f76:	8b 7f       	andi	r24, 0xFB	; 251
    1f78:	80 83       	st	Z, r24
    1f7a:	e8 e4       	ldi	r30, 0x48	; 72
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	a2 81       	ldd	r26, Z+2	; 0x02
    1f80:	b3 81       	ldd	r27, Z+3	; 0x03
    1f82:	8c 91       	ld	r24, X
    1f84:	82 60       	ori	r24, 0x02	; 2
    1f86:	8c 93       	st	X, r24
    1f88:	02 80       	ldd	r0, Z+2	; 0x02
    1f8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8e 7f       	andi	r24, 0xFE	; 254
    1f92:	80 83       	st	Z, r24
    1f94:	08 95       	ret
    1f96:	80 81       	ld	r24, Z
    1f98:	8b 7f       	andi	r24, 0xFB	; 251
    1f9a:	80 83       	st	Z, r24
    1f9c:	e8 e4       	ldi	r30, 0x48	; 72
    1f9e:	f1 e0       	ldi	r31, 0x01	; 1
    1fa0:	a2 81       	ldd	r26, Z+2	; 0x02
    1fa2:	b3 81       	ldd	r27, Z+3	; 0x03
    1fa4:	8c 91       	ld	r24, X
    1fa6:	82 60       	ori	r24, 0x02	; 2
    1fa8:	8c 93       	st	X, r24
    1faa:	02 80       	ldd	r0, Z+2	; 0x02
    1fac:	f3 81       	ldd	r31, Z+3	; 0x03
    1fae:	e0 2d       	mov	r30, r0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	80 83       	st	Z, r24
    1fb6:	08 95       	ret
    1fb8:	80 81       	ld	r24, Z
    1fba:	84 60       	ori	r24, 0x04	; 4
    1fbc:	80 83       	st	Z, r24
    1fbe:	e8 e4       	ldi	r30, 0x48	; 72
    1fc0:	f1 e0       	ldi	r31, 0x01	; 1
    1fc2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fc6:	8c 91       	ld	r24, X
    1fc8:	8d 7f       	andi	r24, 0xFD	; 253
    1fca:	8c 93       	st	X, r24
    1fcc:	02 80       	ldd	r0, Z+2	; 0x02
    1fce:	f3 81       	ldd	r31, Z+3	; 0x03
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	80 83       	st	Z, r24
    1fd8:	08 95       	ret
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	80 83       	st	Z, r24
    1fe0:	e8 e4       	ldi	r30, 0x48	; 72
    1fe2:	f1 e0       	ldi	r31, 0x01	; 1
    1fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe8:	8c 91       	ld	r24, X
    1fea:	8d 7f       	andi	r24, 0xFD	; 253
    1fec:	8c 93       	st	X, r24
    1fee:	02 80       	ldd	r0, Z+2	; 0x02
    1ff0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	81 60       	ori	r24, 0x01	; 1
    1ff8:	80 83       	st	Z, r24
    1ffa:	08 95       	ret

00001ffc <TIM3_CLK_Configuration>:
    1ffc:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <TIM16_descripter+0x18>
    2000:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <TIM16_descripter+0x19>
    2004:	20 81       	ld	r18, Z
    2006:	20 81       	ld	r18, Z
    2008:	dc 01       	movw	r26, r24
    200a:	12 96       	adiw	r26, 0x02	; 2
    200c:	8c 91       	ld	r24, X
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	71 f1       	breq	.+92     	; 0x206e <TIM3_CLK_Configuration+0x72>
    2012:	28 f4       	brcc	.+10     	; 0x201e <TIM3_CLK_Configuration+0x22>
    2014:	88 23       	and	r24, r24
    2016:	49 f0       	breq	.+18     	; 0x202a <TIM3_CLK_Configuration+0x2e>
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	c1 f0       	breq	.+48     	; 0x204c <TIM3_CLK_Configuration+0x50>
    201c:	08 95       	ret
    201e:	85 30       	cpi	r24, 0x05	; 5
    2020:	b9 f1       	breq	.+110    	; 0x2090 <TIM3_CLK_Configuration+0x94>
    2022:	86 30       	cpi	r24, 0x06	; 6
    2024:	09 f4       	brne	.+2      	; 0x2028 <TIM3_CLK_Configuration+0x2c>
    2026:	45 c0       	rjmp	.+138    	; 0x20b2 <TIM3_CLK_Configuration+0xb6>
    2028:	08 95       	ret
    202a:	80 81       	ld	r24, Z
    202c:	8b 7f       	andi	r24, 0xFB	; 251
    202e:	80 83       	st	Z, r24
    2030:	e8 e4       	ldi	r30, 0x48	; 72
    2032:	f1 e0       	ldi	r31, 0x01	; 1
    2034:	a0 8d       	ldd	r26, Z+24	; 0x18
    2036:	b1 8d       	ldd	r27, Z+25	; 0x19
    2038:	8c 91       	ld	r24, X
    203a:	8d 7f       	andi	r24, 0xFD	; 253
    203c:	8c 93       	st	X, r24
    203e:	00 8c       	ldd	r0, Z+24	; 0x18
    2040:	f1 8d       	ldd	r31, Z+25	; 0x19
    2042:	e0 2d       	mov	r30, r0
    2044:	80 81       	ld	r24, Z
    2046:	81 60       	ori	r24, 0x01	; 1
    2048:	80 83       	st	Z, r24
    204a:	08 95       	ret
    204c:	80 81       	ld	r24, Z
    204e:	8b 7f       	andi	r24, 0xFB	; 251
    2050:	80 83       	st	Z, r24
    2052:	e8 e4       	ldi	r30, 0x48	; 72
    2054:	f1 e0       	ldi	r31, 0x01	; 1
    2056:	a0 8d       	ldd	r26, Z+24	; 0x18
    2058:	b1 8d       	ldd	r27, Z+25	; 0x19
    205a:	8c 91       	ld	r24, X
    205c:	82 60       	ori	r24, 0x02	; 2
    205e:	8c 93       	st	X, r24
    2060:	00 8c       	ldd	r0, Z+24	; 0x18
    2062:	f1 8d       	ldd	r31, Z+25	; 0x19
    2064:	e0 2d       	mov	r30, r0
    2066:	80 81       	ld	r24, Z
    2068:	8e 7f       	andi	r24, 0xFE	; 254
    206a:	80 83       	st	Z, r24
    206c:	08 95       	ret
    206e:	80 81       	ld	r24, Z
    2070:	8b 7f       	andi	r24, 0xFB	; 251
    2072:	80 83       	st	Z, r24
    2074:	e8 e4       	ldi	r30, 0x48	; 72
    2076:	f1 e0       	ldi	r31, 0x01	; 1
    2078:	a0 8d       	ldd	r26, Z+24	; 0x18
    207a:	b1 8d       	ldd	r27, Z+25	; 0x19
    207c:	8c 91       	ld	r24, X
    207e:	82 60       	ori	r24, 0x02	; 2
    2080:	8c 93       	st	X, r24
    2082:	00 8c       	ldd	r0, Z+24	; 0x18
    2084:	f1 8d       	ldd	r31, Z+25	; 0x19
    2086:	e0 2d       	mov	r30, r0
    2088:	80 81       	ld	r24, Z
    208a:	81 60       	ori	r24, 0x01	; 1
    208c:	80 83       	st	Z, r24
    208e:	08 95       	ret
    2090:	80 81       	ld	r24, Z
    2092:	84 60       	ori	r24, 0x04	; 4
    2094:	80 83       	st	Z, r24
    2096:	e8 e4       	ldi	r30, 0x48	; 72
    2098:	f1 e0       	ldi	r31, 0x01	; 1
    209a:	a0 8d       	ldd	r26, Z+24	; 0x18
    209c:	b1 8d       	ldd	r27, Z+25	; 0x19
    209e:	8c 91       	ld	r24, X
    20a0:	8d 7f       	andi	r24, 0xFD	; 253
    20a2:	8c 93       	st	X, r24
    20a4:	00 8c       	ldd	r0, Z+24	; 0x18
    20a6:	f1 8d       	ldd	r31, Z+25	; 0x19
    20a8:	e0 2d       	mov	r30, r0
    20aa:	80 81       	ld	r24, Z
    20ac:	8e 7f       	andi	r24, 0xFE	; 254
    20ae:	80 83       	st	Z, r24
    20b0:	08 95       	ret
    20b2:	80 81       	ld	r24, Z
    20b4:	84 60       	ori	r24, 0x04	; 4
    20b6:	80 83       	st	Z, r24
    20b8:	e8 e4       	ldi	r30, 0x48	; 72
    20ba:	f1 e0       	ldi	r31, 0x01	; 1
    20bc:	a0 8d       	ldd	r26, Z+24	; 0x18
    20be:	b1 8d       	ldd	r27, Z+25	; 0x19
    20c0:	8c 91       	ld	r24, X
    20c2:	8d 7f       	andi	r24, 0xFD	; 253
    20c4:	8c 93       	st	X, r24
    20c6:	00 8c       	ldd	r0, Z+24	; 0x18
    20c8:	f1 8d       	ldd	r31, Z+25	; 0x19
    20ca:	e0 2d       	mov	r30, r0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	80 83       	st	Z, r24
    20d2:	08 95       	ret

000020d4 <TIM16_OC_Start>:
    20d4:	fc 01       	movw	r30, r24
    20d6:	90 81       	ld	r25, Z
    20d8:	91 30       	cpi	r25, 0x01	; 1
    20da:	19 f0       	breq	.+6      	; 0x20e2 <TIM16_OC_Start+0xe>
    20dc:	93 30       	cpi	r25, 0x03	; 3
    20de:	29 f0       	breq	.+10     	; 0x20ea <TIM16_OC_Start+0x16>
    20e0:	08 c0       	rjmp	.+16     	; 0x20f2 <TIM16_OC_Start+0x1e>
    20e2:	cf 01       	movw	r24, r30
    20e4:	1f df       	rcall	.-450    	; 0x1f24 <TIM1_CLK_Configuration>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	08 95       	ret
    20ea:	cf 01       	movw	r24, r30
    20ec:	87 df       	rcall	.-242    	; 0x1ffc <TIM3_CLK_Configuration>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	08 95       	ret
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	08 95       	ret

000020f6 <TIM0_OVF_ElapsedCallback>:
    20f6:	08 95       	ret

000020f8 <TIM0_OVF_IRQHandler>:
    20f8:	fe cf       	rjmp	.-4      	; 0x20f6 <TIM0_OVF_ElapsedCallback>
    20fa:	08 95       	ret

000020fc <TIM2_OVF_ElapsedCallback>:
    20fc:	08 95       	ret

000020fe <TIM2_OVF_IRQHandler>:
    20fe:	fe cf       	rjmp	.-4      	; 0x20fc <TIM2_OVF_ElapsedCallback>
    2100:	08 95       	ret

00002102 <TIM0_OC_ElapsedCallback>:
{
	UNUSED(htim);
}

__attribute__((weak)) void TIM0_OC_ElapsedCallback(TIM8_HandleTypeDef *htim)
{
    2102:	08 95       	ret

00002104 <TIM0_OC_IRQHandler>:
	TIM3_OVF_ElapsedCallback(htim);
}

void TIM0_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM0_OC_ElapsedCallback(htim);	
    2104:	fe cf       	rjmp	.-4      	; 0x2102 <TIM0_OC_ElapsedCallback>
    2106:	08 95       	ret

00002108 <TIM2_OC_ElapsedCallback>:
{
	UNUSED(htim);
}

__attribute__((weak)) void TIM2_OC_ElapsedCallback(TIM8_HandleTypeDef *htim)
{
    2108:	08 95       	ret

0000210a <TIM2_OC_IRQHandler>:
	TIM0_OC_ElapsedCallback(htim);	
}

void TIM2_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM2_OC_ElapsedCallback(htim);
    210a:	fe cf       	rjmp	.-4      	; 0x2108 <TIM2_OC_ElapsedCallback>
    210c:	08 95       	ret

0000210e <UART_Init>:
{
	UNUSED(huart);
}

__attribute__((weak)) void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    210e:	cf 92       	push	r12
    2110:	df 92       	push	r13
    2112:	ef 92       	push	r14
    2114:	ff 92       	push	r15
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	fc 01       	movw	r30, r24
    2120:	c0 81       	ld	r28, Z
    2122:	d0 e0       	ldi	r29, 0x00	; 0
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	09 f4       	brne	.+2      	; 0x212a <UART_Init+0x1c>
    2128:	e3 c1       	rjmp	.+966    	; 0x24f0 <UART_Init+0x3e2>
    212a:	8c 01       	movw	r16, r24
    212c:	81 85       	ldd	r24, Z+9	; 0x09
    212e:	88 23       	and	r24, r24
    2130:	21 f0       	breq	.+8      	; 0x213a <UART_Init+0x2c>
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	09 f4       	brne	.+2      	; 0x2138 <UART_Init+0x2a>
    2136:	41 c0       	rjmp	.+130    	; 0x21ba <UART_Init+0xac>
    2138:	7b c0       	rjmp	.+246    	; 0x2230 <UART_Init+0x122>
    213a:	81 81       	ldd	r24, Z+1	; 0x01
    213c:	92 81       	ldd	r25, Z+2	; 0x02
    213e:	a3 81       	ldd	r26, Z+3	; 0x03
    2140:	b4 81       	ldd	r27, Z+4	; 0x04
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	aa 1f       	adc	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	aa 1f       	adc	r26, r26
    2150:	bb 1f       	adc	r27, r27
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	88 1f       	adc	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	66 0f       	add	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	d6 d3       	rcall	.+1964   	; 0x2914 <__floatunsisf>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	74 e2       	ldi	r23, 0x24	; 36
    2170:	84 e7       	ldi	r24, 0x74	; 116
    2172:	9b e4       	ldi	r25, 0x4B	; 75
    2174:	3b d3       	rcall	.+1654   	; 0x27ec <__divsf3>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	d1 d2       	rcall	.+1442   	; 0x2722 <__subsf3>
    2180:	9d d3       	rcall	.+1850   	; 0x28bc <__fixunssfsi>
    2182:	fe 01       	movw	r30, r28
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	ec 0f       	add	r30, r28
    218a:	fd 1f       	adc	r31, r29
    218c:	ee 0f       	add	r30, r30
    218e:	ff 1f       	adc	r31, r31
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	ec 57       	subi	r30, 0x7C	; 124
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	a0 85       	ldd	r26, Z+8	; 0x08
    219a:	b1 85       	ldd	r27, Z+9	; 0x09
    219c:	c7 2e       	mov	r12, r23
    219e:	d8 2e       	mov	r13, r24
    21a0:	e9 2e       	mov	r14, r25
    21a2:	ff 24       	eor	r15, r15
    21a4:	cc 92       	st	X, r12
    21a6:	a2 85       	ldd	r26, Z+10	; 0x0a
    21a8:	b3 85       	ldd	r27, Z+11	; 0x0b
    21aa:	6c 93       	st	X, r22
    21ac:	02 80       	ldd	r0, Z+2	; 0x02
    21ae:	f3 81       	ldd	r31, Z+3	; 0x03
    21b0:	e0 2d       	mov	r30, r0
    21b2:	80 81       	ld	r24, Z
    21b4:	8d 7f       	andi	r24, 0xFD	; 253
    21b6:	80 83       	st	Z, r24
    21b8:	3b c0       	rjmp	.+118    	; 0x2230 <UART_Init+0x122>
    21ba:	81 81       	ldd	r24, Z+1	; 0x01
    21bc:	92 81       	ldd	r25, Z+2	; 0x02
    21be:	a3 81       	ldd	r26, Z+3	; 0x03
    21c0:	b4 81       	ldd	r27, Z+4	; 0x04
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	aa 1f       	adc	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	aa 1f       	adc	r26, r26
    21d0:	bb 1f       	adc	r27, r27
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	66 0f       	add	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	9a d3       	rcall	.+1844   	; 0x2914 <__floatunsisf>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	74 e2       	ldi	r23, 0x24	; 36
    21e8:	84 e7       	ldi	r24, 0x74	; 116
    21ea:	9b e4       	ldi	r25, 0x4B	; 75
    21ec:	ff d2       	rcall	.+1534   	; 0x27ec <__divsf3>
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	95 d2       	rcall	.+1322   	; 0x2722 <__subsf3>
    21f8:	61 d3       	rcall	.+1730   	; 0x28bc <__fixunssfsi>
    21fa:	fe 01       	movw	r30, r28
    21fc:	ee 0f       	add	r30, r30
    21fe:	ff 1f       	adc	r31, r31
    2200:	ec 0f       	add	r30, r28
    2202:	fd 1f       	adc	r31, r29
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	ee 0f       	add	r30, r30
    220a:	ff 1f       	adc	r31, r31
    220c:	ec 57       	subi	r30, 0x7C	; 124
    220e:	fe 4f       	sbci	r31, 0xFE	; 254
    2210:	a0 85       	ldd	r26, Z+8	; 0x08
    2212:	b1 85       	ldd	r27, Z+9	; 0x09
    2214:	c7 2e       	mov	r12, r23
    2216:	d8 2e       	mov	r13, r24
    2218:	e9 2e       	mov	r14, r25
    221a:	ff 24       	eor	r15, r15
    221c:	cc 92       	st	X, r12
    221e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2220:	b3 85       	ldd	r27, Z+11	; 0x0b
    2222:	6c 93       	st	X, r22
    2224:	02 80       	ldd	r0, Z+2	; 0x02
    2226:	f3 81       	ldd	r31, Z+3	; 0x03
    2228:	e0 2d       	mov	r30, r0
    222a:	80 81       	ld	r24, Z
    222c:	82 60       	ori	r24, 0x02	; 2
    222e:	80 83       	st	Z, r24
    2230:	f8 01       	movw	r30, r16
    2232:	85 81       	ldd	r24, Z+5	; 0x05
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	09 f4       	brne	.+2      	; 0x223a <UART_Init+0x12c>
    2238:	45 c0       	rjmp	.+138    	; 0x22c4 <UART_Init+0x1b6>
    223a:	28 f4       	brcc	.+10     	; 0x2246 <UART_Init+0x138>
    223c:	88 23       	and	r24, r24
    223e:	51 f0       	breq	.+20     	; 0x2254 <UART_Init+0x146>
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	21 f1       	breq	.+72     	; 0x228c <UART_Init+0x17e>
    2244:	92 c0       	rjmp	.+292    	; 0x236a <UART_Init+0x25c>
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	09 f4       	brne	.+2      	; 0x224c <UART_Init+0x13e>
    224a:	58 c0       	rjmp	.+176    	; 0x22fc <UART_Init+0x1ee>
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	09 f4       	brne	.+2      	; 0x2252 <UART_Init+0x144>
    2250:	71 c0       	rjmp	.+226    	; 0x2334 <UART_Init+0x226>
    2252:	8b c0       	rjmp	.+278    	; 0x236a <UART_Init+0x25c>
    2254:	fe 01       	movw	r30, r28
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	ec 0f       	add	r30, r28
    225c:	fd 1f       	adc	r31, r29
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	ec 57       	subi	r30, 0x7C	; 124
    2268:	fe 4f       	sbci	r31, 0xFE	; 254
    226a:	a4 81       	ldd	r26, Z+4	; 0x04
    226c:	b5 81       	ldd	r27, Z+5	; 0x05
    226e:	8c 91       	ld	r24, X
    2270:	8b 7f       	andi	r24, 0xFB	; 251
    2272:	8c 93       	st	X, r24
    2274:	a6 81       	ldd	r26, Z+6	; 0x06
    2276:	b7 81       	ldd	r27, Z+7	; 0x07
    2278:	8c 91       	ld	r24, X
    227a:	84 60       	ori	r24, 0x04	; 4
    227c:	8c 93       	st	X, r24
    227e:	06 80       	ldd	r0, Z+6	; 0x06
    2280:	f7 81       	ldd	r31, Z+7	; 0x07
    2282:	e0 2d       	mov	r30, r0
    2284:	80 81       	ld	r24, Z
    2286:	82 60       	ori	r24, 0x02	; 2
    2288:	80 83       	st	Z, r24
    228a:	6f c0       	rjmp	.+222    	; 0x236a <UART_Init+0x25c>
    228c:	fe 01       	movw	r30, r28
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	ec 0f       	add	r30, r28
    2294:	fd 1f       	adc	r31, r29
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	ec 57       	subi	r30, 0x7C	; 124
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	a4 81       	ldd	r26, Z+4	; 0x04
    22a4:	b5 81       	ldd	r27, Z+5	; 0x05
    22a6:	8c 91       	ld	r24, X
    22a8:	8b 7f       	andi	r24, 0xFB	; 251
    22aa:	8c 93       	st	X, r24
    22ac:	a6 81       	ldd	r26, Z+6	; 0x06
    22ae:	b7 81       	ldd	r27, Z+7	; 0x07
    22b0:	8c 91       	ld	r24, X
    22b2:	8b 7f       	andi	r24, 0xFB	; 251
    22b4:	8c 93       	st	X, r24
    22b6:	06 80       	ldd	r0, Z+6	; 0x06
    22b8:	f7 81       	ldd	r31, Z+7	; 0x07
    22ba:	e0 2d       	mov	r30, r0
    22bc:	80 81       	ld	r24, Z
    22be:	8d 7f       	andi	r24, 0xFD	; 253
    22c0:	80 83       	st	Z, r24
    22c2:	53 c0       	rjmp	.+166    	; 0x236a <UART_Init+0x25c>
    22c4:	fe 01       	movw	r30, r28
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ec 0f       	add	r30, r28
    22cc:	fd 1f       	adc	r31, r29
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ec 57       	subi	r30, 0x7C	; 124
    22d8:	fe 4f       	sbci	r31, 0xFE	; 254
    22da:	a4 81       	ldd	r26, Z+4	; 0x04
    22dc:	b5 81       	ldd	r27, Z+5	; 0x05
    22de:	8c 91       	ld	r24, X
    22e0:	8b 7f       	andi	r24, 0xFB	; 251
    22e2:	8c 93       	st	X, r24
    22e4:	a6 81       	ldd	r26, Z+6	; 0x06
    22e6:	b7 81       	ldd	r27, Z+7	; 0x07
    22e8:	8c 91       	ld	r24, X
    22ea:	8b 7f       	andi	r24, 0xFB	; 251
    22ec:	8c 93       	st	X, r24
    22ee:	06 80       	ldd	r0, Z+6	; 0x06
    22f0:	f7 81       	ldd	r31, Z+7	; 0x07
    22f2:	e0 2d       	mov	r30, r0
    22f4:	80 81       	ld	r24, Z
    22f6:	82 60       	ori	r24, 0x02	; 2
    22f8:	80 83       	st	Z, r24
    22fa:	37 c0       	rjmp	.+110    	; 0x236a <UART_Init+0x25c>
    22fc:	fe 01       	movw	r30, r28
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ec 0f       	add	r30, r28
    2304:	fd 1f       	adc	r31, r29
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ec 57       	subi	r30, 0x7C	; 124
    2310:	fe 4f       	sbci	r31, 0xFE	; 254
    2312:	a4 81       	ldd	r26, Z+4	; 0x04
    2314:	b5 81       	ldd	r27, Z+5	; 0x05
    2316:	8c 91       	ld	r24, X
    2318:	8b 7f       	andi	r24, 0xFB	; 251
    231a:	8c 93       	st	X, r24
    231c:	a6 81       	ldd	r26, Z+6	; 0x06
    231e:	b7 81       	ldd	r27, Z+7	; 0x07
    2320:	8c 91       	ld	r24, X
    2322:	84 60       	ori	r24, 0x04	; 4
    2324:	8c 93       	st	X, r24
    2326:	06 80       	ldd	r0, Z+6	; 0x06
    2328:	f7 81       	ldd	r31, Z+7	; 0x07
    232a:	e0 2d       	mov	r30, r0
    232c:	80 81       	ld	r24, Z
    232e:	8d 7f       	andi	r24, 0xFD	; 253
    2330:	80 83       	st	Z, r24
    2332:	1b c0       	rjmp	.+54     	; 0x236a <UART_Init+0x25c>
    2334:	fe 01       	movw	r30, r28
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	ec 0f       	add	r30, r28
    233c:	fd 1f       	adc	r31, r29
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ec 57       	subi	r30, 0x7C	; 124
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	a4 81       	ldd	r26, Z+4	; 0x04
    234c:	b5 81       	ldd	r27, Z+5	; 0x05
    234e:	8c 91       	ld	r24, X
    2350:	84 60       	ori	r24, 0x04	; 4
    2352:	8c 93       	st	X, r24
    2354:	a6 81       	ldd	r26, Z+6	; 0x06
    2356:	b7 81       	ldd	r27, Z+7	; 0x07
    2358:	8c 91       	ld	r24, X
    235a:	84 60       	ori	r24, 0x04	; 4
    235c:	8c 93       	st	X, r24
    235e:	06 80       	ldd	r0, Z+6	; 0x06
    2360:	f7 81       	ldd	r31, Z+7	; 0x07
    2362:	e0 2d       	mov	r30, r0
    2364:	80 81       	ld	r24, Z
    2366:	82 60       	ori	r24, 0x02	; 2
    2368:	80 83       	st	Z, r24
    236a:	f8 01       	movw	r30, r16
    236c:	86 81       	ldd	r24, Z+6	; 0x06
    236e:	88 23       	and	r24, r24
    2370:	19 f0       	breq	.+6      	; 0x2378 <UART_Init+0x26a>
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	99 f0       	breq	.+38     	; 0x239c <UART_Init+0x28e>
    2376:	23 c0       	rjmp	.+70     	; 0x23be <UART_Init+0x2b0>
    2378:	fe 01       	movw	r30, r28
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ec 0f       	add	r30, r28
    2380:	fd 1f       	adc	r31, r29
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ec 57       	subi	r30, 0x7C	; 124
    238c:	fe 4f       	sbci	r31, 0xFE	; 254
    238e:	06 80       	ldd	r0, Z+6	; 0x06
    2390:	f7 81       	ldd	r31, Z+7	; 0x07
    2392:	e0 2d       	mov	r30, r0
    2394:	80 81       	ld	r24, Z
    2396:	8f 7e       	andi	r24, 0xEF	; 239
    2398:	80 83       	st	Z, r24
    239a:	11 c0       	rjmp	.+34     	; 0x23be <UART_Init+0x2b0>
    239c:	fe 01       	movw	r30, r28
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ec 0f       	add	r30, r28
    23a4:	fd 1f       	adc	r31, r29
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ec 57       	subi	r30, 0x7C	; 124
    23b0:	fe 4f       	sbci	r31, 0xFE	; 254
    23b2:	06 80       	ldd	r0, Z+6	; 0x06
    23b4:	f7 81       	ldd	r31, Z+7	; 0x07
    23b6:	e0 2d       	mov	r30, r0
    23b8:	80 81       	ld	r24, Z
    23ba:	80 61       	ori	r24, 0x10	; 16
    23bc:	80 83       	st	Z, r24
    23be:	f8 01       	movw	r30, r16
    23c0:	87 81       	ldd	r24, Z+7	; 0x07
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	d9 f0       	breq	.+54     	; 0x23fc <UART_Init+0x2ee>
    23c6:	18 f0       	brcs	.+6      	; 0x23ce <UART_Init+0x2c0>
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	79 f1       	breq	.+94     	; 0x242a <UART_Init+0x31c>
    23cc:	44 c0       	rjmp	.+136    	; 0x2456 <UART_Init+0x348>
    23ce:	fe 01       	movw	r30, r28
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	ec 0f       	add	r30, r28
    23d6:	fd 1f       	adc	r31, r29
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	ec 57       	subi	r30, 0x7C	; 124
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	a6 81       	ldd	r26, Z+6	; 0x06
    23e6:	b7 81       	ldd	r27, Z+7	; 0x07
    23e8:	8c 91       	ld	r24, X
    23ea:	8f 7b       	andi	r24, 0xBF	; 191
    23ec:	8c 93       	st	X, r24
    23ee:	06 80       	ldd	r0, Z+6	; 0x06
    23f0:	f7 81       	ldd	r31, Z+7	; 0x07
    23f2:	e0 2d       	mov	r30, r0
    23f4:	80 81       	ld	r24, Z
    23f6:	8f 7d       	andi	r24, 0xDF	; 223
    23f8:	80 83       	st	Z, r24
    23fa:	2d c0       	rjmp	.+90     	; 0x2456 <UART_Init+0x348>
    23fc:	fe 01       	movw	r30, r28
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	ec 0f       	add	r30, r28
    2404:	fd 1f       	adc	r31, r29
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ec 57       	subi	r30, 0x7C	; 124
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	a6 81       	ldd	r26, Z+6	; 0x06
    2414:	b7 81       	ldd	r27, Z+7	; 0x07
    2416:	8c 91       	ld	r24, X
    2418:	80 64       	ori	r24, 0x40	; 64
    241a:	8c 93       	st	X, r24
    241c:	06 80       	ldd	r0, Z+6	; 0x06
    241e:	f7 81       	ldd	r31, Z+7	; 0x07
    2420:	e0 2d       	mov	r30, r0
    2422:	80 81       	ld	r24, Z
    2424:	8f 7d       	andi	r24, 0xDF	; 223
    2426:	80 83       	st	Z, r24
    2428:	16 c0       	rjmp	.+44     	; 0x2456 <UART_Init+0x348>
    242a:	fe 01       	movw	r30, r28
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	ec 0f       	add	r30, r28
    2432:	fd 1f       	adc	r31, r29
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	ee 0f       	add	r30, r30
    243a:	ff 1f       	adc	r31, r31
    243c:	ec 57       	subi	r30, 0x7C	; 124
    243e:	fe 4f       	sbci	r31, 0xFE	; 254
    2440:	a6 81       	ldd	r26, Z+6	; 0x06
    2442:	b7 81       	ldd	r27, Z+7	; 0x07
    2444:	8c 91       	ld	r24, X
    2446:	80 64       	ori	r24, 0x40	; 64
    2448:	8c 93       	st	X, r24
    244a:	06 80       	ldd	r0, Z+6	; 0x06
    244c:	f7 81       	ldd	r31, Z+7	; 0x07
    244e:	e0 2d       	mov	r30, r0
    2450:	80 81       	ld	r24, Z
    2452:	80 62       	ori	r24, 0x20	; 32
    2454:	80 83       	st	Z, r24
    2456:	f8 01       	movw	r30, r16
    2458:	80 85       	ldd	r24, Z+8	; 0x08
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	b1 f0       	breq	.+44     	; 0x248a <UART_Init+0x37c>
    245e:	18 f0       	brcs	.+6      	; 0x2466 <UART_Init+0x358>
    2460:	82 30       	cpi	r24, 0x02	; 2
    2462:	29 f1       	breq	.+74     	; 0x24ae <UART_Init+0x3a0>
    2464:	47 c0       	rjmp	.+142    	; 0x24f4 <UART_Init+0x3e6>
    2466:	ce 01       	movw	r24, r28
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	c8 0f       	add	r28, r24
    246e:	d9 1f       	adc	r29, r25
    2470:	cc 0f       	add	r28, r28
    2472:	dd 1f       	adc	r29, r29
    2474:	cc 0f       	add	r28, r28
    2476:	dd 1f       	adc	r29, r29
    2478:	cc 57       	subi	r28, 0x7C	; 124
    247a:	de 4f       	sbci	r29, 0xFE	; 254
    247c:	ec 81       	ldd	r30, Y+4	; 0x04
    247e:	fd 81       	ldd	r31, Y+5	; 0x05
    2480:	80 81       	ld	r24, Z
    2482:	80 61       	ori	r24, 0x10	; 16
    2484:	80 83       	st	Z, r24
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	36 c0       	rjmp	.+108    	; 0x24f6 <UART_Init+0x3e8>
    248a:	ce 01       	movw	r24, r28
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	c8 0f       	add	r28, r24
    2492:	d9 1f       	adc	r29, r25
    2494:	cc 0f       	add	r28, r28
    2496:	dd 1f       	adc	r29, r29
    2498:	cc 0f       	add	r28, r28
    249a:	dd 1f       	adc	r29, r29
    249c:	cc 57       	subi	r28, 0x7C	; 124
    249e:	de 4f       	sbci	r29, 0xFE	; 254
    24a0:	ec 81       	ldd	r30, Y+4	; 0x04
    24a2:	fd 81       	ldd	r31, Y+5	; 0x05
    24a4:	80 81       	ld	r24, Z
    24a6:	88 60       	ori	r24, 0x08	; 8
    24a8:	80 83       	st	Z, r24
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	24 c0       	rjmp	.+72     	; 0x24f6 <UART_Init+0x3e8>
    24ae:	9e 01       	movw	r18, r28
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	f9 01       	movw	r30, r18
    24b6:	ec 0f       	add	r30, r28
    24b8:	fd 1f       	adc	r31, r29
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	ee 0f       	add	r30, r30
    24c0:	ff 1f       	adc	r31, r31
    24c2:	ec 57       	subi	r30, 0x7C	; 124
    24c4:	fe 4f       	sbci	r31, 0xFE	; 254
    24c6:	04 80       	ldd	r0, Z+4	; 0x04
    24c8:	f5 81       	ldd	r31, Z+5	; 0x05
    24ca:	e0 2d       	mov	r30, r0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 60       	ori	r24, 0x08	; 8
    24d0:	80 83       	st	Z, r24
    24d2:	c2 0f       	add	r28, r18
    24d4:	d3 1f       	adc	r29, r19
    24d6:	cc 0f       	add	r28, r28
    24d8:	dd 1f       	adc	r29, r29
    24da:	cc 0f       	add	r28, r28
    24dc:	dd 1f       	adc	r29, r29
    24de:	cc 57       	subi	r28, 0x7C	; 124
    24e0:	de 4f       	sbci	r29, 0xFE	; 254
    24e2:	ec 81       	ldd	r30, Y+4	; 0x04
    24e4:	fd 81       	ldd	r31, Y+5	; 0x05
    24e6:	80 81       	ld	r24, Z
    24e8:	80 61       	ori	r24, 0x10	; 16
    24ea:	80 83       	st	Z, r24
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <UART_Init+0x3e8>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <UART_Init+0x3e8>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	08 95       	ret

00002508 <UART_Transmit>:
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	cf 92       	push	r12
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	8c 01       	movw	r16, r24
    251e:	ec 01       	movw	r28, r24
    2520:	88 81       	ld	r24, Y
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	1e 8a       	std	Y+22, r1	; 0x16
    2526:	5f 87       	std	Y+15, r21	; 0x0f
    2528:	4e 87       	std	Y+14, r20	; 0x0e
    252a:	5b 8b       	std	Y+19, r21	; 0x13
    252c:	4a 8b       	std	Y+18, r20	; 0x12
    252e:	2d 81       	ldd	r18, Y+5	; 0x05
    2530:	24 30       	cpi	r18, 0x04	; 4
    2532:	41 f4       	brne	.+16     	; 0x2544 <UART_Transmit+0x3c>
    2534:	2f 81       	ldd	r18, Y+7	; 0x07
    2536:	21 11       	cpse	r18, r1
    2538:	08 c0       	rjmp	.+16     	; 0x254a <UART_Transmit+0x42>
    253a:	e6 2e       	mov	r14, r22
    253c:	f7 2e       	mov	r15, r23
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	05 c0       	rjmp	.+10     	; 0x254e <UART_Transmit+0x46>
    2544:	e1 2c       	mov	r14, r1
    2546:	f1 2c       	mov	r15, r1
    2548:	02 c0       	rjmp	.+4      	; 0x254e <UART_Transmit+0x46>
    254a:	e1 2c       	mov	r14, r1
    254c:	f1 2c       	mov	r15, r1
    254e:	45 2b       	or	r20, r21
    2550:	a9 f1       	breq	.+106    	; 0x25bc <UART_Transmit+0xb4>
    2552:	a6 2e       	mov	r10, r22
    2554:	b7 2e       	mov	r11, r23
    2556:	d7 01       	movw	r26, r14
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	bc 01       	movw	r22, r24
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	68 0f       	add	r22, r24
    2564:	79 1f       	adc	r23, r25
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	6c 57       	subi	r22, 0x7C	; 124
    2570:	7e 4f       	sbci	r23, 0xFE	; 254
    2572:	6b 01       	movw	r12, r22
    2574:	d2 e0       	ldi	r29, 0x02	; 2
    2576:	cd 0e       	add	r12, r29
    2578:	d1 1c       	adc	r13, r1
    257a:	e6 01       	movw	r28, r12
    257c:	e8 81       	ld	r30, Y
    257e:	f9 81       	ldd	r31, Y+1	; 0x01
    2580:	90 81       	ld	r25, Z
    2582:	95 ff       	sbrs	r25, 5
    2584:	fd cf       	rjmp	.-6      	; 0x2580 <UART_Transmit+0x78>
    2586:	e1 14       	cp	r14, r1
    2588:	f1 04       	cpc	r15, r1
    258a:	39 f4       	brne	.+14     	; 0x259a <UART_Transmit+0x92>
    258c:	eb 01       	movw	r28, r22
    258e:	e8 81       	ld	r30, Y
    2590:	f9 81       	ldd	r31, Y+1	; 0x01
    2592:	e5 01       	movw	r28, r10
    2594:	88 81       	ld	r24, Y
    2596:	80 83       	st	Z, r24
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <UART_Transmit+0x9c>
    259a:	eb 01       	movw	r28, r22
    259c:	e8 81       	ld	r30, Y
    259e:	f9 81       	ldd	r31, Y+1	; 0x01
    25a0:	8c 91       	ld	r24, X
    25a2:	80 83       	st	Z, r24
    25a4:	2f 5f       	subi	r18, 0xFF	; 255
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	df ef       	ldi	r29, 0xFF	; 255
    25aa:	ad 1a       	sub	r10, r29
    25ac:	bd 0a       	sbc	r11, r29
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	f8 01       	movw	r30, r16
    25b2:	42 89       	ldd	r20, Z+18	; 0x12
    25b4:	53 89       	ldd	r21, Z+19	; 0x13
    25b6:	24 17       	cp	r18, r20
    25b8:	35 07       	cpc	r19, r21
    25ba:	f8 f2       	brcs	.-66     	; 0x257a <UART_Transmit+0x72>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	df 90       	pop	r13
    25cc:	cf 90       	pop	r12
    25ce:	bf 90       	pop	r11
    25d0:	af 90       	pop	r10
    25d2:	08 95       	ret

000025d4 <UART_Receive>:
    25d4:	af 92       	push	r10
    25d6:	bf 92       	push	r11
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	8c 01       	movw	r16, r24
    25ea:	ec 01       	movw	r28, r24
    25ec:	88 81       	ld	r24, Y
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	1e 8a       	std	Y+22, r1	; 0x16
    25f2:	59 8b       	std	Y+17, r21	; 0x11
    25f4:	48 8b       	std	Y+16, r20	; 0x10
    25f6:	5d 8b       	std	Y+21, r21	; 0x15
    25f8:	4c 8b       	std	Y+20, r20	; 0x14
    25fa:	2d 81       	ldd	r18, Y+5	; 0x05
    25fc:	24 30       	cpi	r18, 0x04	; 4
    25fe:	41 f4       	brne	.+16     	; 0x2610 <UART_Receive+0x3c>
    2600:	2f 81       	ldd	r18, Y+7	; 0x07
    2602:	21 11       	cpse	r18, r1
    2604:	08 c0       	rjmp	.+16     	; 0x2616 <UART_Receive+0x42>
    2606:	e6 2e       	mov	r14, r22
    2608:	f7 2e       	mov	r15, r23
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	05 c0       	rjmp	.+10     	; 0x261a <UART_Receive+0x46>
    2610:	e1 2c       	mov	r14, r1
    2612:	f1 2c       	mov	r15, r1
    2614:	02 c0       	rjmp	.+4      	; 0x261a <UART_Receive+0x46>
    2616:	e1 2c       	mov	r14, r1
    2618:	f1 2c       	mov	r15, r1
    261a:	45 2b       	or	r20, r21
    261c:	d9 f1       	breq	.+118    	; 0x2694 <UART_Receive+0xc0>
    261e:	a6 2e       	mov	r10, r22
    2620:	b7 2e       	mov	r11, r23
    2622:	d7 01       	movw	r26, r14
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	bc 01       	movw	r22, r24
    262a:	66 0f       	add	r22, r22
    262c:	77 1f       	adc	r23, r23
    262e:	68 0f       	add	r22, r24
    2630:	79 1f       	adc	r23, r25
    2632:	66 0f       	add	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	66 0f       	add	r22, r22
    2638:	77 1f       	adc	r23, r23
    263a:	6c 57       	subi	r22, 0x7C	; 124
    263c:	7e 4f       	sbci	r23, 0xFE	; 254
    263e:	6b 01       	movw	r12, r22
    2640:	d2 e0       	ldi	r29, 0x02	; 2
    2642:	cd 0e       	add	r12, r29
    2644:	d1 1c       	adc	r13, r1
    2646:	e6 01       	movw	r28, r12
    2648:	e8 81       	ld	r30, Y
    264a:	f9 81       	ldd	r31, Y+1	; 0x01
    264c:	90 81       	ld	r25, Z
    264e:	99 23       	and	r25, r25
    2650:	1c f4       	brge	.+6      	; 0x2658 <UART_Receive+0x84>
    2652:	90 81       	ld	r25, Z
    2654:	95 ff       	sbrs	r25, 5
    2656:	fa cf       	rjmp	.-12     	; 0x264c <UART_Receive+0x78>
    2658:	e1 14       	cp	r14, r1
    265a:	f1 04       	cpc	r15, r1
    265c:	39 f4       	brne	.+14     	; 0x266c <UART_Receive+0x98>
    265e:	eb 01       	movw	r28, r22
    2660:	e8 81       	ld	r30, Y
    2662:	f9 81       	ldd	r31, Y+1	; 0x01
    2664:	80 81       	ld	r24, Z
    2666:	f5 01       	movw	r30, r10
    2668:	80 83       	st	Z, r24
    266a:	08 c0       	rjmp	.+16     	; 0x267c <UART_Receive+0xa8>
    266c:	eb 01       	movw	r28, r22
    266e:	e8 81       	ld	r30, Y
    2670:	f9 81       	ldd	r31, Y+1	; 0x01
    2672:	20 81       	ld	r18, Z
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	11 96       	adiw	r26, 0x01	; 1
    2678:	3c 93       	st	X, r19
    267a:	2e 93       	st	-X, r18
    267c:	4f 5f       	subi	r20, 0xFF	; 255
    267e:	5f 4f       	sbci	r21, 0xFF	; 255
    2680:	df ef       	ldi	r29, 0xFF	; 255
    2682:	ad 1a       	sub	r10, r29
    2684:	bd 0a       	sbc	r11, r29
    2686:	12 96       	adiw	r26, 0x02	; 2
    2688:	f8 01       	movw	r30, r16
    268a:	84 89       	ldd	r24, Z+20	; 0x14
    268c:	95 89       	ldd	r25, Z+21	; 0x15
    268e:	48 17       	cp	r20, r24
    2690:	59 07       	cpc	r21, r25
    2692:	c8 f2       	brcs	.-78     	; 0x2646 <UART_Receive+0x72>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
    26a6:	bf 90       	pop	r11
    26a8:	af 90       	pop	r10
    26aa:	08 95       	ret

000026ac <UART_Receive_IT>:
    26ac:	fc 01       	movw	r30, r24
    26ae:	20 81       	ld	r18, Z
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	75 87       	std	Z+13, r23	; 0x0d
    26b4:	64 87       	std	Z+12, r22	; 0x0c
    26b6:	51 8b       	std	Z+17, r21	; 0x11
    26b8:	40 8b       	std	Z+16, r20	; 0x10
    26ba:	55 8b       	std	Z+21, r21	; 0x15
    26bc:	44 8b       	std	Z+20, r20	; 0x14
    26be:	f9 01       	movw	r30, r18
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	e2 0f       	add	r30, r18
    26c6:	f3 1f       	adc	r31, r19
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	ec 57       	subi	r30, 0x7C	; 124
    26d2:	fe 4f       	sbci	r31, 0xFE	; 254
    26d4:	04 80       	ldd	r0, Z+4	; 0x04
    26d6:	f5 81       	ldd	r31, Z+5	; 0x05
    26d8:	e0 2d       	mov	r30, r0
    26da:	80 81       	ld	r24, Z
    26dc:	80 68       	ori	r24, 0x80	; 128
    26de:	80 83       	st	Z, r24
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	08 95       	ret

000026e4 <UART_TxIRQHandler>:
    26e4:	50 c9       	rjmp	.-3424   	; 0x1986 <UART_TxCpltCallback>
    26e6:	08 95       	ret

000026e8 <UART_RxIRQHandler>:
{
	UART_TxCpltCallback(huart);
}

void UART_RxIRQHandler(UART_HandleTypeDef *huart)
{
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	ec 01       	movw	r28, r24
	UART_Receive(huart, huart->pRxBuffPtr, huart->RxXferSize, 100);
    26f2:	48 89       	ldd	r20, Y+16	; 0x10
    26f4:	59 89       	ldd	r21, Y+17	; 0x11
    26f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    26f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    26fa:	04 e6       	ldi	r16, 0x64	; 100
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	68 df       	rcall	.-304    	; 0x25d4 <UART_Receive>
	UART_RxCpltCallback(huart);
    2704:	ce 01       	movw	r24, r28
    2706:	40 d9       	rcall	.-3456   	; 0x1988 <UART_RxCpltCallback>
}
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	08 95       	ret

00002712 <main>:
#include "main.h"


int main(void)
{
    hwInit();
    2712:	57 d9       	rcall	.-3410   	; 0x19c2 <hwInit>
	apInit();
    2714:	0e 94 76 00 	call	0xec	; 0xec <apInit>
	
	apMain();
    2718:	0e 94 78 00 	call	0xf0	; 0xf0 <apMain>
}
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	08 95       	ret

00002722 <__subsf3>:
    2722:	50 58       	subi	r21, 0x80	; 128

00002724 <__addsf3>:
    2724:	bb 27       	eor	r27, r27
    2726:	aa 27       	eor	r26, r26
    2728:	0e d0       	rcall	.+28     	; 0x2746 <__addsf3x>
    272a:	48 c1       	rjmp	.+656    	; 0x29bc <__fp_round>
    272c:	39 d1       	rcall	.+626    	; 0x29a0 <__fp_pscA>
    272e:	30 f0       	brcs	.+12     	; 0x273c <__addsf3+0x18>
    2730:	3e d1       	rcall	.+636    	; 0x29ae <__fp_pscB>
    2732:	20 f0       	brcs	.+8      	; 0x273c <__addsf3+0x18>
    2734:	31 f4       	brne	.+12     	; 0x2742 <__addsf3+0x1e>
    2736:	9f 3f       	cpi	r25, 0xFF	; 255
    2738:	11 f4       	brne	.+4      	; 0x273e <__addsf3+0x1a>
    273a:	1e f4       	brtc	.+6      	; 0x2742 <__addsf3+0x1e>
    273c:	2e c1       	rjmp	.+604    	; 0x299a <__fp_nan>
    273e:	0e f4       	brtc	.+2      	; 0x2742 <__addsf3+0x1e>
    2740:	e0 95       	com	r30
    2742:	e7 fb       	bst	r30, 7
    2744:	24 c1       	rjmp	.+584    	; 0x298e <__fp_inf>

00002746 <__addsf3x>:
    2746:	e9 2f       	mov	r30, r25
    2748:	4a d1       	rcall	.+660    	; 0x29de <__fp_split3>
    274a:	80 f3       	brcs	.-32     	; 0x272c <__addsf3+0x8>
    274c:	ba 17       	cp	r27, r26
    274e:	62 07       	cpc	r22, r18
    2750:	73 07       	cpc	r23, r19
    2752:	84 07       	cpc	r24, r20
    2754:	95 07       	cpc	r25, r21
    2756:	18 f0       	brcs	.+6      	; 0x275e <__addsf3x+0x18>
    2758:	71 f4       	brne	.+28     	; 0x2776 <__addsf3x+0x30>
    275a:	9e f5       	brtc	.+102    	; 0x27c2 <__addsf3x+0x7c>
    275c:	62 c1       	rjmp	.+708    	; 0x2a22 <__fp_zero>
    275e:	0e f4       	brtc	.+2      	; 0x2762 <__addsf3x+0x1c>
    2760:	e0 95       	com	r30
    2762:	0b 2e       	mov	r0, r27
    2764:	ba 2f       	mov	r27, r26
    2766:	a0 2d       	mov	r26, r0
    2768:	0b 01       	movw	r0, r22
    276a:	b9 01       	movw	r22, r18
    276c:	90 01       	movw	r18, r0
    276e:	0c 01       	movw	r0, r24
    2770:	ca 01       	movw	r24, r20
    2772:	a0 01       	movw	r20, r0
    2774:	11 24       	eor	r1, r1
    2776:	ff 27       	eor	r31, r31
    2778:	59 1b       	sub	r21, r25
    277a:	99 f0       	breq	.+38     	; 0x27a2 <__addsf3x+0x5c>
    277c:	59 3f       	cpi	r21, 0xF9	; 249
    277e:	50 f4       	brcc	.+20     	; 0x2794 <__addsf3x+0x4e>
    2780:	50 3e       	cpi	r21, 0xE0	; 224
    2782:	68 f1       	brcs	.+90     	; 0x27de <__addsf3x+0x98>
    2784:	1a 16       	cp	r1, r26
    2786:	f0 40       	sbci	r31, 0x00	; 0
    2788:	a2 2f       	mov	r26, r18
    278a:	23 2f       	mov	r18, r19
    278c:	34 2f       	mov	r19, r20
    278e:	44 27       	eor	r20, r20
    2790:	58 5f       	subi	r21, 0xF8	; 248
    2792:	f3 cf       	rjmp	.-26     	; 0x277a <__addsf3x+0x34>
    2794:	46 95       	lsr	r20
    2796:	37 95       	ror	r19
    2798:	27 95       	ror	r18
    279a:	a7 95       	ror	r26
    279c:	f0 40       	sbci	r31, 0x00	; 0
    279e:	53 95       	inc	r21
    27a0:	c9 f7       	brne	.-14     	; 0x2794 <__addsf3x+0x4e>
    27a2:	7e f4       	brtc	.+30     	; 0x27c2 <__addsf3x+0x7c>
    27a4:	1f 16       	cp	r1, r31
    27a6:	ba 0b       	sbc	r27, r26
    27a8:	62 0b       	sbc	r22, r18
    27aa:	73 0b       	sbc	r23, r19
    27ac:	84 0b       	sbc	r24, r20
    27ae:	ba f0       	brmi	.+46     	; 0x27de <__addsf3x+0x98>
    27b0:	91 50       	subi	r25, 0x01	; 1
    27b2:	a1 f0       	breq	.+40     	; 0x27dc <__addsf3x+0x96>
    27b4:	ff 0f       	add	r31, r31
    27b6:	bb 1f       	adc	r27, r27
    27b8:	66 1f       	adc	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	88 1f       	adc	r24, r24
    27be:	c2 f7       	brpl	.-16     	; 0x27b0 <__addsf3x+0x6a>
    27c0:	0e c0       	rjmp	.+28     	; 0x27de <__addsf3x+0x98>
    27c2:	ba 0f       	add	r27, r26
    27c4:	62 1f       	adc	r22, r18
    27c6:	73 1f       	adc	r23, r19
    27c8:	84 1f       	adc	r24, r20
    27ca:	48 f4       	brcc	.+18     	; 0x27de <__addsf3x+0x98>
    27cc:	87 95       	ror	r24
    27ce:	77 95       	ror	r23
    27d0:	67 95       	ror	r22
    27d2:	b7 95       	ror	r27
    27d4:	f7 95       	ror	r31
    27d6:	9e 3f       	cpi	r25, 0xFE	; 254
    27d8:	08 f0       	brcs	.+2      	; 0x27dc <__addsf3x+0x96>
    27da:	b3 cf       	rjmp	.-154    	; 0x2742 <__addsf3+0x1e>
    27dc:	93 95       	inc	r25
    27de:	88 0f       	add	r24, r24
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <__addsf3x+0x9e>
    27e2:	99 27       	eor	r25, r25
    27e4:	ee 0f       	add	r30, r30
    27e6:	97 95       	ror	r25
    27e8:	87 95       	ror	r24
    27ea:	08 95       	ret

000027ec <__divsf3>:
    27ec:	0c d0       	rcall	.+24     	; 0x2806 <__divsf3x>
    27ee:	e6 c0       	rjmp	.+460    	; 0x29bc <__fp_round>
    27f0:	de d0       	rcall	.+444    	; 0x29ae <__fp_pscB>
    27f2:	40 f0       	brcs	.+16     	; 0x2804 <__divsf3+0x18>
    27f4:	d5 d0       	rcall	.+426    	; 0x29a0 <__fp_pscA>
    27f6:	30 f0       	brcs	.+12     	; 0x2804 <__divsf3+0x18>
    27f8:	21 f4       	brne	.+8      	; 0x2802 <__divsf3+0x16>
    27fa:	5f 3f       	cpi	r21, 0xFF	; 255
    27fc:	19 f0       	breq	.+6      	; 0x2804 <__divsf3+0x18>
    27fe:	c7 c0       	rjmp	.+398    	; 0x298e <__fp_inf>
    2800:	51 11       	cpse	r21, r1
    2802:	10 c1       	rjmp	.+544    	; 0x2a24 <__fp_szero>
    2804:	ca c0       	rjmp	.+404    	; 0x299a <__fp_nan>

00002806 <__divsf3x>:
    2806:	eb d0       	rcall	.+470    	; 0x29de <__fp_split3>
    2808:	98 f3       	brcs	.-26     	; 0x27f0 <__divsf3+0x4>

0000280a <__divsf3_pse>:
    280a:	99 23       	and	r25, r25
    280c:	c9 f3       	breq	.-14     	; 0x2800 <__divsf3+0x14>
    280e:	55 23       	and	r21, r21
    2810:	b1 f3       	breq	.-20     	; 0x27fe <__divsf3+0x12>
    2812:	95 1b       	sub	r25, r21
    2814:	55 0b       	sbc	r21, r21
    2816:	bb 27       	eor	r27, r27
    2818:	aa 27       	eor	r26, r26
    281a:	62 17       	cp	r22, r18
    281c:	73 07       	cpc	r23, r19
    281e:	84 07       	cpc	r24, r20
    2820:	38 f0       	brcs	.+14     	; 0x2830 <__divsf3_pse+0x26>
    2822:	9f 5f       	subi	r25, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255
    2826:	22 0f       	add	r18, r18
    2828:	33 1f       	adc	r19, r19
    282a:	44 1f       	adc	r20, r20
    282c:	aa 1f       	adc	r26, r26
    282e:	a9 f3       	breq	.-22     	; 0x281a <__divsf3_pse+0x10>
    2830:	33 d0       	rcall	.+102    	; 0x2898 <__divsf3_pse+0x8e>
    2832:	0e 2e       	mov	r0, r30
    2834:	3a f0       	brmi	.+14     	; 0x2844 <__divsf3_pse+0x3a>
    2836:	e0 e8       	ldi	r30, 0x80	; 128
    2838:	30 d0       	rcall	.+96     	; 0x289a <__divsf3_pse+0x90>
    283a:	91 50       	subi	r25, 0x01	; 1
    283c:	50 40       	sbci	r21, 0x00	; 0
    283e:	e6 95       	lsr	r30
    2840:	00 1c       	adc	r0, r0
    2842:	ca f7       	brpl	.-14     	; 0x2836 <__divsf3_pse+0x2c>
    2844:	29 d0       	rcall	.+82     	; 0x2898 <__divsf3_pse+0x8e>
    2846:	fe 2f       	mov	r31, r30
    2848:	27 d0       	rcall	.+78     	; 0x2898 <__divsf3_pse+0x8e>
    284a:	66 0f       	add	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	88 1f       	adc	r24, r24
    2850:	bb 1f       	adc	r27, r27
    2852:	26 17       	cp	r18, r22
    2854:	37 07       	cpc	r19, r23
    2856:	48 07       	cpc	r20, r24
    2858:	ab 07       	cpc	r26, r27
    285a:	b0 e8       	ldi	r27, 0x80	; 128
    285c:	09 f0       	breq	.+2      	; 0x2860 <__divsf3_pse+0x56>
    285e:	bb 0b       	sbc	r27, r27
    2860:	80 2d       	mov	r24, r0
    2862:	bf 01       	movw	r22, r30
    2864:	ff 27       	eor	r31, r31
    2866:	93 58       	subi	r25, 0x83	; 131
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	2a f0       	brmi	.+10     	; 0x2876 <__divsf3_pse+0x6c>
    286c:	9e 3f       	cpi	r25, 0xFE	; 254
    286e:	51 05       	cpc	r21, r1
    2870:	68 f0       	brcs	.+26     	; 0x288c <__divsf3_pse+0x82>
    2872:	8d c0       	rjmp	.+282    	; 0x298e <__fp_inf>
    2874:	d7 c0       	rjmp	.+430    	; 0x2a24 <__fp_szero>
    2876:	5f 3f       	cpi	r21, 0xFF	; 255
    2878:	ec f3       	brlt	.-6      	; 0x2874 <__divsf3_pse+0x6a>
    287a:	98 3e       	cpi	r25, 0xE8	; 232
    287c:	dc f3       	brlt	.-10     	; 0x2874 <__divsf3_pse+0x6a>
    287e:	86 95       	lsr	r24
    2880:	77 95       	ror	r23
    2882:	67 95       	ror	r22
    2884:	b7 95       	ror	r27
    2886:	f7 95       	ror	r31
    2888:	9f 5f       	subi	r25, 0xFF	; 255
    288a:	c9 f7       	brne	.-14     	; 0x287e <__divsf3_pse+0x74>
    288c:	88 0f       	add	r24, r24
    288e:	91 1d       	adc	r25, r1
    2890:	96 95       	lsr	r25
    2892:	87 95       	ror	r24
    2894:	97 f9       	bld	r25, 7
    2896:	08 95       	ret
    2898:	e1 e0       	ldi	r30, 0x01	; 1
    289a:	66 0f       	add	r22, r22
    289c:	77 1f       	adc	r23, r23
    289e:	88 1f       	adc	r24, r24
    28a0:	bb 1f       	adc	r27, r27
    28a2:	62 17       	cp	r22, r18
    28a4:	73 07       	cpc	r23, r19
    28a6:	84 07       	cpc	r24, r20
    28a8:	ba 07       	cpc	r27, r26
    28aa:	20 f0       	brcs	.+8      	; 0x28b4 <__divsf3_pse+0xaa>
    28ac:	62 1b       	sub	r22, r18
    28ae:	73 0b       	sbc	r23, r19
    28b0:	84 0b       	sbc	r24, r20
    28b2:	ba 0b       	sbc	r27, r26
    28b4:	ee 1f       	adc	r30, r30
    28b6:	88 f7       	brcc	.-30     	; 0x289a <__divsf3_pse+0x90>
    28b8:	e0 95       	com	r30
    28ba:	08 95       	ret

000028bc <__fixunssfsi>:
    28bc:	98 d0       	rcall	.+304    	; 0x29ee <__fp_splitA>
    28be:	88 f0       	brcs	.+34     	; 0x28e2 <__fixunssfsi+0x26>
    28c0:	9f 57       	subi	r25, 0x7F	; 127
    28c2:	90 f0       	brcs	.+36     	; 0x28e8 <__fixunssfsi+0x2c>
    28c4:	b9 2f       	mov	r27, r25
    28c6:	99 27       	eor	r25, r25
    28c8:	b7 51       	subi	r27, 0x17	; 23
    28ca:	a0 f0       	brcs	.+40     	; 0x28f4 <__fixunssfsi+0x38>
    28cc:	d1 f0       	breq	.+52     	; 0x2902 <__fixunssfsi+0x46>
    28ce:	66 0f       	add	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	1a f0       	brmi	.+6      	; 0x28de <__fixunssfsi+0x22>
    28d8:	ba 95       	dec	r27
    28da:	c9 f7       	brne	.-14     	; 0x28ce <__fixunssfsi+0x12>
    28dc:	12 c0       	rjmp	.+36     	; 0x2902 <__fixunssfsi+0x46>
    28de:	b1 30       	cpi	r27, 0x01	; 1
    28e0:	81 f0       	breq	.+32     	; 0x2902 <__fixunssfsi+0x46>
    28e2:	9f d0       	rcall	.+318    	; 0x2a22 <__fp_zero>
    28e4:	b1 e0       	ldi	r27, 0x01	; 1
    28e6:	08 95       	ret
    28e8:	9c c0       	rjmp	.+312    	; 0x2a22 <__fp_zero>
    28ea:	67 2f       	mov	r22, r23
    28ec:	78 2f       	mov	r23, r24
    28ee:	88 27       	eor	r24, r24
    28f0:	b8 5f       	subi	r27, 0xF8	; 248
    28f2:	39 f0       	breq	.+14     	; 0x2902 <__fixunssfsi+0x46>
    28f4:	b9 3f       	cpi	r27, 0xF9	; 249
    28f6:	cc f3       	brlt	.-14     	; 0x28ea <__fixunssfsi+0x2e>
    28f8:	86 95       	lsr	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b3 95       	inc	r27
    2900:	d9 f7       	brne	.-10     	; 0x28f8 <__fixunssfsi+0x3c>
    2902:	3e f4       	brtc	.+14     	; 0x2912 <__fixunssfsi+0x56>
    2904:	90 95       	com	r25
    2906:	80 95       	com	r24
    2908:	70 95       	com	r23
    290a:	61 95       	neg	r22
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	08 95       	ret

00002914 <__floatunsisf>:
    2914:	e8 94       	clt
    2916:	09 c0       	rjmp	.+18     	; 0x292a <__floatsisf+0x12>

00002918 <__floatsisf>:
    2918:	97 fb       	bst	r25, 7
    291a:	3e f4       	brtc	.+14     	; 0x292a <__floatsisf+0x12>
    291c:	90 95       	com	r25
    291e:	80 95       	com	r24
    2920:	70 95       	com	r23
    2922:	61 95       	neg	r22
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	8f 4f       	sbci	r24, 0xFF	; 255
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	99 23       	and	r25, r25
    292c:	a9 f0       	breq	.+42     	; 0x2958 <__floatsisf+0x40>
    292e:	f9 2f       	mov	r31, r25
    2930:	96 e9       	ldi	r25, 0x96	; 150
    2932:	bb 27       	eor	r27, r27
    2934:	93 95       	inc	r25
    2936:	f6 95       	lsr	r31
    2938:	87 95       	ror	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	b7 95       	ror	r27
    2940:	f1 11       	cpse	r31, r1
    2942:	f8 cf       	rjmp	.-16     	; 0x2934 <__floatsisf+0x1c>
    2944:	fa f4       	brpl	.+62     	; 0x2984 <__floatsisf+0x6c>
    2946:	bb 0f       	add	r27, r27
    2948:	11 f4       	brne	.+4      	; 0x294e <__floatsisf+0x36>
    294a:	60 ff       	sbrs	r22, 0
    294c:	1b c0       	rjmp	.+54     	; 0x2984 <__floatsisf+0x6c>
    294e:	6f 5f       	subi	r22, 0xFF	; 255
    2950:	7f 4f       	sbci	r23, 0xFF	; 255
    2952:	8f 4f       	sbci	r24, 0xFF	; 255
    2954:	9f 4f       	sbci	r25, 0xFF	; 255
    2956:	16 c0       	rjmp	.+44     	; 0x2984 <__floatsisf+0x6c>
    2958:	88 23       	and	r24, r24
    295a:	11 f0       	breq	.+4      	; 0x2960 <__floatsisf+0x48>
    295c:	96 e9       	ldi	r25, 0x96	; 150
    295e:	11 c0       	rjmp	.+34     	; 0x2982 <__floatsisf+0x6a>
    2960:	77 23       	and	r23, r23
    2962:	21 f0       	breq	.+8      	; 0x296c <__floatsisf+0x54>
    2964:	9e e8       	ldi	r25, 0x8E	; 142
    2966:	87 2f       	mov	r24, r23
    2968:	76 2f       	mov	r23, r22
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <__floatsisf+0x5e>
    296c:	66 23       	and	r22, r22
    296e:	71 f0       	breq	.+28     	; 0x298c <__floatsisf+0x74>
    2970:	96 e8       	ldi	r25, 0x86	; 134
    2972:	86 2f       	mov	r24, r22
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	2a f0       	brmi	.+10     	; 0x2984 <__floatsisf+0x6c>
    297a:	9a 95       	dec	r25
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	da f7       	brpl	.-10     	; 0x297a <__floatsisf+0x62>
    2984:	88 0f       	add	r24, r24
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	97 f9       	bld	r25, 7
    298c:	08 95       	ret

0000298e <__fp_inf>:
    298e:	97 f9       	bld	r25, 7
    2990:	9f 67       	ori	r25, 0x7F	; 127
    2992:	80 e8       	ldi	r24, 0x80	; 128
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	08 95       	ret

0000299a <__fp_nan>:
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	80 ec       	ldi	r24, 0xC0	; 192
    299e:	08 95       	ret

000029a0 <__fp_pscA>:
    29a0:	00 24       	eor	r0, r0
    29a2:	0a 94       	dec	r0
    29a4:	16 16       	cp	r1, r22
    29a6:	17 06       	cpc	r1, r23
    29a8:	18 06       	cpc	r1, r24
    29aa:	09 06       	cpc	r0, r25
    29ac:	08 95       	ret

000029ae <__fp_pscB>:
    29ae:	00 24       	eor	r0, r0
    29b0:	0a 94       	dec	r0
    29b2:	12 16       	cp	r1, r18
    29b4:	13 06       	cpc	r1, r19
    29b6:	14 06       	cpc	r1, r20
    29b8:	05 06       	cpc	r0, r21
    29ba:	08 95       	ret

000029bc <__fp_round>:
    29bc:	09 2e       	mov	r0, r25
    29be:	03 94       	inc	r0
    29c0:	00 0c       	add	r0, r0
    29c2:	11 f4       	brne	.+4      	; 0x29c8 <__fp_round+0xc>
    29c4:	88 23       	and	r24, r24
    29c6:	52 f0       	brmi	.+20     	; 0x29dc <__fp_round+0x20>
    29c8:	bb 0f       	add	r27, r27
    29ca:	40 f4       	brcc	.+16     	; 0x29dc <__fp_round+0x20>
    29cc:	bf 2b       	or	r27, r31
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <__fp_round+0x18>
    29d0:	60 ff       	sbrs	r22, 0
    29d2:	04 c0       	rjmp	.+8      	; 0x29dc <__fp_round+0x20>
    29d4:	6f 5f       	subi	r22, 0xFF	; 255
    29d6:	7f 4f       	sbci	r23, 0xFF	; 255
    29d8:	8f 4f       	sbci	r24, 0xFF	; 255
    29da:	9f 4f       	sbci	r25, 0xFF	; 255
    29dc:	08 95       	ret

000029de <__fp_split3>:
    29de:	57 fd       	sbrc	r21, 7
    29e0:	90 58       	subi	r25, 0x80	; 128
    29e2:	44 0f       	add	r20, r20
    29e4:	55 1f       	adc	r21, r21
    29e6:	59 f0       	breq	.+22     	; 0x29fe <__fp_splitA+0x10>
    29e8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ea:	71 f0       	breq	.+28     	; 0x2a08 <__fp_splitA+0x1a>
    29ec:	47 95       	ror	r20

000029ee <__fp_splitA>:
    29ee:	88 0f       	add	r24, r24
    29f0:	97 fb       	bst	r25, 7
    29f2:	99 1f       	adc	r25, r25
    29f4:	61 f0       	breq	.+24     	; 0x2a0e <__fp_splitA+0x20>
    29f6:	9f 3f       	cpi	r25, 0xFF	; 255
    29f8:	79 f0       	breq	.+30     	; 0x2a18 <__fp_splitA+0x2a>
    29fa:	87 95       	ror	r24
    29fc:	08 95       	ret
    29fe:	12 16       	cp	r1, r18
    2a00:	13 06       	cpc	r1, r19
    2a02:	14 06       	cpc	r1, r20
    2a04:	55 1f       	adc	r21, r21
    2a06:	f2 cf       	rjmp	.-28     	; 0x29ec <__fp_split3+0xe>
    2a08:	46 95       	lsr	r20
    2a0a:	f1 df       	rcall	.-30     	; 0x29ee <__fp_splitA>
    2a0c:	08 c0       	rjmp	.+16     	; 0x2a1e <__fp_splitA+0x30>
    2a0e:	16 16       	cp	r1, r22
    2a10:	17 06       	cpc	r1, r23
    2a12:	18 06       	cpc	r1, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	f1 cf       	rjmp	.-30     	; 0x29fa <__fp_splitA+0xc>
    2a18:	86 95       	lsr	r24
    2a1a:	71 05       	cpc	r23, r1
    2a1c:	61 05       	cpc	r22, r1
    2a1e:	08 94       	sec
    2a20:	08 95       	ret

00002a22 <__fp_zero>:
    2a22:	e8 94       	clt

00002a24 <__fp_szero>:
    2a24:	bb 27       	eor	r27, r27
    2a26:	66 27       	eor	r22, r22
    2a28:	77 27       	eor	r23, r23
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	97 f9       	bld	r25, 7
    2a2e:	08 95       	ret

00002a30 <__divmodhi4>:
    2a30:	97 fb       	bst	r25, 7
    2a32:	07 2e       	mov	r0, r23
    2a34:	16 f4       	brtc	.+4      	; 0x2a3a <__divmodhi4+0xa>
    2a36:	00 94       	com	r0
    2a38:	06 d0       	rcall	.+12     	; 0x2a46 <__divmodhi4_neg1>
    2a3a:	77 fd       	sbrc	r23, 7
    2a3c:	08 d0       	rcall	.+16     	; 0x2a4e <__divmodhi4_neg2>
    2a3e:	36 d0       	rcall	.+108    	; 0x2aac <__udivmodhi4>
    2a40:	07 fc       	sbrc	r0, 7
    2a42:	05 d0       	rcall	.+10     	; 0x2a4e <__divmodhi4_neg2>
    2a44:	3e f4       	brtc	.+14     	; 0x2a54 <__divmodhi4_exit>

00002a46 <__divmodhi4_neg1>:
    2a46:	90 95       	com	r25
    2a48:	81 95       	neg	r24
    2a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4c:	08 95       	ret

00002a4e <__divmodhi4_neg2>:
    2a4e:	70 95       	com	r23
    2a50:	61 95       	neg	r22
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255

00002a54 <__divmodhi4_exit>:
    2a54:	08 95       	ret

00002a56 <__udivmodsi4>:
    2a56:	a1 e2       	ldi	r26, 0x21	; 33
    2a58:	1a 2e       	mov	r1, r26
    2a5a:	aa 1b       	sub	r26, r26
    2a5c:	bb 1b       	sub	r27, r27
    2a5e:	fd 01       	movw	r30, r26
    2a60:	0d c0       	rjmp	.+26     	; 0x2a7c <__udivmodsi4_ep>

00002a62 <__udivmodsi4_loop>:
    2a62:	aa 1f       	adc	r26, r26
    2a64:	bb 1f       	adc	r27, r27
    2a66:	ee 1f       	adc	r30, r30
    2a68:	ff 1f       	adc	r31, r31
    2a6a:	a2 17       	cp	r26, r18
    2a6c:	b3 07       	cpc	r27, r19
    2a6e:	e4 07       	cpc	r30, r20
    2a70:	f5 07       	cpc	r31, r21
    2a72:	20 f0       	brcs	.+8      	; 0x2a7c <__udivmodsi4_ep>
    2a74:	a2 1b       	sub	r26, r18
    2a76:	b3 0b       	sbc	r27, r19
    2a78:	e4 0b       	sbc	r30, r20
    2a7a:	f5 0b       	sbc	r31, r21

00002a7c <__udivmodsi4_ep>:
    2a7c:	66 1f       	adc	r22, r22
    2a7e:	77 1f       	adc	r23, r23
    2a80:	88 1f       	adc	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	1a 94       	dec	r1
    2a86:	69 f7       	brne	.-38     	; 0x2a62 <__udivmodsi4_loop>
    2a88:	60 95       	com	r22
    2a8a:	70 95       	com	r23
    2a8c:	80 95       	com	r24
    2a8e:	90 95       	com	r25
    2a90:	9b 01       	movw	r18, r22
    2a92:	ac 01       	movw	r20, r24
    2a94:	bd 01       	movw	r22, r26
    2a96:	cf 01       	movw	r24, r30
    2a98:	08 95       	ret

00002a9a <__tablejump2__>:
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	00 24       	eor	r0, r0
    2aa0:	00 1c       	adc	r0, r0
    2aa2:	0b be       	out	0x3b, r0	; 59
    2aa4:	07 90       	elpm	r0, Z+
    2aa6:	f6 91       	elpm	r31, Z
    2aa8:	e0 2d       	mov	r30, r0
    2aaa:	09 94       	ijmp

00002aac <__udivmodhi4>:
    2aac:	aa 1b       	sub	r26, r26
    2aae:	bb 1b       	sub	r27, r27
    2ab0:	51 e1       	ldi	r21, 0x11	; 17
    2ab2:	07 c0       	rjmp	.+14     	; 0x2ac2 <__udivmodhi4_ep>

00002ab4 <__udivmodhi4_loop>:
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	a6 17       	cp	r26, r22
    2aba:	b7 07       	cpc	r27, r23
    2abc:	10 f0       	brcs	.+4      	; 0x2ac2 <__udivmodhi4_ep>
    2abe:	a6 1b       	sub	r26, r22
    2ac0:	b7 0b       	sbc	r27, r23

00002ac2 <__udivmodhi4_ep>:
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	5a 95       	dec	r21
    2ac8:	a9 f7       	brne	.-22     	; 0x2ab4 <__udivmodhi4_loop>
    2aca:	80 95       	com	r24
    2acc:	90 95       	com	r25
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	08 95       	ret

00002ad4 <_exit>:
    2ad4:	f8 94       	cli

00002ad6 <__stop_program>:
    2ad6:	ff cf       	rjmp	.-2      	; 0x2ad6 <__stop_program>
