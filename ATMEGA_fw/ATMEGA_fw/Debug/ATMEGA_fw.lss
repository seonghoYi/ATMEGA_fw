
ATMEGA_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f6  00800162  00800162  00000e42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005425  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019f2  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003595  00000000  00000000  000082ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001048  00000000  00000000  0000b884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015f8  00000000  00000000  0000c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049da  00000000  00000000  0000dec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000598  00000000  00000000  0001289e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c1       	rjmp	.+776    	; 0x32e <__vector_9>
  26:	00 00       	nop
  28:	59 c1       	rjmp	.+690    	; 0x2dc <__vector_10>
  2a:	00 00       	nop
  2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__vector_11>
  2e:	00 00       	nop
  30:	2d c1       	rjmp	.+602    	; 0x28c <__vector_12>
  32:	00 00       	nop
  34:	35 c1       	rjmp	.+618    	; 0x2a0 <__vector_13>
  36:	00 00       	nop
  38:	1f c1       	rjmp	.+574    	; 0x278 <__vector_14>
  3a:	00 00       	nop
  3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__vector_18>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	71 c0       	rjmp	.+226    	; 0x134 <__vector_20>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c1       	rjmp	.+594    	; 0x2b4 <__vector_24>
  62:	00 00       	nop
  64:	b5 c1       	rjmp	.+874    	; 0x3d0 <__vector_25>
  66:	00 00       	nop
  68:	95 c1       	rjmp	.+810    	; 0x394 <__vector_26>
  6a:	00 00       	nop
  6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__vector_27>
  6e:	00 00       	nop
  70:	a5 c1       	rjmp	.+842    	; 0x3bc <__vector_28>
  72:	00 00       	nop
  74:	85 c1       	rjmp	.+778    	; 0x380 <__vector_29>
  76:	00 00       	nop
  78:	86 c0       	rjmp	.+268    	; 0x186 <__vector_30>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ab c0       	rjmp	.+342    	; 0x1d8 <__vector_32>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b 03       	fmul	r17, r19
  8e:	24 03       	mulsu	r18, r20
  90:	2d 03       	fmul	r18, r21
  92:	31 03       	mulsu	r19, r17
  94:	35 03       	mulsu	r19, r21
  96:	46 03       	mulsu	r20, r22
  98:	4a 03       	fmul	r20, r18
  9a:	5a 03       	fmul	r21, r18
  9c:	6e 03       	fmul	r22, r22

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ec e4       	ldi	r30, 0x4C	; 76
  b2:	fd e0       	ldi	r31, 0x0D	; 13
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 36       	cpi	r26, 0x62	; 98
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	25 e0       	ldi	r18, 0x05	; 5
  c6:	a2 e6       	ldi	r26, 0x62	; 98
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a8 35       	cpi	r26, 0x58	; 88
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	ef d5       	rcall	.+3038   	; 0xcb4 <main>
  d6:	38 c6       	rjmp	.+3184   	; 0xd48 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <apInit>:
#include "uart.h"

void apInit(void)
{
	//uartOpen(_DEF_UART1, 38400);
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <apMain>:
		{
			uint8_t rx_data = uartRead(_DEF_UART1);
			uartWrite(_DEF_UART1, &rx_data, 1);
		}
		*/
		rosServerRun();
  de:	64 d2       	rcall	.+1224   	; 0x5a8 <rosServerRun>
  e0:	fe cf       	rjmp	.-4      	; 0xde <apMain>

000000e2 <__vector_18>:

#ifdef _USE_HW_UART
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
ISR(USART0_RX_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	0b b6       	in	r0, 0x3b	; 59
  ee:	0f 92       	push	r0
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	UART_RxIRQHandler(&huart1);
 108:	86 e2       	ldi	r24, 0x26	; 38
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	be d5       	rcall	.+2940   	; 0xc8a <UART_RxIRQHandler>
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0b be       	out	0x3b, r0	; 59
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_20>:

ISR(USART0_TX_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0b b6       	in	r0, 0x3b	; 59
 140:	0f 92       	push	r0
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	UART_TxIRQHandler(&huart1);
 15a:	86 e2       	ldi	r24, 0x26	; 38
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	93 d5       	rcall	.+2854   	; 0xc86 <UART_TxIRQHandler>
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0b be       	out	0x3b, r0	; 59
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_30>:

ISR(USART1_RX_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	0b b6       	in	r0, 0x3b	; 59
 192:	0f 92       	push	r0
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	UART_RxIRQHandler(&huart2);
 1ac:	8d e3       	ldi	r24, 0x3D	; 61
 1ae:	95 e0       	ldi	r25, 0x05	; 5
 1b0:	6c d5       	rcall	.+2776   	; 0xc8a <UART_RxIRQHandler>
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0b be       	out	0x3b, r0	; 59
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_32>:

ISR(USART1_TX_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	0b b6       	in	r0, 0x3b	; 59
 1e4:	0f 92       	push	r0
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	UART_TxIRQHandler(&huart2);
 1fe:	8d e3       	ldi	r24, 0x3D	; 61
 200:	95 e0       	ldi	r25, 0x05	; 5
 202:	41 d5       	rcall	.+2690   	; 0xc86 <UART_TxIRQHandler>
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_15>:
}
#endif

#ifdef _USE_HW_SYSTICK
ISR(TIMER0_COMP_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0b b6       	in	r0, 0x3b	; 59
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	HAL_IncTick();
 250:	06 d4       	rcall	.+2060   	; 0xa5e <HAL_IncTick>
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0b be       	out	0x3b, r0	; 59
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_14>:
#endif

ISR(TIMER1_OVF_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
	
}
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
	
}
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_13>:

ISR(TIMER1_COMPB_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
	
}
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_24>:

ISR(TIMER1_COMPC_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
	
}
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_11>:

ISR(TIMER1_CAPT_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
	
}
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0b b6       	in	r0, 0x3b	; 59
 2e8:	0f 92       	push	r0
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	TIM2_OVF_IRQHandler(&htim2);
 302:	86 ef       	ldi	r24, 0xF6	; 246
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	07 d4       	rcall	.+2062   	; 0xb16 <TIM2_OVF_IRQHandler>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	0b b6       	in	r0, 0x3b	; 59
 33a:	0f 92       	push	r0
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	TIM2_OC_IRQHandler(&htim2);
 354:	86 ef       	ldi	r24, 0xF6	; 246
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	e1 d3       	rcall	.+1986   	; 0xb1c <TIM2_OC_IRQHandler>
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_29>:

ISR(TIMER3_OVF_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
	
}
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
	
}
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_27>:

ISR(TIMER3_COMPB_vect)
{
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
	
}
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_28>:

ISR(TIMER3_COMPC_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
	
}
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_25>:

ISR(TIMER3_CAPT_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
	
}
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <bspInit>:
}


void delay(uint32_t ms)
{
	HAL_Delay(ms);
 3e4:	3a c3       	rjmp	.+1652   	; 0xa5a <HAL_Init>
 3e6:	08 95       	ret

000003e8 <millis>:
}

uint32_t millis(void)
{
	return HAL_GetTick();
 3e8:	51 c3       	rjmp	.+1698   	; 0xa8c <HAL_GetTick>
 3ea:	08 95       	ret

000003ec <qbufferWrite>:

	return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 3ec:	4f 92       	push	r4
 3ee:	5f 92       	push	r5
 3f0:	6f 92       	push	r6
 3f2:	7f 92       	push	r7
 3f4:	af 92       	push	r10
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	00 d0       	rcall	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 d0       	rcall	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	9e 83       	std	Y+6, r25	; 0x06
 414:	8d 83       	std	Y+5, r24	; 0x05
 416:	06 2f       	mov	r16, r22
 418:	17 2f       	mov	r17, r23
 41a:	29 01       	movw	r4, r18
 41c:	3a 01       	movw	r6, r20
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
 41e:	23 2b       	or	r18, r19
 420:	24 2b       	or	r18, r20
 422:	25 2b       	or	r18, r21
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	70 c0       	rjmp	.+224    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	{
		next_in = (p_node->in + 1) %p_node->len;
 428:	dc 01       	movw	r26, r24
 42a:	8d 91       	ld	r24, X+
 42c:	9d 91       	ld	r25, X+
 42e:	0d 90       	ld	r0, X+
 430:	bc 91       	ld	r27, X
 432:	a0 2d       	mov	r26, r0
 434:	89 83       	std	Y+1, r24	; 0x01
 436:	9a 83       	std	Y+2, r25	; 0x02
 438:	ab 83       	std	Y+3, r26	; 0x03
 43a:	bc 83       	std	Y+4, r27	; 0x04
 43c:	bc 01       	movw	r22, r24
 43e:	cd 01       	movw	r24, r26
 440:	6f 5f       	subi	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	ed 81       	ldd	r30, Y+5	; 0x05
 44a:	fe 81       	ldd	r31, Y+6	; 0x06
 44c:	20 85       	ldd	r18, Z+8	; 0x08
 44e:	31 85       	ldd	r19, Z+9	; 0x09
 450:	42 85       	ldd	r20, Z+10	; 0x0a
 452:	53 85       	ldd	r21, Z+11	; 0x0b
 454:	35 d4       	rcall	.+2154   	; 0xcc0 <__udivmodsi4>
 456:	6b 01       	movw	r12, r22
 458:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
 45a:	ed 81       	ldd	r30, Y+5	; 0x05
 45c:	fe 81       	ldd	r31, Y+6	; 0x06
 45e:	84 81       	ldd	r24, Z+4	; 0x04
 460:	95 81       	ldd	r25, Z+5	; 0x05
 462:	a6 81       	ldd	r26, Z+6	; 0x06
 464:	b7 81       	ldd	r27, Z+7	; 0x07
 466:	c8 16       	cp	r12, r24
 468:	d9 06       	cpc	r13, r25
 46a:	ea 06       	cpc	r14, r26
 46c:	fb 06       	cpc	r15, r27
 46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	4b c0       	rjmp	.+150    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 472:	a0 2e       	mov	r10, r16
 474:	b1 2e       	mov	r11, r17
 476:	00 e0       	ldi	r16, 0x00	; 0
 478:	10 e0       	ldi	r17, 0x00	; 0
 47a:	23 c0       	rjmp	.+70     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
 47c:	c7 01       	movw	r24, r14
 47e:	b6 01       	movw	r22, r12
 480:	6f 5f       	subi	r22, 0xFF	; 255
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8f 4f       	sbci	r24, 0xFF	; 255
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	ad 81       	ldd	r26, Y+5	; 0x05
 48a:	be 81       	ldd	r27, Y+6	; 0x06
 48c:	18 96       	adiw	r26, 0x08	; 8
 48e:	2d 91       	ld	r18, X+
 490:	3d 91       	ld	r19, X+
 492:	4d 91       	ld	r20, X+
 494:	5c 91       	ld	r21, X
 496:	1b 97       	sbiw	r26, 0x0b	; 11
 498:	13 d4       	rcall	.+2086   	; 0xcc0 <__udivmodsi4>
 49a:	bf ef       	ldi	r27, 0xFF	; 255
 49c:	ab 1a       	sub	r10, r27
 49e:	bb 0a       	sbc	r11, r27
 4a0:	c9 82       	std	Y+1, r12	; 0x01
 4a2:	da 82       	std	Y+2, r13	; 0x02
 4a4:	eb 82       	std	Y+3, r14	; 0x03
 4a6:	fc 82       	std	Y+4, r15	; 0x04

		if (next_in != p_node->out)
 4a8:	ed 81       	ldd	r30, Y+5	; 0x05
 4aa:	fe 81       	ldd	r31, Y+6	; 0x06
 4ac:	c4 80       	ldd	r12, Z+4	; 0x04
 4ae:	d5 80       	ldd	r13, Z+5	; 0x05
 4b0:	e6 80       	ldd	r14, Z+6	; 0x06
 4b2:	f7 80       	ldd	r15, Z+7	; 0x07
 4b4:	6c 15       	cp	r22, r12
 4b6:	7d 05       	cpc	r23, r13
 4b8:	8e 05       	cpc	r24, r14
 4ba:	9f 05       	cpc	r25, r15
 4bc:	29 f1       	breq	.+74     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
 4be:	6b 01       	movw	r12, r22
 4c0:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
		{
			if (p_node->p_buf != NULL)
 4c2:	ad 81       	ldd	r26, Y+5	; 0x05
 4c4:	be 81       	ldd	r27, Y+6	; 0x06
 4c6:	1c 96       	adiw	r26, 0x0c	; 12
 4c8:	8d 91       	ld	r24, X+
 4ca:	9c 91       	ld	r25, X
 4cc:	1d 97       	sbiw	r26, 0x0d	; 13
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 4d2:	f5 01       	movw	r30, r10
 4d4:	20 81       	ld	r18, Z
 4d6:	e9 81       	ldd	r30, Y+1	; 0x01
 4d8:	fa 81       	ldd	r31, Y+2	; 0x02
 4da:	e8 0f       	add	r30, r24
 4dc:	f9 1f       	adc	r31, r25
 4de:	20 83       	st	Z, r18
			}
			p_node->in = next_in;
 4e0:	ad 81       	ldd	r26, Y+5	; 0x05
 4e2:	be 81       	ldd	r27, Y+6	; 0x06
 4e4:	cd 92       	st	X+, r12
 4e6:	dd 92       	st	X+, r13
 4e8:	ed 92       	st	X+, r14
 4ea:	fc 92       	st	X, r15
 4ec:	13 97       	sbiw	r26, 0x03	; 3
bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
 4ee:	0f 5f       	subi	r16, 0xFF	; 255
 4f0:	1f 4f       	sbci	r17, 0xFF	; 255
 4f2:	c8 01       	movw	r24, r16
 4f4:	01 2e       	mov	r0, r17
 4f6:	00 0c       	add	r0, r0
 4f8:	aa 0b       	sbc	r26, r26
 4fa:	bb 0b       	sbc	r27, r27
 4fc:	84 15       	cp	r24, r4
 4fe:	95 05       	cpc	r25, r5
 500:	a6 05       	cpc	r26, r6
 502:	b7 05       	cpc	r27, r7
 504:	08 f4       	brcc	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	ba cf       	rjmp	.-140    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			ret = false;
			break;
		}
	}
	return ret;
}
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	26 96       	adiw	r28, 0x06	; 6
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	df 90       	pop	r13
 524:	cf 90       	pop	r12
 526:	bf 90       	pop	r11
 528:	af 90       	pop	r10
 52a:	7f 90       	pop	r7
 52c:	6f 90       	pop	r6
 52e:	5f 90       	pop	r5
 530:	4f 90       	pop	r4
 532:	08 95       	ret

00000534 <gpioPinMode>:
	}
	return ret;
}

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	00 d0       	rcall	.+0      	; 0x53a <gpioPinMode+0x6>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 53e:	1a 82       	std	Y+2, r1	; 0x02
 540:	19 82       	std	Y+1, r1	; 0x01
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
 542:	86 30       	cpi	r24, 0x06	; 6
 544:	b8 f4       	brcc	.+46     	; 0x574 <gpioPinMode+0x40>
	
	switch(mode)
 546:	61 30       	cpi	r22, 0x01	; 1
 548:	11 f4       	brne	.+4      	; 0x54e <gpioPinMode+0x1a>
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		break;
		
		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	9a 83       	std	Y+2, r25	; 0x02
		break;
		default:
		break;
	}
	
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	fc 01       	movw	r30, r24
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	e8 0f       	add	r30, r24
 55c:	f9 1f       	adc	r31, r25
 55e:	e0 50       	subi	r30, 0x00	; 0
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	81 81       	ldd	r24, Z+1	; 0x01
 564:	89 83       	std	Y+1, r24	; 0x01
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 566:	be 01       	movw	r22, r28
 568:	6f 5f       	subi	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	80 81       	ld	r24, Z
 56e:	97 d2       	rcall	.+1326   	; 0xa9e <GPIO_Init>
	ret = true;
	
	return ret;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	01 c0       	rjmp	.+2      	; 0x576 <gpioPinMode+0x42>
{
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
 574:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
	ret = true;
	
	return ret;
}
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <gpioInit>:
};

bool gpioPinMode(uint8_t ch, uint8_t mode);

bool gpioInit(void)
{
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	00 e0       	ldi	r16, 0x00	; 0
 588:	11 e0       	ldi	r17, 0x01	; 1
 58a:	c0 e0       	ldi	r28, 0x00	; 0
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 58c:	f8 01       	movw	r30, r16
 58e:	62 81       	ldd	r22, Z+2	; 0x02
 590:	8c 2f       	mov	r24, r28
 592:	d0 df       	rcall	.-96     	; 0x534 <gpioPinMode>
 594:	0b 5f       	subi	r16, 0xFB	; 251
 596:	1f 4f       	sbci	r17, 0xFF	; 255
 598:	cf 5f       	subi	r28, 0xFF	; 255

bool gpioInit(void)
{
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
 59a:	c6 30       	cpi	r28, 0x06	; 6
 59c:	b9 f7       	brne	.-18     	; 0x58c <gpioInit+0xc>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
	}
	return ret;
}
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <rosServerRun>:
void rosServerRun(void)
{
	//char *str = "hello";
	//rosSendInst(&ros_handle, 0x00, 0x00, (uint8_t*)str, 6);
	uint8_t service_id;
	if (rosReceivePacket(&ros_handle))
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	0e d0       	rcall	.+28     	; 0x5ca <rosReceivePacket>
 5ae:	88 23       	and	r24, r24
 5b0:	59 f0       	breq	.+22     	; 0x5c8 <rosServerRun+0x20>
	{
		service_id = ros_handle.packet.inst;
 5b2:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <ros_handle+0x12>
		if ((service_id < 0 || service_id >= ROS_MAX_SERVICE))
 5b6:	66 23       	and	r22, r22
 5b8:	3c f0       	brlt	.+14     	; 0x5c8 <rosServerRun+0x20>
		{
			return;
		}
		//ros_handle.driver.write(ros_handle.ch, (uint8_t*)&(ros_handle.packet.msgs[0]), 1);
		rosCallService(&ros_handle, service_id, &ros_handle.packet.msgs[0]);
 5ba:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <ros_handle+0x13>
 5be:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <ros_handle+0x14>
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	d5 c0       	rjmp	.+426    	; 0x772 <rosCallService>
 5c8:	08 95       	ret

000005ca <rosReceivePacket>:


void rosAddService(ros_t *p_ros, void (*func)(uint8_t *params))
{
	p_ros->func[p_ros->service_index] = func;
	p_ros->service_index++;
 5ca:	cf 92       	push	r12
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	fc 01       	movw	r30, r24
 5dc:	10 81       	ld	r17, Z
 5de:	11 23       	and	r17, r17
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <rosReceivePacket+0x1a>
 5e2:	bd c0       	rjmp	.+378    	; 0x75e <rosReceivePacket+0x194>
 5e4:	ec 01       	movw	r28, r24
 5e6:	e5 5e       	subi	r30, 0xE5	; 229
 5e8:	fd 4f       	sbci	r31, 0xFD	; 253
 5ea:	01 90       	ld	r0, Z+
 5ec:	f0 81       	ld	r31, Z
 5ee:	e0 2d       	mov	r30, r0
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	09 95       	icall
 5f4:	67 2b       	or	r22, r23
 5f6:	68 2b       	or	r22, r24
 5f8:	69 2b       	or	r22, r25
 5fa:	09 f4       	brne	.+2      	; 0x5fe <rosReceivePacket+0x34>
 5fc:	99 c0       	rjmp	.+306    	; 0x730 <rosReceivePacket+0x166>
 5fe:	fe 01       	movw	r30, r28
 600:	e1 5e       	subi	r30, 0xE1	; 225
 602:	fd 4f       	sbci	r31, 0xFD	; 253
 604:	01 90       	ld	r0, Z+
 606:	f0 81       	ld	r31, Z
 608:	e0 2d       	mov	r30, r0
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	09 95       	icall
 60e:	08 2f       	mov	r16, r24
 610:	eb de       	rcall	.-554    	; 0x3e8 <millis>
 612:	c8 84       	ldd	r12, Y+8	; 0x08
 614:	d9 84       	ldd	r13, Y+9	; 0x09
 616:	ea 84       	ldd	r14, Y+10	; 0x0a
 618:	fb 84       	ldd	r15, Y+11	; 0x0b
 61a:	dc 01       	movw	r26, r24
 61c:	cb 01       	movw	r24, r22
 61e:	8c 19       	sub	r24, r12
 620:	9d 09       	sbc	r25, r13
 622:	ae 09       	sbc	r26, r14
 624:	bf 09       	sbc	r27, r15
 626:	84 36       	cpi	r24, 0x64	; 100
 628:	91 05       	cpc	r25, r1
 62a:	a1 05       	cpc	r26, r1
 62c:	b1 05       	cpc	r27, r1
 62e:	08 f4       	brcc	.+2      	; 0x632 <rosReceivePacket+0x68>
 630:	83 c0       	rjmp	.+262    	; 0x738 <rosReceivePacket+0x16e>
 632:	1e 82       	std	Y+6, r1	; 0x06
 634:	81 c0       	rjmp	.+258    	; 0x738 <rosReceivePacket+0x16e>
 636:	0f 3f       	cpi	r16, 0xFF	; 255
 638:	29 f4       	brne	.+10     	; 0x644 <rosReceivePacket+0x7a>
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	8e 8b       	std	Y+22, r24	; 0x16
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	8e 83       	std	Y+6, r24	; 0x06
 642:	89 c0       	rjmp	.+274    	; 0x756 <rosReceivePacket+0x18c>
 644:	1e 82       	std	Y+6, r1	; 0x06
 646:	87 c0       	rjmp	.+270    	; 0x756 <rosReceivePacket+0x18c>
 648:	0f 3f       	cpi	r16, 0xFF	; 255
 64a:	29 f4       	brne	.+10     	; 0x656 <rosReceivePacket+0x8c>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	8f 8b       	std	Y+23, r24	; 0x17
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	8e 83       	std	Y+6, r24	; 0x06
 654:	80 c0       	rjmp	.+256    	; 0x756 <rosReceivePacket+0x18c>
 656:	1e 82       	std	Y+6, r1	; 0x06
 658:	7e c0       	rjmp	.+252    	; 0x756 <rosReceivePacket+0x18c>
 65a:	08 8f       	std	Y+24, r16	; 0x18
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	8e 83       	std	Y+6, r24	; 0x06
 660:	7a c0       	rjmp	.+244    	; 0x756 <rosReceivePacket+0x18c>
 662:	09 8f       	std	Y+25, r16	; 0x19
 664:	84 e0       	ldi	r24, 0x04	; 4
 666:	8e 83       	std	Y+6, r24	; 0x06
 668:	76 c0       	rjmp	.+236    	; 0x756 <rosReceivePacket+0x18c>
 66a:	0a 8f       	std	Y+26, r16	; 0x1a
 66c:	98 8d       	ldd	r25, Y+24	; 0x18
 66e:	89 8d       	ldd	r24, Y+25	; 0x19
 670:	89 0f       	add	r24, r25
 672:	80 95       	com	r24
 674:	88 8b       	std	Y+16, r24	; 0x10
 676:	08 13       	cpse	r16, r24
 678:	03 c0       	rjmp	.+6      	; 0x680 <rosReceivePacket+0xb6>
 67a:	85 e0       	ldi	r24, 0x05	; 5
 67c:	8e 83       	std	Y+6, r24	; 0x06
 67e:	01 c0       	rjmp	.+2      	; 0x682 <rosReceivePacket+0xb8>
 680:	1e 82       	std	Y+6, r1	; 0x06
 682:	89 2f       	mov	r24, r25
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	9f 87       	std	Y+15, r25	; 0x0f
 688:	8e 87       	std	Y+14, r24	; 0x0e
 68a:	65 c0       	rjmp	.+202    	; 0x756 <rosReceivePacket+0x18c>
 68c:	0b 8f       	std	Y+27, r16	; 0x1b
 68e:	86 e0       	ldi	r24, 0x06	; 6
 690:	8e 83       	std	Y+6, r24	; 0x06
 692:	61 c0       	rjmp	.+194    	; 0x756 <rosReceivePacket+0x18c>
 694:	0c 8f       	std	Y+28, r16	; 0x1c
 696:	87 e0       	ldi	r24, 0x07	; 7
 698:	8f 83       	std	Y+7, r24	; 0x07
 69a:	ce 01       	movw	r24, r28
 69c:	4d 96       	adiw	r24, 0x1d	; 29
 69e:	9c 8b       	std	Y+20, r25	; 0x14
 6a0:	8b 8b       	std	Y+19, r24	; 0x13
 6a2:	8e 85       	ldd	r24, Y+14	; 0x0e
 6a4:	9f 85       	ldd	r25, Y+15	; 0x0f
 6a6:	89 2b       	or	r24, r25
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <rosReceivePacket+0xe6>
 6aa:	87 e0       	ldi	r24, 0x07	; 7
 6ac:	8e 83       	std	Y+6, r24	; 0x06
 6ae:	53 c0       	rjmp	.+166    	; 0x756 <rosReceivePacket+0x18c>
 6b0:	1e 82       	std	Y+6, r1	; 0x06
 6b2:	39 c0       	rjmp	.+114    	; 0x726 <rosReceivePacket+0x15c>
 6b4:	9f 81       	ldd	r25, Y+7	; 0x07
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	89 0f       	add	r24, r25
 6ba:	8f 83       	std	Y+7, r24	; 0x07
 6bc:	fe 01       	movw	r30, r28
 6be:	e9 0f       	add	r30, r25
 6c0:	f1 1d       	adc	r31, r1
 6c2:	06 8b       	std	Z+22, r16	; 0x16
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	2e 85       	ldd	r18, Y+14	; 0x0e
 6c8:	3f 85       	ldd	r19, Y+15	; 0x0f
 6ca:	29 5f       	subi	r18, 0xF9	; 249
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
 6ce:	82 17       	cp	r24, r18
 6d0:	93 07       	cpc	r25, r19
 6d2:	08 f4       	brcc	.+2      	; 0x6d6 <rosReceivePacket+0x10c>
 6d4:	40 c0       	rjmp	.+128    	; 0x756 <rosReceivePacket+0x18c>
 6d6:	88 e0       	ldi	r24, 0x08	; 8
 6d8:	8e 83       	std	Y+6, r24	; 0x06
 6da:	3d c0       	rjmp	.+122    	; 0x756 <rosReceivePacket+0x18c>
 6dc:	8f 81       	ldd	r24, Y+7	; 0x07
 6de:	fe 01       	movw	r30, r28
 6e0:	e8 0f       	add	r30, r24
 6e2:	f1 1d       	adc	r31, r1
 6e4:	06 8b       	std	Z+22, r16	; 0x16
 6e6:	4e 85       	ldd	r20, Y+14	; 0x0e
 6e8:	5f 85       	ldd	r21, Y+15	; 0x0f
 6ea:	41 15       	cp	r20, r1
 6ec:	51 05       	cpc	r21, r1
 6ee:	91 f0       	breq	.+36     	; 0x714 <rosReceivePacket+0x14a>
 6f0:	fe 01       	movw	r30, r28
 6f2:	7d 96       	adiw	r30, 0x1d	; 29
 6f4:	43 5e       	subi	r20, 0xE3	; 227
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	4c 0f       	add	r20, r28
 6fa:	5d 1f       	adc	r21, r29
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	dc 01       	movw	r26, r24
 702:	21 91       	ld	r18, Z+
 704:	82 0f       	add	r24, r18
 706:	91 1d       	adc	r25, r1
 708:	a1 1d       	adc	r26, r1
 70a:	b1 1d       	adc	r27, r1
 70c:	4e 17       	cp	r20, r30
 70e:	5f 07       	cpc	r21, r31
 710:	c1 f7       	brne	.-16     	; 0x702 <rosReceivePacket+0x138>
 712:	03 c0       	rjmp	.+6      	; 0x71a <rosReceivePacket+0x150>
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	dc 01       	movw	r26, r24
 71a:	80 95       	com	r24
 71c:	8d 8b       	std	Y+21, r24	; 0x15
 71e:	08 13       	cpse	r16, r24
 720:	1c c0       	rjmp	.+56     	; 0x75a <rosReceivePacket+0x190>
 722:	1e 82       	std	Y+6, r1	; 0x06
 724:	1f 82       	std	Y+7, r1	; 0x07
 726:	8c 8d       	ldd	r24, Y+28	; 0x1c
 728:	89 8b       	std	Y+17, r24	; 0x11
 72a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 72c:	8a 8b       	std	Y+18, r24	; 0x12
 72e:	17 c0       	rjmp	.+46     	; 0x75e <rosReceivePacket+0x194>
 730:	10 e0       	ldi	r17, 0x00	; 0
 732:	15 c0       	rjmp	.+42     	; 0x75e <rosReceivePacket+0x194>
 734:	10 e0       	ldi	r17, 0x00	; 0
 736:	13 c0       	rjmp	.+38     	; 0x75e <rosReceivePacket+0x194>
 738:	57 de       	rcall	.-850    	; 0x3e8 <millis>
 73a:	68 87       	std	Y+8, r22	; 0x08
 73c:	79 87       	std	Y+9, r23	; 0x09
 73e:	8a 87       	std	Y+10, r24	; 0x0a
 740:	9b 87       	std	Y+11, r25	; 0x0b
 742:	ee 81       	ldd	r30, Y+6	; 0x06
 744:	8e 2f       	mov	r24, r30
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	89 30       	cpi	r24, 0x09	; 9
 74a:	91 05       	cpc	r25, r1
 74c:	98 f7       	brcc	.-26     	; 0x734 <rosReceivePacket+0x16a>
 74e:	fc 01       	movw	r30, r24
 750:	ea 5b       	subi	r30, 0xBA	; 186
 752:	ff 4f       	sbci	r31, 0xFF	; 255
 754:	d7 c2       	rjmp	.+1454   	; 0xd04 <__tablejump2__>
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <rosReceivePacket+0x194>
 75a:	1f 82       	std	Y+7, r1	; 0x07
 75c:	10 e0       	ldi	r17, 0x00	; 0
 75e:	81 2f       	mov	r24, r17
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	08 95       	ret

00000772 <rosCallService>:
}

void rosCallService(ros_t *p_ros, uint8_t service_ch_, uint8_t *params_)
{
	if (service_ch_ < 0 || service_ch_ >= ROS_MAX_SERVICE)
 772:	66 23       	and	r22, r22
 774:	6c f0       	brlt	.+26     	; 0x790 <rosCallService+0x1e>
 776:	fc 01       	movw	r30, r24
	{
		return;
	}
	
	p_ros->func[service_ch_](params_);
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	e6 0f       	add	r30, r22
 780:	f7 1f       	adc	r31, r23
 782:	ed 5d       	subi	r30, 0xDD	; 221
 784:	fd 4f       	sbci	r31, 0xFD	; 253
 786:	01 90       	ld	r0, Z+
 788:	f0 81       	ld	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	ca 01       	movw	r24, r20
 78e:	09 95       	icall
 790:	08 95       	ret

00000792 <uartInit>:
		qbufferFlush(&qbuffer[_DEF_UART1]);
		break;
	}
	
	return ret;
}
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	08 95       	ret

00000796 <UART_TxCpltCallback>:


void UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 796:	08 95       	ret

00000798 <UART_RxCpltCallback>:
	return;
}

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 798:	fc 01       	movw	r30, r24
	switch(huart->USARTn)
 79a:	80 81       	ld	r24, Z
 79c:	88 23       	and	r24, r24
 79e:	19 f0       	breq	.+6      	; 0x7a6 <UART_RxCpltCallback+0xe>
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	59 f0       	breq	.+22     	; 0x7ba <UART_RxCpltCallback+0x22>
 7a4:	08 95       	ret
	{
		case USART0:
		qbufferWrite(&qbuffer[_DEF_UART0], huart->pRxBuffPtr, huart->RxXferSize);
 7a6:	20 89       	ldd	r18, Z+16	; 0x10
 7a8:	31 89       	ldd	r19, Z+17	; 0x11
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	64 85       	ldd	r22, Z+12	; 0x0c
 7b0:	75 85       	ldd	r23, Z+13	; 0x0d
 7b2:	82 e6       	ldi	r24, 0x62	; 98
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	1a ce       	rjmp	.-972    	; 0x3ec <qbufferWrite>
		//uartPrintf(_DEF_UART0, "Rx callback available: %d", uartAvailable(_DEF_UART0));
		//uartPrintf(_DEF_UART0, "Rx callback called\n");
		break;
 7b8:	08 95       	ret
		case USART1:
		qbufferWrite(&qbuffer[_DEF_UART1], huart->pRxBuffPtr, huart->RxXferSize);
 7ba:	20 89       	ldd	r18, Z+16	; 0x10
 7bc:	31 89       	ldd	r19, Z+17	; 0x11
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	64 85       	ldd	r22, Z+12	; 0x0c
 7c4:	75 85       	ldd	r23, Z+13	; 0x0d
 7c6:	80 e7       	ldi	r24, 0x70	; 112
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	10 ce       	rjmp	.-992    	; 0x3ec <qbufferWrite>
 7cc:	08 95       	ret

000007ce <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
 7ce:	0a de       	rcall	.-1004   	; 0x3e4 <bspInit>
	gpioInit();
 7d0:	d7 de       	rcall	.-594    	; 0x580 <gpioInit>
	uartInit();
 7d2:	df cf       	rjmp	.-66     	; 0x792 <uartInit>
 7d4:	08 95       	ret

000007d6 <HAL_InitTick>:
 7d6:	cf 92       	push	r12
{
	return HAL_InitTick();
}

HAL_StatusTypeDef HAL_InitTick(void)
{
 7d8:	df 92       	push	r13
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
	HAL_StatusTypeDef status = HAL_OK;
	uint16_t prescaler;
	uint32_t ocr;
	uint32_t equation; //ctc 방정식에서의 분모 이름 진짜 애매하네

	SETB(TIMSK, 1);
 7de:	87 b7       	in	r24, 0x37	; 55
 7e0:	82 60       	ori	r24, 0x02	; 2
 7e2:	87 bf       	out	0x37, r24	; 55
	SETB(TIMSK, 6); // CTC mode
 7e4:	87 b7       	in	r24, 0x37	; 55
 7e6:	80 64       	ori	r24, 0x40	; 64
 7e8:	87 bf       	out	0x37, r24	; 55
	
	equation = (tickFreq * F_CPU) / 2000; //ms
 7ea:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <tickFreq>
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	20 e0       	ldi	r18, 0x00	; 0
 7f2:	34 e2       	ldi	r19, 0x24	; 36
 7f4:	44 ef       	ldi	r20, 0xF4	; 244
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	8e d2       	rcall	.+1308   	; 0xd16 <__muluhisi3>
 7fa:	6b 01       	movw	r12, r22
 7fc:	7c 01       	movw	r14, r24
 7fe:	20 ed       	ldi	r18, 0xD0	; 208
 800:	37 e0       	ldi	r19, 0x07	; 7
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	5c d2       	rcall	.+1208   	; 0xcc0 <__udivmodsi4>
	
	if (!(equation % 8))
 808:	da 01       	movw	r26, r20
 80a:	c9 01       	movw	r24, r18
 80c:	87 70       	andi	r24, 0x07	; 7
 80e:	99 27       	eor	r25, r25
 810:	aa 27       	eor	r26, r26
 812:	bb 27       	eor	r27, r27
 814:	89 2b       	or	r24, r25
 816:	8a 2b       	or	r24, r26
 818:	8b 2b       	or	r24, r27
 81a:	09 f4       	brne	.+2      	; 0x81e <HAL_InitTick+0x48>
 81c:	75 c0       	rjmp	.+234    	; 0x908 <HAL_InitTick+0x132>
	{
		prescaler = 8;
	}
	else if (!(equation % 32))
 81e:	da 01       	movw	r26, r20
 820:	c9 01       	movw	r24, r18
 822:	8f 71       	andi	r24, 0x1F	; 31
 824:	99 27       	eor	r25, r25
 826:	aa 27       	eor	r26, r26
 828:	bb 27       	eor	r27, r27
 82a:	89 2b       	or	r24, r25
 82c:	8a 2b       	or	r24, r26
 82e:	8b 2b       	or	r24, r27
 830:	09 f4       	brne	.+2      	; 0x834 <HAL_InitTick+0x5e>
 832:	7e c0       	rjmp	.+252    	; 0x930 <HAL_InitTick+0x15a>
	{
		prescaler = 32;
	}
	else if (!(equation % 64))
 834:	da 01       	movw	r26, r20
 836:	c9 01       	movw	r24, r18
 838:	8f 73       	andi	r24, 0x3F	; 63
 83a:	99 27       	eor	r25, r25
 83c:	aa 27       	eor	r26, r26
 83e:	bb 27       	eor	r27, r27
 840:	89 2b       	or	r24, r25
 842:	8a 2b       	or	r24, r26
 844:	8b 2b       	or	r24, r27
 846:	09 f4       	brne	.+2      	; 0x84a <HAL_InitTick+0x74>
 848:	87 c0       	rjmp	.+270    	; 0x958 <HAL_InitTick+0x182>
	{
		prescaler = 64;
	}
	else if (!(equation % 128))
 84a:	da 01       	movw	r26, r20
 84c:	c9 01       	movw	r24, r18
 84e:	8f 77       	andi	r24, 0x7F	; 127
 850:	99 27       	eor	r25, r25
 852:	aa 27       	eor	r26, r26
 854:	bb 27       	eor	r27, r27
 856:	89 2b       	or	r24, r25
 858:	8a 2b       	or	r24, r26
 85a:	8b 2b       	or	r24, r27
 85c:	09 f4       	brne	.+2      	; 0x860 <HAL_InitTick+0x8a>
 85e:	90 c0       	rjmp	.+288    	; 0x980 <HAL_InitTick+0x1aa>
	{
		prescaler = 128;
	}
	else if (!(equation % 256))
 860:	22 23       	and	r18, r18
 862:	09 f4       	brne	.+2      	; 0x866 <HAL_InitTick+0x90>
 864:	a1 c0       	rjmp	.+322    	; 0x9a8 <HAL_InitTick+0x1d2>
	{
		prescaler = 256;
	}
	else if (!(equation % 1024))
 866:	da 01       	movw	r26, r20
 868:	c9 01       	movw	r24, r18
 86a:	93 70       	andi	r25, 0x03	; 3
 86c:	aa 27       	eor	r26, r26
 86e:	bb 27       	eor	r27, r27
 870:	89 2b       	or	r24, r25
 872:	8a 2b       	or	r24, r26
 874:	8b 2b       	or	r24, r27
 876:	09 f4       	brne	.+2      	; 0x87a <HAL_InitTick+0xa4>
 878:	ab c0       	rjmp	.+342    	; 0x9d0 <HAL_InitTick+0x1fa>
 87a:	be c0       	rjmp	.+380    	; 0x9f8 <HAL_InitTick+0x222>
	}
	
	switch(prescaler)
	{
		case 1:
		SETB(TCCR0, 0);
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	81 60       	ori	r24, 0x01	; 1
 880:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 1);
 882:	83 b7       	in	r24, 0x33	; 51
 884:	8d 7f       	andi	r24, 0xFD	; 253
 886:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 2);
 888:	83 b7       	in	r24, 0x33	; 51
 88a:	8b 7f       	andi	r24, 0xFB	; 251
 88c:	83 bf       	out	0x33, r24	; 51
		break;
 88e:	dd c0       	rjmp	.+442    	; 0xa4a <HAL_InitTick+0x274>
		case 8:
		CLRB(TCCR0, 0);
 890:	83 b7       	in	r24, 0x33	; 51
 892:	8e 7f       	andi	r24, 0xFE	; 254
 894:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 1);
 896:	83 b7       	in	r24, 0x33	; 51
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 2);
 89c:	83 b7       	in	r24, 0x33	; 51
 89e:	8b 7f       	andi	r24, 0xFB	; 251
 8a0:	83 bf       	out	0x33, r24	; 51
		break;
 8a2:	d3 c0       	rjmp	.+422    	; 0xa4a <HAL_InitTick+0x274>
		case 32:
		SETB(TCCR0, 0);
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	81 60       	ori	r24, 0x01	; 1
 8a8:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 1);
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	82 60       	ori	r24, 0x02	; 2
 8ae:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 2);
 8b0:	83 b7       	in	r24, 0x33	; 51
 8b2:	8b 7f       	andi	r24, 0xFB	; 251
 8b4:	83 bf       	out	0x33, r24	; 51
		break;
 8b6:	c9 c0       	rjmp	.+402    	; 0xa4a <HAL_InitTick+0x274>
		case 64:
		CLRB(TCCR0, 0);
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	8e 7f       	andi	r24, 0xFE	; 254
 8bc:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 1);
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	8d 7f       	andi	r24, 0xFD	; 253
 8c2:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 2);
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	83 bf       	out	0x33, r24	; 51
		break;
 8ca:	bf c0       	rjmp	.+382    	; 0xa4a <HAL_InitTick+0x274>
		case 128:
		SETB(TCCR0, 0);
 8cc:	83 b7       	in	r24, 0x33	; 51
 8ce:	81 60       	ori	r24, 0x01	; 1
 8d0:	83 bf       	out	0x33, r24	; 51
		CLRB(TCCR0, 1);
 8d2:	83 b7       	in	r24, 0x33	; 51
 8d4:	8d 7f       	andi	r24, 0xFD	; 253
 8d6:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 2);
 8d8:	83 b7       	in	r24, 0x33	; 51
 8da:	84 60       	ori	r24, 0x04	; 4
 8dc:	83 bf       	out	0x33, r24	; 51
		break;
 8de:	b5 c0       	rjmp	.+362    	; 0xa4a <HAL_InitTick+0x274>
		case 256:
		CLRB(TCCR0, 0);
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	8e 7f       	andi	r24, 0xFE	; 254
 8e4:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 1);
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 2);
 8ec:	83 b7       	in	r24, 0x33	; 51
 8ee:	84 60       	ori	r24, 0x04	; 4
 8f0:	83 bf       	out	0x33, r24	; 51
		break;
 8f2:	ab c0       	rjmp	.+342    	; 0xa4a <HAL_InitTick+0x274>
		case 1024:
		SETB(TCCR0, 0);
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	81 60       	ori	r24, 0x01	; 1
 8f8:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 1);
 8fa:	83 b7       	in	r24, 0x33	; 51
 8fc:	82 60       	ori	r24, 0x02	; 2
 8fe:	83 bf       	out	0x33, r24	; 51
		SETB(TCCR0, 2);
 900:	83 b7       	in	r24, 0x33	; 51
 902:	84 60       	ori	r24, 0x04	; 4
 904:	83 bf       	out	0x33, r24	; 51
		break;
 906:	a1 c0       	rjmp	.+322    	; 0xa4a <HAL_InitTick+0x274>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 908:	c7 01       	movw	r24, r14
 90a:	b6 01       	movw	r22, r12
 90c:	20 e8       	ldi	r18, 0x80	; 128
 90e:	3e e3       	ldi	r19, 0x3E	; 62
 910:	40 e0       	ldi	r20, 0x00	; 0
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	d5 d1       	rcall	.+938    	; 0xcc0 <__udivmodsi4>
 916:	ba 01       	movw	r22, r20
 918:	a9 01       	movw	r20, r18
 91a:	41 50       	subi	r20, 0x01	; 1
 91c:	51 09       	sbc	r21, r1
 91e:	61 09       	sbc	r22, r1
 920:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 922:	4f 3f       	cpi	r20, 0xFF	; 255
 924:	51 05       	cpc	r21, r1
 926:	61 05       	cpc	r22, r1
 928:	71 05       	cpc	r23, r1
 92a:	08 f4       	brcc	.+2      	; 0x92e <HAL_InitTick+0x158>
 92c:	82 c0       	rjmp	.+260    	; 0xa32 <HAL_InitTick+0x25c>
 92e:	b0 cf       	rjmp	.-160    	; 0x890 <HAL_InitTick+0xba>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 930:	c7 01       	movw	r24, r14
 932:	b6 01       	movw	r22, r12
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	3a ef       	ldi	r19, 0xFA	; 250
 938:	40 e0       	ldi	r20, 0x00	; 0
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	c1 d1       	rcall	.+898    	; 0xcc0 <__udivmodsi4>
 93e:	ba 01       	movw	r22, r20
 940:	a9 01       	movw	r20, r18
 942:	41 50       	subi	r20, 0x01	; 1
 944:	51 09       	sbc	r21, r1
 946:	61 09       	sbc	r22, r1
 948:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 94a:	4f 3f       	cpi	r20, 0xFF	; 255
 94c:	51 05       	cpc	r21, r1
 94e:	61 05       	cpc	r22, r1
 950:	71 05       	cpc	r23, r1
 952:	08 f4       	brcc	.+2      	; 0x956 <HAL_InitTick+0x180>
 954:	72 c0       	rjmp	.+228    	; 0xa3a <HAL_InitTick+0x264>
 956:	a6 cf       	rjmp	.-180    	; 0x8a4 <HAL_InitTick+0xce>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 958:	c7 01       	movw	r24, r14
 95a:	b6 01       	movw	r22, r12
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	34 ef       	ldi	r19, 0xF4	; 244
 960:	41 e0       	ldi	r20, 0x01	; 1
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	ad d1       	rcall	.+858    	; 0xcc0 <__udivmodsi4>
 966:	ba 01       	movw	r22, r20
 968:	a9 01       	movw	r20, r18
 96a:	41 50       	subi	r20, 0x01	; 1
 96c:	51 09       	sbc	r21, r1
 96e:	61 09       	sbc	r22, r1
 970:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 972:	4f 3f       	cpi	r20, 0xFF	; 255
 974:	51 05       	cpc	r21, r1
 976:	61 05       	cpc	r22, r1
 978:	71 05       	cpc	r23, r1
 97a:	08 f0       	brcs	.+2      	; 0x97e <HAL_InitTick+0x1a8>
 97c:	9d cf       	rjmp	.-198    	; 0x8b8 <HAL_InitTick+0xe2>
 97e:	61 c0       	rjmp	.+194    	; 0xa42 <HAL_InitTick+0x26c>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 980:	c7 01       	movw	r24, r14
 982:	b6 01       	movw	r22, r12
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	38 ee       	ldi	r19, 0xE8	; 232
 988:	43 e0       	ldi	r20, 0x03	; 3
 98a:	50 e0       	ldi	r21, 0x00	; 0
 98c:	99 d1       	rcall	.+818    	; 0xcc0 <__udivmodsi4>
 98e:	ba 01       	movw	r22, r20
 990:	a9 01       	movw	r20, r18
 992:	41 50       	subi	r20, 0x01	; 1
 994:	51 09       	sbc	r21, r1
 996:	61 09       	sbc	r22, r1
 998:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 99a:	4f 3f       	cpi	r20, 0xFF	; 255
 99c:	51 05       	cpc	r21, r1
 99e:	61 05       	cpc	r22, r1
 9a0:	71 05       	cpc	r23, r1
 9a2:	08 f0       	brcs	.+2      	; 0x9a6 <HAL_InitTick+0x1d0>
 9a4:	93 cf       	rjmp	.-218    	; 0x8cc <HAL_InitTick+0xf6>
 9a6:	35 c0       	rjmp	.+106    	; 0xa12 <HAL_InitTick+0x23c>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 9a8:	c7 01       	movw	r24, r14
 9aa:	b6 01       	movw	r22, r12
 9ac:	20 e0       	ldi	r18, 0x00	; 0
 9ae:	30 ed       	ldi	r19, 0xD0	; 208
 9b0:	47 e0       	ldi	r20, 0x07	; 7
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	85 d1       	rcall	.+778    	; 0xcc0 <__udivmodsi4>
 9b6:	ba 01       	movw	r22, r20
 9b8:	a9 01       	movw	r20, r18
 9ba:	41 50       	subi	r20, 0x01	; 1
 9bc:	51 09       	sbc	r21, r1
 9be:	61 09       	sbc	r22, r1
 9c0:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 9c2:	4f 3f       	cpi	r20, 0xFF	; 255
 9c4:	51 05       	cpc	r21, r1
 9c6:	61 05       	cpc	r22, r1
 9c8:	71 05       	cpc	r23, r1
 9ca:	08 f0       	brcs	.+2      	; 0x9ce <HAL_InitTick+0x1f8>
 9cc:	89 cf       	rjmp	.-238    	; 0x8e0 <HAL_InitTick+0x10a>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 9ce:	25 c0       	rjmp	.+74     	; 0xa1a <HAL_InitTick+0x244>
 9d0:	c7 01       	movw	r24, r14
 9d2:	b6 01       	movw	r22, r12
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	30 e4       	ldi	r19, 0x40	; 64
 9d8:	4f e1       	ldi	r20, 0x1F	; 31
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	71 d1       	rcall	.+738    	; 0xcc0 <__udivmodsi4>
 9de:	ba 01       	movw	r22, r20
 9e0:	a9 01       	movw	r20, r18
 9e2:	41 50       	subi	r20, 0x01	; 1
 9e4:	51 09       	sbc	r21, r1
 9e6:	61 09       	sbc	r22, r1
 9e8:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 9ea:	4f 3f       	cpi	r20, 0xFF	; 255
 9ec:	51 05       	cpc	r21, r1
 9ee:	61 05       	cpc	r22, r1
 9f0:	71 05       	cpc	r23, r1
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <HAL_InitTick+0x220>
 9f4:	7f cf       	rjmp	.-258    	; 0x8f4 <HAL_InitTick+0x11e>
 9f6:	15 c0       	rjmp	.+42     	; 0xa22 <HAL_InitTick+0x24c>
	else
	{
		prescaler = 1;
	}
	
	ocr = (equation / prescaler) - 1;
 9f8:	ba 01       	movw	r22, r20
 9fa:	a9 01       	movw	r20, r18
 9fc:	41 50       	subi	r20, 0x01	; 1
 9fe:	51 09       	sbc	r21, r1
 a00:	61 09       	sbc	r22, r1
 a02:	71 09       	sbc	r23, r1
	
	if (ocr < 255)
 a04:	4f 3f       	cpi	r20, 0xFF	; 255
 a06:	51 05       	cpc	r21, r1
 a08:	61 05       	cpc	r22, r1
 a0a:	71 05       	cpc	r23, r1
 a0c:	08 f0       	brcs	.+2      	; 0xa10 <HAL_InitTick+0x23a>
 a0e:	36 cf       	rjmp	.-404    	; 0x87c <HAL_InitTick+0xa6>
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <HAL_InitTick+0x254>
	{
		tickFreq = HAL_TICK_FREQ_DEFAULT;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a18:	59 cf       	rjmp	.-334    	; 0x8cc <HAL_InitTick+0xf6>
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a20:	5f cf       	rjmp	.-322    	; 0x8e0 <HAL_InitTick+0x10a>
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a28:	65 cf       	rjmp	.-310    	; 0x8f4 <HAL_InitTick+0x11e>
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a30:	25 cf       	rjmp	.-438    	; 0x87c <HAL_InitTick+0xa6>
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a38:	2b cf       	rjmp	.-426    	; 0x890 <HAL_InitTick+0xba>
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a40:	31 cf       	rjmp	.-414    	; 0x8a4 <HAL_InitTick+0xce>
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tickFreq>
 a48:	37 cf       	rjmp	.-402    	; 0x8b8 <HAL_InitTick+0xe2>
		SETB(TCCR0, 1);
		SETB(TCCR0, 2);
		break;
	}
	
	OCR0 = (uint8_t)ocr;
 a4a:	41 bf       	out	0x31, r20	; 49
	sei();
 a4c:	78 94       	sei
	
	return status;
}
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	ff 90       	pop	r15
 a52:	ef 90       	pop	r14
 a54:	df 90       	pop	r13
 a56:	cf 90       	pop	r12
 a58:	08 95       	ret

00000a5a <HAL_Init>:
volatile uint32_t tick;
HAL_TickFreqTypeDef tickFreq = HAL_TICK_FREQ_DEFAULT; // 1ms

HAL_StatusTypeDef HAL_Init(void)
{
	return HAL_InitTick();
 a5a:	bd ce       	rjmp	.-646    	; 0x7d6 <HAL_InitTick>
}
 a5c:	08 95       	ret

00000a5e <HAL_IncTick>:
	return status;
}

void HAL_IncTick(void)
{
	tick += tickFreq;
 a5e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <tick>
 a62:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <tick+0x1>
 a66:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <tick+0x2>
 a6a:	b0 91 57 05 	lds	r27, 0x0557	; 0x800557 <tick+0x3>
 a6e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <tickFreq>
 a72:	82 0f       	add	r24, r18
 a74:	91 1d       	adc	r25, r1
 a76:	a1 1d       	adc	r26, r1
 a78:	b1 1d       	adc	r27, r1
 a7a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <tick>
 a7e:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <tick+0x1>
 a82:	a0 93 56 05 	sts	0x0556, r26	; 0x800556 <tick+0x2>
 a86:	b0 93 57 05 	sts	0x0557, r27	; 0x800557 <tick+0x3>
 a8a:	08 95       	ret

00000a8c <HAL_GetTick>:
}

uint32_t HAL_GetTick(void)
{
	return tick;
 a8c:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <tick>
 a90:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <tick+0x1>
 a94:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <tick+0x2>
 a98:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <tick+0x3>
}
 a9c:	08 95       	ret

00000a9e <GPIO_Init>:
	{&DDRG, &PORTG, &PING},
	};
	
void GPIO_Init(uint8_t port, GPIO_InitTypeDef *GPIO_Init)
{
	GPIO_TypeDef *gpio = &GPIO_descripter[port];
 a9e:	90 e0       	ldi	r25, 0x00	; 0
	
	if(GPIO_Init->Mode == GPIO_MODE_INPUT)
 aa0:	db 01       	movw	r26, r22
 aa2:	11 96       	adiw	r26, 0x01	; 1
 aa4:	2c 91       	ld	r18, X
 aa6:	11 97       	sbiw	r26, 0x01	; 1
 aa8:	21 11       	cpse	r18, r1
 aaa:	19 c0       	rjmp	.+50     	; 0xade <GPIO_Init+0x40>
	{
		CLRB(*(gpio->DDRn), GPIO_Init->Pin);
 aac:	fc 01       	movw	r30, r24
 aae:	ee 0f       	add	r30, r30
 ab0:	ff 1f       	adc	r31, r31
 ab2:	e8 0f       	add	r30, r24
 ab4:	f9 1f       	adc	r31, r25
 ab6:	ee 0f       	add	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	e1 5e       	subi	r30, 0xE1	; 225
 abc:	fe 4f       	sbci	r31, 0xFE	; 254
 abe:	01 90       	ld	r0, Z+
 ac0:	f0 81       	ld	r31, Z
 ac2:	e0 2d       	mov	r30, r0
 ac4:	20 81       	ld	r18, Z
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0c 90       	ld	r0, X
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <GPIO_Init+0x34>
 ace:	88 0f       	add	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	0a 94       	dec	r0
 ad4:	e2 f7       	brpl	.-8      	; 0xace <GPIO_Init+0x30>
 ad6:	80 95       	com	r24
 ad8:	82 23       	and	r24, r18
 ada:	80 83       	st	Z, r24
 adc:	08 95       	ret
	}
	else if(GPIO_Init->Mode == GPIO_MODE_OUTPUT)
 ade:	21 30       	cpi	r18, 0x01	; 1
 ae0:	c1 f4       	brne	.+48     	; 0xb12 <GPIO_Init+0x74>
	{
		SETB(*(gpio->DDRn), GPIO_Init->Pin);
 ae2:	fc 01       	movw	r30, r24
 ae4:	ee 0f       	add	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	e8 0f       	add	r30, r24
 aea:	f9 1f       	adc	r31, r25
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	e1 5e       	subi	r30, 0xE1	; 225
 af2:	fe 4f       	sbci	r31, 0xFE	; 254
 af4:	01 90       	ld	r0, Z+
 af6:	f0 81       	ld	r31, Z
 af8:	e0 2d       	mov	r30, r0
 afa:	20 81       	ld	r18, Z
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	db 01       	movw	r26, r22
 b02:	0c 90       	ld	r0, X
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <GPIO_Init+0x6c>
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	0a 94       	dec	r0
 b0c:	e2 f7       	brpl	.-8      	; 0xb06 <GPIO_Init+0x68>
 b0e:	82 2b       	or	r24, r18
 b10:	80 83       	st	Z, r24
 b12:	08 95       	ret

00000b14 <TIM2_OVF_ElapsedCallback>:
	TIM3_OVF_ElapsedCallback(htim);
}

void TIM0_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM0_OC_ElapsedCallback(htim);	
 b14:	08 95       	ret

00000b16 <TIM2_OVF_IRQHandler>:
 b16:	fe cf       	rjmp	.-4      	; 0xb14 <TIM2_OVF_ElapsedCallback>
 b18:	08 95       	ret

00000b1a <TIM2_OC_ElapsedCallback>:
{
	UNUSED(htim);
}

__attribute__((weak)) void TIM2_OC_ElapsedCallback(TIM8_HandleTypeDef *htim)
{
 b1a:	08 95       	ret

00000b1c <TIM2_OC_IRQHandler>:
	TIM0_OC_ElapsedCallback(htim);	
}

void TIM2_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM2_OC_ElapsedCallback(htim);
 b1c:	fe cf       	rjmp	.-4      	; 0xb1a <TIM2_OC_ElapsedCallback>
 b1e:	08 95       	ret

00000b20 <UART_Receive>:
{
	UNUSED(huart);
}

__attribute__((weak)) void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 b20:	2f 92       	push	r2
 b22:	3f 92       	push	r3
 b24:	4f 92       	push	r4
 b26:	5f 92       	push	r5
 b28:	6f 92       	push	r6
 b2a:	7f 92       	push	r7
 b2c:	8f 92       	push	r8
 b2e:	9f 92       	push	r9
 b30:	af 92       	push	r10
 b32:	bf 92       	push	r11
 b34:	cf 92       	push	r12
 b36:	df 92       	push	r13
 b38:	ef 92       	push	r14
 b3a:	ff 92       	push	r15
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	00 d0       	rcall	.+0      	; 0xb46 <UART_Receive+0x26>
 b46:	00 d0       	rcall	.+0      	; 0xb48 <UART_Receive+0x28>
 b48:	00 d0       	rcall	.+0      	; 0xb4a <UART_Receive+0x2a>
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
 b4e:	5c 01       	movw	r10, r24
 b50:	28 01       	movw	r4, r16
 b52:	39 01       	movw	r6, r18
 b54:	dc 01       	movw	r26, r24
 b56:	8c 91       	ld	r24, X
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	56 96       	adiw	r26, 0x16	; 22
 b5c:	1c 92       	st	X, r1
 b5e:	56 97       	sbiw	r26, 0x16	; 22
 b60:	51 96       	adiw	r26, 0x11	; 17
 b62:	5c 93       	st	X, r21
 b64:	4e 93       	st	-X, r20
 b66:	50 97       	sbiw	r26, 0x10	; 16
 b68:	55 96       	adiw	r26, 0x15	; 21
 b6a:	5c 93       	st	X, r21
 b6c:	4e 93       	st	-X, r20
 b6e:	54 97       	sbiw	r26, 0x14	; 20
 b70:	15 96       	adiw	r26, 0x05	; 5
 b72:	2c 91       	ld	r18, X
 b74:	15 97       	sbiw	r26, 0x05	; 5
 b76:	24 30       	cpi	r18, 0x04	; 4
 b78:	49 f4       	brne	.+18     	; 0xb8c <UART_Receive+0x6c>
 b7a:	17 96       	adiw	r26, 0x07	; 7
 b7c:	2c 91       	ld	r18, X
 b7e:	21 11       	cpse	r18, r1
 b80:	08 c0       	rjmp	.+16     	; 0xb92 <UART_Receive+0x72>
 b82:	69 83       	std	Y+1, r22	; 0x01
 b84:	7a 83       	std	Y+2, r23	; 0x02
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	05 c0       	rjmp	.+10     	; 0xb96 <UART_Receive+0x76>
 b8c:	1a 82       	std	Y+2, r1	; 0x02
 b8e:	19 82       	std	Y+1, r1	; 0x01
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <UART_Receive+0x76>
 b92:	1a 82       	std	Y+2, r1	; 0x02
 b94:	19 82       	std	Y+1, r1	; 0x01
 b96:	45 2b       	or	r20, r21
 b98:	09 f4       	brne	.+2      	; 0xb9c <UART_Receive+0x7c>
 b9a:	59 c0       	rjmp	.+178    	; 0xc4e <UART_Receive+0x12e>
 b9c:	26 2e       	mov	r2, r22
 b9e:	37 2e       	mov	r3, r23
 ba0:	89 80       	ldd	r8, Y+1	; 0x01
 ba2:	9a 80       	ldd	r9, Y+2	; 0x02
 ba4:	00 e0       	ldi	r16, 0x00	; 0
 ba6:	10 e0       	ldi	r17, 0x00	; 0
 ba8:	9c 01       	movw	r18, r24
 baa:	22 0f       	add	r18, r18
 bac:	33 1f       	adc	r19, r19
 bae:	82 0f       	add	r24, r18
 bb0:	93 1f       	adc	r25, r19
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	fc 01       	movw	r30, r24
 bbc:	e7 5b       	subi	r30, 0xB7	; 183
 bbe:	fe 4f       	sbci	r31, 0xFE	; 254
 bc0:	fc 83       	std	Y+4, r31	; 0x04
 bc2:	eb 83       	std	Y+3, r30	; 0x03
 bc4:	32 96       	adiw	r30, 0x02	; 2
 bc6:	fe 83       	std	Y+6, r31	; 0x06
 bc8:	ed 83       	std	Y+5, r30	; 0x05
 bca:	60 df       	rcall	.-320    	; 0xa8c <HAL_GetTick>
 bcc:	6b 01       	movw	r12, r22
 bce:	7c 01       	movw	r14, r24
 bd0:	0c c0       	rjmp	.+24     	; 0xbea <UART_Receive+0xca>
 bd2:	5c df       	rcall	.-328    	; 0xa8c <HAL_GetTick>
 bd4:	dc 01       	movw	r26, r24
 bd6:	cb 01       	movw	r24, r22
 bd8:	8c 19       	sub	r24, r12
 bda:	9d 09       	sbc	r25, r13
 bdc:	ae 09       	sbc	r26, r14
 bde:	bf 09       	sbc	r27, r15
 be0:	84 15       	cp	r24, r4
 be2:	95 05       	cpc	r25, r5
 be4:	a6 05       	cpc	r26, r6
 be6:	b7 05       	cpc	r27, r7
 be8:	a0 f5       	brcc	.+104    	; 0xc52 <UART_Receive+0x132>
 bea:	ad 81       	ldd	r26, Y+5	; 0x05
 bec:	be 81       	ldd	r27, Y+6	; 0x06
 bee:	ed 91       	ld	r30, X+
 bf0:	fc 91       	ld	r31, X
 bf2:	80 81       	ld	r24, Z
 bf4:	88 23       	and	r24, r24
 bf6:	1c f4       	brge	.+6      	; 0xbfe <UART_Receive+0xde>
 bf8:	80 81       	ld	r24, Z
 bfa:	85 ff       	sbrs	r24, 5
 bfc:	ea cf       	rjmp	.-44     	; 0xbd2 <UART_Receive+0xb2>
 bfe:	e9 81       	ldd	r30, Y+1	; 0x01
 c00:	fa 81       	ldd	r31, Y+2	; 0x02
 c02:	ef 2b       	or	r30, r31
 c04:	41 f4       	brne	.+16     	; 0xc16 <UART_Receive+0xf6>
 c06:	ab 81       	ldd	r26, Y+3	; 0x03
 c08:	bc 81       	ldd	r27, Y+4	; 0x04
 c0a:	ed 91       	ld	r30, X+
 c0c:	fc 91       	ld	r31, X
 c0e:	80 81       	ld	r24, Z
 c10:	f1 01       	movw	r30, r2
 c12:	80 83       	st	Z, r24
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <UART_Receive+0x108>
 c16:	ab 81       	ldd	r26, Y+3	; 0x03
 c18:	bc 81       	ldd	r27, Y+4	; 0x04
 c1a:	ed 91       	ld	r30, X+
 c1c:	fc 91       	ld	r31, X
 c1e:	80 81       	ld	r24, Z
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	f4 01       	movw	r30, r8
 c24:	91 83       	std	Z+1, r25	; 0x01
 c26:	80 83       	st	Z, r24
 c28:	0f 5f       	subi	r16, 0xFF	; 255
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	ff ef       	ldi	r31, 0xFF	; 255
 c2e:	2f 1a       	sub	r2, r31
 c30:	3f 0a       	sbc	r3, r31
 c32:	22 e0       	ldi	r18, 0x02	; 2
 c34:	82 0e       	add	r8, r18
 c36:	91 1c       	adc	r9, r1
 c38:	d5 01       	movw	r26, r10
 c3a:	54 96       	adiw	r26, 0x14	; 20
 c3c:	8d 91       	ld	r24, X+
 c3e:	9c 91       	ld	r25, X
 c40:	55 97       	sbiw	r26, 0x15	; 21
 c42:	08 17       	cp	r16, r24
 c44:	19 07       	cpc	r17, r25
 c46:	08 f4       	brcc	.+2      	; 0xc4a <UART_Receive+0x12a>
 c48:	c0 cf       	rjmp	.-128    	; 0xbca <UART_Receive+0xaa>
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	03 c0       	rjmp	.+6      	; 0xc54 <UART_Receive+0x134>
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	01 c0       	rjmp	.+2      	; 0xc54 <UART_Receive+0x134>
 c52:	83 e0       	ldi	r24, 0x03	; 3
 c54:	26 96       	adiw	r28, 0x06	; 6
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	f8 94       	cli
 c5a:	de bf       	out	0x3e, r29	; 62
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	cd bf       	out	0x3d, r28	; 61
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	1f 91       	pop	r17
 c66:	0f 91       	pop	r16
 c68:	ff 90       	pop	r15
 c6a:	ef 90       	pop	r14
 c6c:	df 90       	pop	r13
 c6e:	cf 90       	pop	r12
 c70:	bf 90       	pop	r11
 c72:	af 90       	pop	r10
 c74:	9f 90       	pop	r9
 c76:	8f 90       	pop	r8
 c78:	7f 90       	pop	r7
 c7a:	6f 90       	pop	r6
 c7c:	5f 90       	pop	r5
 c7e:	4f 90       	pop	r4
 c80:	3f 90       	pop	r3
 c82:	2f 90       	pop	r2
 c84:	08 95       	ret

00000c86 <UART_TxIRQHandler>:
 c86:	87 cd       	rjmp	.-1266   	; 0x796 <UART_TxCpltCallback>
 c88:	08 95       	ret

00000c8a <UART_RxIRQHandler>:
{
	UART_TxCpltCallback(huart);
}

void UART_RxIRQHandler(UART_HandleTypeDef *huart)
{
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	ec 01       	movw	r28, r24
	UART_Receive(huart, huart->pRxBuffPtr, huart->RxXferSize, 100);
 c94:	48 89       	ldd	r20, Y+16	; 0x10
 c96:	59 89       	ldd	r21, Y+17	; 0x11
 c98:	6c 85       	ldd	r22, Y+12	; 0x0c
 c9a:	7d 85       	ldd	r23, Y+13	; 0x0d
 c9c:	04 e6       	ldi	r16, 0x64	; 100
 c9e:	10 e0       	ldi	r17, 0x00	; 0
 ca0:	20 e0       	ldi	r18, 0x00	; 0
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	3d df       	rcall	.-390    	; 0xb20 <UART_Receive>
	UART_RxCpltCallback(huart);
 ca6:	ce 01       	movw	r24, r28
 ca8:	77 dd       	rcall	.-1298   	; 0x798 <UART_RxCpltCallback>
}
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	1f 91       	pop	r17
 cb0:	0f 91       	pop	r16
 cb2:	08 95       	ret

00000cb4 <main>:
#include "main.h"


int main(void)
{
    hwInit();
 cb4:	8c dd       	rcall	.-1256   	; 0x7ce <hwInit>
	apInit();
 cb6:	11 da       	rcall	.-3038   	; 0xda <apInit>
	
	apMain();
 cb8:	12 da       	rcall	.-3036   	; 0xde <apMain>
 cba:	80 e0       	ldi	r24, 0x00	; 0
}
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	08 95       	ret

00000cc0 <__udivmodsi4>:
 cc0:	a1 e2       	ldi	r26, 0x21	; 33
 cc2:	1a 2e       	mov	r1, r26
 cc4:	aa 1b       	sub	r26, r26
 cc6:	bb 1b       	sub	r27, r27
 cc8:	fd 01       	movw	r30, r26
 cca:	0d c0       	rjmp	.+26     	; 0xce6 <__udivmodsi4_ep>

00000ccc <__udivmodsi4_loop>:
 ccc:	aa 1f       	adc	r26, r26
 cce:	bb 1f       	adc	r27, r27
 cd0:	ee 1f       	adc	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	a2 17       	cp	r26, r18
 cd6:	b3 07       	cpc	r27, r19
 cd8:	e4 07       	cpc	r30, r20
 cda:	f5 07       	cpc	r31, r21
 cdc:	20 f0       	brcs	.+8      	; 0xce6 <__udivmodsi4_ep>
 cde:	a2 1b       	sub	r26, r18
 ce0:	b3 0b       	sbc	r27, r19
 ce2:	e4 0b       	sbc	r30, r20
 ce4:	f5 0b       	sbc	r31, r21

00000ce6 <__udivmodsi4_ep>:
 ce6:	66 1f       	adc	r22, r22
 ce8:	77 1f       	adc	r23, r23
 cea:	88 1f       	adc	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	1a 94       	dec	r1
 cf0:	69 f7       	brne	.-38     	; 0xccc <__udivmodsi4_loop>
 cf2:	60 95       	com	r22
 cf4:	70 95       	com	r23
 cf6:	80 95       	com	r24
 cf8:	90 95       	com	r25
 cfa:	9b 01       	movw	r18, r22
 cfc:	ac 01       	movw	r20, r24
 cfe:	bd 01       	movw	r22, r26
 d00:	cf 01       	movw	r24, r30
 d02:	08 95       	ret

00000d04 <__tablejump2__>:
 d04:	ee 0f       	add	r30, r30
 d06:	ff 1f       	adc	r31, r31
 d08:	00 24       	eor	r0, r0
 d0a:	00 1c       	adc	r0, r0
 d0c:	0b be       	out	0x3b, r0	; 59
 d0e:	07 90       	elpm	r0, Z+
 d10:	f6 91       	elpm	r31, Z
 d12:	e0 2d       	mov	r30, r0
 d14:	09 94       	ijmp

00000d16 <__muluhisi3>:
 d16:	09 d0       	rcall	.+18     	; 0xd2a <__umulhisi3>
 d18:	a5 9f       	mul	r26, r21
 d1a:	90 0d       	add	r25, r0
 d1c:	b4 9f       	mul	r27, r20
 d1e:	90 0d       	add	r25, r0
 d20:	a4 9f       	mul	r26, r20
 d22:	80 0d       	add	r24, r0
 d24:	91 1d       	adc	r25, r1
 d26:	11 24       	eor	r1, r1
 d28:	08 95       	ret

00000d2a <__umulhisi3>:
 d2a:	a2 9f       	mul	r26, r18
 d2c:	b0 01       	movw	r22, r0
 d2e:	b3 9f       	mul	r27, r19
 d30:	c0 01       	movw	r24, r0
 d32:	a3 9f       	mul	r26, r19
 d34:	70 0d       	add	r23, r0
 d36:	81 1d       	adc	r24, r1
 d38:	11 24       	eor	r1, r1
 d3a:	91 1d       	adc	r25, r1
 d3c:	b2 9f       	mul	r27, r18
 d3e:	70 0d       	add	r23, r0
 d40:	81 1d       	adc	r24, r1
 d42:	11 24       	eor	r1, r1
 d44:	91 1d       	adc	r25, r1
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
