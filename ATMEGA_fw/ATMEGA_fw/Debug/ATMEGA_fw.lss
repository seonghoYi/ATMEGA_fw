
ATMEGA_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000009ac  00000a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f2  00800162  00800162  00000aa2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052f0  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001981  00000000  00000000  00006418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003474  00000000  00000000  00007d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb8  00000000  00000000  0000b210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015e2  00000000  00000000  0000c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004816  00000000  00000000  0000d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000548  00000000  00000000  00011fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c1       	rjmp	.+776    	; 0x32e <__vector_9>
  26:	00 00       	nop
  28:	59 c1       	rjmp	.+690    	; 0x2dc <__vector_10>
  2a:	00 00       	nop
  2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__vector_11>
  2e:	00 00       	nop
  30:	2d c1       	rjmp	.+602    	; 0x28c <__vector_12>
  32:	00 00       	nop
  34:	35 c1       	rjmp	.+618    	; 0x2a0 <__vector_13>
  36:	00 00       	nop
  38:	1f c1       	rjmp	.+574    	; 0x278 <__vector_14>
  3a:	00 00       	nop
  3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__vector_18>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	71 c0       	rjmp	.+226    	; 0x134 <__vector_20>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c1       	rjmp	.+594    	; 0x2b4 <__vector_24>
  62:	00 00       	nop
  64:	b5 c1       	rjmp	.+874    	; 0x3d0 <__vector_25>
  66:	00 00       	nop
  68:	95 c1       	rjmp	.+810    	; 0x394 <__vector_26>
  6a:	00 00       	nop
  6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__vector_27>
  6e:	00 00       	nop
  70:	a5 c1       	rjmp	.+842    	; 0x3bc <__vector_28>
  72:	00 00       	nop
  74:	85 c1       	rjmp	.+778    	; 0x380 <__vector_29>
  76:	00 00       	nop
  78:	86 c0       	rjmp	.+268    	; 0x186 <__vector_30>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ab c0       	rjmp	.+342    	; 0x1d8 <__vector_32>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0a 03       	fmul	r16, r18
  8e:	12 03       	mulsu	r17, r18
  90:	1a 03       	fmul	r17, r18
  92:	1e 03       	fmul	r17, r22
  94:	22 03       	mulsu	r18, r18
  96:	33 03       	mulsu	r19, r19
  98:	37 03       	mulsu	r19, r23
  9a:	47 03       	mulsu	r20, r23
  9c:	5b 03       	fmul	r21, r19

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ec ea       	ldi	r30, 0xAC	; 172
  b2:	f9 e0       	ldi	r31, 0x09	; 9
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 36       	cpi	r26, 0x62	; 98
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	25 e0       	ldi	r18, 0x05	; 5
  c6:	a2 e6       	ldi	r26, 0x62	; 98
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a4 35       	cpi	r26, 0x54	; 84
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	38 d4       	rcall	.+2160   	; 0x946 <main>
  d6:	68 c4       	rjmp	.+2256   	; 0x9a8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <apInit>:
#include "uart.h"

void apInit(void)
{
	//uartOpen(_DEF_UART1, 38400);
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <apMain>:
		{
			uint8_t rx_data = uartRead(_DEF_UART1);
			uartWrite(_DEF_UART1, &rx_data, 1);
		}
		*/
		rosServerRun();
  de:	61 d2       	rcall	.+1218   	; 0x5a2 <rosServerRun>
  e0:	fe cf       	rjmp	.-4      	; 0xde <apMain>

000000e2 <__vector_18>:

#ifdef _USE_HW_UART
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
ISR(USART0_RX_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	0b b6       	in	r0, 0x3b	; 59
  ee:	0f 92       	push	r0
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	UART_RxIRQHandler(&huart1);
 108:	82 e2       	ldi	r24, 0x22	; 34
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	07 d4       	rcall	.+2062   	; 0x91c <UART_RxIRQHandler>
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0b be       	out	0x3b, r0	; 59
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_20>:

ISR(USART0_TX_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0b b6       	in	r0, 0x3b	; 59
 140:	0f 92       	push	r0
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	UART_TxIRQHandler(&huart1);
 15a:	82 e2       	ldi	r24, 0x22	; 34
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	dc d3       	rcall	.+1976   	; 0x918 <UART_TxIRQHandler>
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0b be       	out	0x3b, r0	; 59
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_30>:

ISR(USART1_RX_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	0b b6       	in	r0, 0x3b	; 59
 192:	0f 92       	push	r0
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	UART_RxIRQHandler(&huart2);
 1ac:	89 e3       	ldi	r24, 0x39	; 57
 1ae:	95 e0       	ldi	r25, 0x05	; 5
 1b0:	b5 d3       	rcall	.+1898   	; 0x91c <UART_RxIRQHandler>
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0b be       	out	0x3b, r0	; 59
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_32>:

ISR(USART1_TX_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	0b b6       	in	r0, 0x3b	; 59
 1e4:	0f 92       	push	r0
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	UART_TxIRQHandler(&huart2);
 1fe:	89 e3       	ldi	r24, 0x39	; 57
 200:	95 e0       	ldi	r25, 0x05	; 5
 202:	8a d3       	rcall	.+1812   	; 0x918 <UART_TxIRQHandler>
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_15>:
}
#endif

#ifdef _USE_HW_SYSTICK
ISR(TIMER0_COMP_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0b b6       	in	r0, 0x3b	; 59
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
	HAL_IncTick();
 250:	9f d2       	rcall	.+1342   	; 0x790 <HAL_IncTick>
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0b be       	out	0x3b, r0	; 59
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_14>:
#endif

ISR(TIMER1_OVF_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
	
}
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
	
}
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_13>:

ISR(TIMER1_COMPB_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
	
}
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_24>:

ISR(TIMER1_COMPC_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
	
}
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_11>:

ISR(TIMER1_CAPT_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
	
}
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0b b6       	in	r0, 0x3b	; 59
 2e8:	0f 92       	push	r0
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	TIM2_OVF_IRQHandler(&htim2);
 302:	86 ef       	ldi	r24, 0xF6	; 246
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	97 d2       	rcall	.+1326   	; 0x836 <TIM2_OVF_IRQHandler>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	0b b6       	in	r0, 0x3b	; 59
 33a:	0f 92       	push	r0
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	TIM2_OC_IRQHandler(&htim2);
 354:	86 ef       	ldi	r24, 0xF6	; 246
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	71 d2       	rcall	.+1250   	; 0x83c <TIM2_OC_IRQHandler>
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_29>:

ISR(TIMER3_OVF_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
	
}
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
	
}
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_27>:

ISR(TIMER3_COMPB_vect)
{
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
	
}
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_28>:

ISR(TIMER3_COMPC_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
	
}
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_25>:

ISR(TIMER3_CAPT_vect)
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
	
}
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <bspInit>:
﻿#include "bsp.h"


void bspInit(void)
{
 3e4:	08 95       	ret

000003e6 <qbufferWrite>:

	return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 3e6:	4f 92       	push	r4
 3e8:	5f 92       	push	r5
 3ea:	6f 92       	push	r6
 3ec:	7f 92       	push	r7
 3ee:	af 92       	push	r10
 3f0:	bf 92       	push	r11
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	06 2f       	mov	r16, r22
 412:	17 2f       	mov	r17, r23
 414:	29 01       	movw	r4, r18
 416:	3a 01       	movw	r6, r20
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
 418:	23 2b       	or	r18, r19
 41a:	24 2b       	or	r18, r20
 41c:	25 2b       	or	r18, r21
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	70 c0       	rjmp	.+224    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	{
		next_in = (p_node->in + 1) %p_node->len;
 422:	dc 01       	movw	r26, r24
 424:	8d 91       	ld	r24, X+
 426:	9d 91       	ld	r25, X+
 428:	0d 90       	ld	r0, X+
 42a:	bc 91       	ld	r27, X
 42c:	a0 2d       	mov	r26, r0
 42e:	89 83       	std	Y+1, r24	; 0x01
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	ab 83       	std	Y+3, r26	; 0x03
 434:	bc 83       	std	Y+4, r27	; 0x04
 436:	bc 01       	movw	r22, r24
 438:	cd 01       	movw	r24, r26
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	ed 81       	ldd	r30, Y+5	; 0x05
 444:	fe 81       	ldd	r31, Y+6	; 0x06
 446:	20 85       	ldd	r18, Z+8	; 0x08
 448:	31 85       	ldd	r19, Z+9	; 0x09
 44a:	42 85       	ldd	r20, Z+10	; 0x0a
 44c:	53 85       	ldd	r21, Z+11	; 0x0b
 44e:	81 d2       	rcall	.+1282   	; 0x952 <__udivmodsi4>
 450:	6b 01       	movw	r12, r22
 452:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
 454:	ed 81       	ldd	r30, Y+5	; 0x05
 456:	fe 81       	ldd	r31, Y+6	; 0x06
 458:	84 81       	ldd	r24, Z+4	; 0x04
 45a:	95 81       	ldd	r25, Z+5	; 0x05
 45c:	a6 81       	ldd	r26, Z+6	; 0x06
 45e:	b7 81       	ldd	r27, Z+7	; 0x07
 460:	c8 16       	cp	r12, r24
 462:	d9 06       	cpc	r13, r25
 464:	ea 06       	cpc	r14, r26
 466:	fb 06       	cpc	r15, r27
 468:	09 f4       	brne	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	4b c0       	rjmp	.+150    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 46c:	a0 2e       	mov	r10, r16
 46e:	b1 2e       	mov	r11, r17
 470:	00 e0       	ldi	r16, 0x00	; 0
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	23 c0       	rjmp	.+70     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	ad 81       	ldd	r26, Y+5	; 0x05
 484:	be 81       	ldd	r27, Y+6	; 0x06
 486:	18 96       	adiw	r26, 0x08	; 8
 488:	2d 91       	ld	r18, X+
 48a:	3d 91       	ld	r19, X+
 48c:	4d 91       	ld	r20, X+
 48e:	5c 91       	ld	r21, X
 490:	1b 97       	sbiw	r26, 0x0b	; 11
 492:	5f d2       	rcall	.+1214   	; 0x952 <__udivmodsi4>
 494:	bf ef       	ldi	r27, 0xFF	; 255
 496:	ab 1a       	sub	r10, r27
 498:	bb 0a       	sbc	r11, r27
 49a:	c9 82       	std	Y+1, r12	; 0x01
 49c:	da 82       	std	Y+2, r13	; 0x02
 49e:	eb 82       	std	Y+3, r14	; 0x03
 4a0:	fc 82       	std	Y+4, r15	; 0x04

		if (next_in != p_node->out)
 4a2:	ed 81       	ldd	r30, Y+5	; 0x05
 4a4:	fe 81       	ldd	r31, Y+6	; 0x06
 4a6:	c4 80       	ldd	r12, Z+4	; 0x04
 4a8:	d5 80       	ldd	r13, Z+5	; 0x05
 4aa:	e6 80       	ldd	r14, Z+6	; 0x06
 4ac:	f7 80       	ldd	r15, Z+7	; 0x07
 4ae:	6c 15       	cp	r22, r12
 4b0:	7d 05       	cpc	r23, r13
 4b2:	8e 05       	cpc	r24, r14
 4b4:	9f 05       	cpc	r25, r15
 4b6:	29 f1       	breq	.+74     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
	{
		next_in = (p_node->in + 1) %p_node->len;
 4b8:	6b 01       	movw	r12, r22
 4ba:	7c 01       	movw	r14, r24

		if (next_in != p_node->out)
		{
			if (p_node->p_buf != NULL)
 4bc:	ad 81       	ldd	r26, Y+5	; 0x05
 4be:	be 81       	ldd	r27, Y+6	; 0x06
 4c0:	1c 96       	adiw	r26, 0x0c	; 12
 4c2:	8d 91       	ld	r24, X+
 4c4:	9c 91       	ld	r25, X
 4c6:	1d 97       	sbiw	r26, 0x0d	; 13
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	39 f0       	breq	.+14     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			{
				p_node->p_buf[p_node->in] = p_data[i];
 4cc:	f5 01       	movw	r30, r10
 4ce:	20 81       	ld	r18, Z
 4d0:	e9 81       	ldd	r30, Y+1	; 0x01
 4d2:	fa 81       	ldd	r31, Y+2	; 0x02
 4d4:	e8 0f       	add	r30, r24
 4d6:	f9 1f       	adc	r31, r25
 4d8:	20 83       	st	Z, r18
			}
			p_node->in = next_in;
 4da:	ad 81       	ldd	r26, Y+5	; 0x05
 4dc:	be 81       	ldd	r27, Y+6	; 0x06
 4de:	cd 92       	st	X+, r12
 4e0:	dd 92       	st	X+, r13
 4e2:	ed 92       	st	X+, r14
 4e4:	fc 92       	st	X, r15
 4e6:	13 97       	sbiw	r26, 0x03	; 3
bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
	bool ret = 0;
	uint32_t next_in;

	for (int i=0; i<length; i++)
 4e8:	0f 5f       	subi	r16, 0xFF	; 255
 4ea:	1f 4f       	sbci	r17, 0xFF	; 255
 4ec:	c8 01       	movw	r24, r16
 4ee:	01 2e       	mov	r0, r17
 4f0:	00 0c       	add	r0, r0
 4f2:	aa 0b       	sbc	r26, r26
 4f4:	bb 0b       	sbc	r27, r27
 4f6:	84 15       	cp	r24, r4
 4f8:	95 05       	cpc	r25, r5
 4fa:	a6 05       	cpc	r26, r6
 4fc:	b7 05       	cpc	r27, r7
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	ba cf       	rjmp	.-140    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			ret = false;
			break;
		}
	}
	return ret;
}
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	26 96       	adiw	r28, 0x06	; 6
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	7f 90       	pop	r7
 526:	6f 90       	pop	r6
 528:	5f 90       	pop	r5
 52a:	4f 90       	pop	r4
 52c:	08 95       	ret

0000052e <gpioPinMode>:
	}
	return ret;
}

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	00 d0       	rcall	.+0      	; 0x534 <gpioPinMode+0x6>
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 538:	1a 82       	std	Y+2, r1	; 0x02
 53a:	19 82       	std	Y+1, r1	; 0x01
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
 53c:	86 30       	cpi	r24, 0x06	; 6
 53e:	b8 f4       	brcc	.+46     	; 0x56e <gpioPinMode+0x40>
	
	switch(mode)
 540:	61 30       	cpi	r22, 0x01	; 1
 542:	11 f4       	brne	.+4      	; 0x548 <gpioPinMode+0x1a>
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		break;
		
		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	9a 83       	std	Y+2, r25	; 0x02
		break;
		default:
		break;
	}
	
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	fc 01       	movw	r30, r24
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	e8 0f       	add	r30, r24
 556:	f9 1f       	adc	r31, r25
 558:	e0 50       	subi	r30, 0x00	; 0
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	81 81       	ldd	r24, Z+1	; 0x01
 55e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 560:	be 01       	movw	r22, r28
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	80 81       	ld	r24, Z
 568:	2a d1       	rcall	.+596    	; 0x7be <GPIO_Init>
	ret = true;
	
	return ret;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	01 c0       	rjmp	.+2      	; 0x570 <gpioPinMode+0x42>
{
	bool ret = false;
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	
	if (ch < 0 || ch >= GPIO_MAX_CH) return ret;
 56e:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
	GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
	ret = true;
	
	return ret;
}
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <gpioInit>:
};

bool gpioPinMode(uint8_t ch, uint8_t mode);

bool gpioInit(void)
{
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	00 e0       	ldi	r16, 0x00	; 0
 582:	11 e0       	ldi	r17, 0x01	; 1
 584:	c0 e0       	ldi	r28, 0x00	; 0
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 586:	f8 01       	movw	r30, r16
 588:	62 81       	ldd	r22, Z+2	; 0x02
 58a:	8c 2f       	mov	r24, r28
 58c:	d0 df       	rcall	.-96     	; 0x52e <gpioPinMode>
 58e:	0b 5f       	subi	r16, 0xFB	; 251
 590:	1f 4f       	sbci	r17, 0xFF	; 255
 592:	cf 5f       	subi	r28, 0xFF	; 255

bool gpioInit(void)
{
	bool ret = true;
	
	for(int i = 0; i < GPIO_MAX_CH; i++)
 594:	c6 30       	cpi	r28, 0x06	; 6
 596:	b9 f7       	brne	.-18     	; 0x586 <gpioInit+0xc>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
	}
	return ret;
}
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <rosServerRun>:
void rosServerRun(void)
{
	//char *str = "hello";
	//rosSendInst(&ros_handle, 0x00, 0x00, (uint8_t*)str, 6);
	uint8_t service_id;
	if (rosReceivePacket(&ros_handle))
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	0e d0       	rcall	.+28     	; 0x5c4 <rosReceivePacket>
 5a8:	88 23       	and	r24, r24
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <rosServerRun+0x20>
	{
		service_id = ros_handle.packet.inst;
 5ac:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <ros_handle+0xe>
		if ((service_id < 0 || service_id >= ROS_MAX_SERVICE))
 5b0:	66 23       	and	r22, r22
 5b2:	3c f0       	brlt	.+14     	; 0x5c2 <rosServerRun+0x20>
		{
			return;
		}
		//ros_handle.driver.write(ros_handle.ch, (uint8_t*)&(ros_handle.packet.msgs[0]), 1);
		rosCallService(&ros_handle, service_id, &ros_handle.packet.msgs[0]);
 5b4:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <ros_handle+0xf>
 5b8:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <ros_handle+0x10>
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	92 e0       	ldi	r25, 0x02	; 2
 5c0:	b5 c0       	rjmp	.+362    	; 0x72c <rosCallService>
 5c2:	08 95       	ret

000005c4 <rosReceivePacket>:


void rosAddService(ros_t *p_ros, void (*func)(uint8_t *params))
{
	p_ros->func[p_ros->service_index] = func;
	p_ros->service_index++;
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	fc 01       	movw	r30, r24
 5cc:	10 81       	ld	r17, Z
 5ce:	11 23       	and	r17, r17
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <rosReceivePacket+0x10>
 5d2:	a7 c0       	rjmp	.+334    	; 0x722 <rosReceivePacket+0x15e>
 5d4:	ec 01       	movw	r28, r24
 5d6:	e9 5e       	subi	r30, 0xE9	; 233
 5d8:	fd 4f       	sbci	r31, 0xFD	; 253
 5da:	01 90       	ld	r0, Z+
 5dc:	f0 81       	ld	r31, Z
 5de:	e0 2d       	mov	r30, r0
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	09 95       	icall
 5e4:	67 2b       	or	r22, r23
 5e6:	68 2b       	or	r22, r24
 5e8:	69 2b       	or	r22, r25
 5ea:	09 f4       	brne	.+2      	; 0x5ee <rosReceivePacket+0x2a>
 5ec:	95 c0       	rjmp	.+298    	; 0x718 <rosReceivePacket+0x154>
 5ee:	fe 01       	movw	r30, r28
 5f0:	e5 5e       	subi	r30, 0xE5	; 229
 5f2:	fd 4f       	sbci	r31, 0xFD	; 253
 5f4:	01 90       	ld	r0, Z+
 5f6:	f0 81       	ld	r31, Z
 5f8:	e0 2d       	mov	r30, r0
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	09 95       	icall
 5fe:	ee 81       	ldd	r30, Y+6	; 0x06
 600:	4e 2f       	mov	r20, r30
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	49 30       	cpi	r20, 0x09	; 9
 606:	51 05       	cpc	r21, r1
 608:	08 f0       	brcs	.+2      	; 0x60c <rosReceivePacket+0x48>
 60a:	7e c0       	rjmp	.+252    	; 0x708 <rosReceivePacket+0x144>
 60c:	fa 01       	movw	r30, r20
 60e:	ea 5b       	subi	r30, 0xBA	; 186
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	c1 c1       	rjmp	.+898    	; 0x996 <__tablejump2__>
 614:	8f 3f       	cpi	r24, 0xFF	; 255
 616:	21 f4       	brne	.+8      	; 0x620 <rosReceivePacket+0x5c>
 618:	8a 8b       	std	Y+18, r24	; 0x12
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	8e 83       	std	Y+6, r24	; 0x06
 61e:	80 c0       	rjmp	.+256    	; 0x720 <rosReceivePacket+0x15c>
 620:	1e 82       	std	Y+6, r1	; 0x06
 622:	7e c0       	rjmp	.+252    	; 0x720 <rosReceivePacket+0x15c>
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	21 f4       	brne	.+8      	; 0x630 <rosReceivePacket+0x6c>
 628:	8b 8b       	std	Y+19, r24	; 0x13
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	8e 83       	std	Y+6, r24	; 0x06
 62e:	78 c0       	rjmp	.+240    	; 0x720 <rosReceivePacket+0x15c>
 630:	1e 82       	std	Y+6, r1	; 0x06
 632:	76 c0       	rjmp	.+236    	; 0x720 <rosReceivePacket+0x15c>
 634:	8c 8b       	std	Y+20, r24	; 0x14
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	8e 83       	std	Y+6, r24	; 0x06
 63a:	72 c0       	rjmp	.+228    	; 0x720 <rosReceivePacket+0x15c>
 63c:	8d 8b       	std	Y+21, r24	; 0x15
 63e:	84 e0       	ldi	r24, 0x04	; 4
 640:	8e 83       	std	Y+6, r24	; 0x06
 642:	6e c0       	rjmp	.+220    	; 0x720 <rosReceivePacket+0x15c>
 644:	8e 8b       	std	Y+22, r24	; 0x16
 646:	2c 89       	ldd	r18, Y+20	; 0x14
 648:	9d 89       	ldd	r25, Y+21	; 0x15
 64a:	92 0f       	add	r25, r18
 64c:	90 95       	com	r25
 64e:	9c 87       	std	Y+12, r25	; 0x0c
 650:	89 13       	cpse	r24, r25
 652:	03 c0       	rjmp	.+6      	; 0x65a <rosReceivePacket+0x96>
 654:	85 e0       	ldi	r24, 0x05	; 5
 656:	8e 83       	std	Y+6, r24	; 0x06
 658:	01 c0       	rjmp	.+2      	; 0x65c <rosReceivePacket+0x98>
 65a:	1e 82       	std	Y+6, r1	; 0x06
 65c:	82 2f       	mov	r24, r18
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9b 87       	std	Y+11, r25	; 0x0b
 662:	8a 87       	std	Y+10, r24	; 0x0a
 664:	5d c0       	rjmp	.+186    	; 0x720 <rosReceivePacket+0x15c>
 666:	8f 8b       	std	Y+23, r24	; 0x17
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	8e 83       	std	Y+6, r24	; 0x06
 66c:	59 c0       	rjmp	.+178    	; 0x720 <rosReceivePacket+0x15c>
 66e:	88 8f       	std	Y+24, r24	; 0x18
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	8f 83       	std	Y+7, r24	; 0x07
 674:	ce 01       	movw	r24, r28
 676:	49 96       	adiw	r24, 0x19	; 25
 678:	98 8b       	std	Y+16, r25	; 0x10
 67a:	8f 87       	std	Y+15, r24	; 0x0f
 67c:	8a 85       	ldd	r24, Y+10	; 0x0a
 67e:	9b 85       	ldd	r25, Y+11	; 0x0b
 680:	89 2b       	or	r24, r25
 682:	19 f0       	breq	.+6      	; 0x68a <rosReceivePacket+0xc6>
 684:	87 e0       	ldi	r24, 0x07	; 7
 686:	8e 83       	std	Y+6, r24	; 0x06
 688:	4b c0       	rjmp	.+150    	; 0x720 <rosReceivePacket+0x15c>
 68a:	1e 82       	std	Y+6, r1	; 0x06
 68c:	40 c0       	rjmp	.+128    	; 0x70e <rosReceivePacket+0x14a>
 68e:	2f 81       	ldd	r18, Y+7	; 0x07
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	92 0f       	add	r25, r18
 694:	9f 83       	std	Y+7, r25	; 0x07
 696:	fe 01       	movw	r30, r28
 698:	e2 0f       	add	r30, r18
 69a:	f1 1d       	adc	r31, r1
 69c:	82 8b       	std	Z+18, r24	; 0x12
 69e:	89 2f       	mov	r24, r25
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	2a 85       	ldd	r18, Y+10	; 0x0a
 6a4:	3b 85       	ldd	r19, Y+11	; 0x0b
 6a6:	29 5f       	subi	r18, 0xF9	; 249
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	82 17       	cp	r24, r18
 6ac:	93 07       	cpc	r25, r19
 6ae:	c0 f1       	brcs	.+112    	; 0x720 <rosReceivePacket+0x15c>
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	8e 83       	std	Y+6, r24	; 0x06
 6b4:	35 c0       	rjmp	.+106    	; 0x720 <rosReceivePacket+0x15c>
 6b6:	9f 81       	ldd	r25, Y+7	; 0x07
 6b8:	fe 01       	movw	r30, r28
 6ba:	e9 0f       	add	r30, r25
 6bc:	f1 1d       	adc	r31, r1
 6be:	82 8b       	std	Z+18, r24	; 0x12
 6c0:	2a 85       	ldd	r18, Y+10	; 0x0a
 6c2:	3b 85       	ldd	r19, Y+11	; 0x0b
 6c4:	21 15       	cp	r18, r1
 6c6:	31 05       	cpc	r19, r1
 6c8:	91 f0       	breq	.+36     	; 0x6ee <rosReceivePacket+0x12a>
 6ca:	fe 01       	movw	r30, r28
 6cc:	79 96       	adiw	r30, 0x19	; 25
 6ce:	27 5e       	subi	r18, 0xE7	; 231
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	2c 0f       	add	r18, r28
 6d4:	3d 1f       	adc	r19, r29
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	ba 01       	movw	r22, r20
 6dc:	91 91       	ld	r25, Z+
 6de:	49 0f       	add	r20, r25
 6e0:	51 1d       	adc	r21, r1
 6e2:	61 1d       	adc	r22, r1
 6e4:	71 1d       	adc	r23, r1
 6e6:	e2 17       	cp	r30, r18
 6e8:	f3 07       	cpc	r31, r19
 6ea:	c1 f7       	brne	.-16     	; 0x6dc <rosReceivePacket+0x118>
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <rosReceivePacket+0x130>
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	ba 01       	movw	r22, r20
 6f4:	40 95       	com	r20
 6f6:	49 8b       	std	Y+17, r20	; 0x11
 6f8:	84 13       	cpse	r24, r20
 6fa:	03 c0       	rjmp	.+6      	; 0x702 <rosReceivePacket+0x13e>
 6fc:	1e 82       	std	Y+6, r1	; 0x06
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	01 c0       	rjmp	.+2      	; 0x704 <rosReceivePacket+0x140>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	1f 82       	std	Y+7, r1	; 0x07
 706:	01 c0       	rjmp	.+2      	; 0x70a <rosReceivePacket+0x146>
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	88 23       	and	r24, r24
 70c:	39 f0       	breq	.+14     	; 0x71c <rosReceivePacket+0x158>
 70e:	88 8d       	ldd	r24, Y+24	; 0x18
 710:	8d 87       	std	Y+13, r24	; 0x0d
 712:	8f 89       	ldd	r24, Y+23	; 0x17
 714:	8e 87       	std	Y+14, r24	; 0x0e
 716:	05 c0       	rjmp	.+10     	; 0x722 <rosReceivePacket+0x15e>
 718:	10 e0       	ldi	r17, 0x00	; 0
 71a:	03 c0       	rjmp	.+6      	; 0x722 <rosReceivePacket+0x15e>
 71c:	10 e0       	ldi	r17, 0x00	; 0
 71e:	01 c0       	rjmp	.+2      	; 0x722 <rosReceivePacket+0x15e>
 720:	10 e0       	ldi	r17, 0x00	; 0
 722:	81 2f       	mov	r24, r17
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	08 95       	ret

0000072c <rosCallService>:
}

void rosCallService(ros_t *p_ros, uint8_t service_ch_, uint8_t *params_)
{
	if (service_ch_ < 0 || service_ch_ >= ROS_MAX_SERVICE)
 72c:	66 23       	and	r22, r22
 72e:	6c f0       	brlt	.+26     	; 0x74a <rosCallService+0x1e>
 730:	fc 01       	movw	r30, r24
	{
		return;
	}
	
	p_ros->func[service_ch_](params_);
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	e6 0f       	add	r30, r22
 73a:	f7 1f       	adc	r31, r23
 73c:	e1 5e       	subi	r30, 0xE1	; 225
 73e:	fd 4f       	sbci	r31, 0xFD	; 253
 740:	01 90       	ld	r0, Z+
 742:	f0 81       	ld	r31, Z
 744:	e0 2d       	mov	r30, r0
 746:	ca 01       	movw	r24, r20
 748:	09 95       	icall
 74a:	08 95       	ret

0000074c <uartInit>:
		qbufferFlush(&qbuffer[_DEF_UART1]);
		break;
	}
	
	return ret;
}
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	08 95       	ret

00000750 <UART_TxCpltCallback>:


void UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 750:	08 95       	ret

00000752 <UART_RxCpltCallback>:
	return;
}

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 752:	fc 01       	movw	r30, r24
	switch(huart->USARTn)
 754:	80 81       	ld	r24, Z
 756:	88 23       	and	r24, r24
 758:	19 f0       	breq	.+6      	; 0x760 <UART_RxCpltCallback+0xe>
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	59 f0       	breq	.+22     	; 0x774 <UART_RxCpltCallback+0x22>
 75e:	08 95       	ret
	{
		case USART0:
		qbufferWrite(&qbuffer[_DEF_UART0], huart->pRxBuffPtr, huart->RxXferSize);
 760:	20 89       	ldd	r18, Z+16	; 0x10
 762:	31 89       	ldd	r19, Z+17	; 0x11
 764:	40 e0       	ldi	r20, 0x00	; 0
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	64 85       	ldd	r22, Z+12	; 0x0c
 76a:	75 85       	ldd	r23, Z+13	; 0x0d
 76c:	82 e6       	ldi	r24, 0x62	; 98
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	3a ce       	rjmp	.-908    	; 0x3e6 <qbufferWrite>
		//uartPrintf(_DEF_UART0, "Rx callback available: %d", uartAvailable(_DEF_UART0));
		//uartPrintf(_DEF_UART0, "Rx callback called\n");
		break;
 772:	08 95       	ret
		case USART1:
		qbufferWrite(&qbuffer[_DEF_UART1], huart->pRxBuffPtr, huart->RxXferSize);
 774:	20 89       	ldd	r18, Z+16	; 0x10
 776:	31 89       	ldd	r19, Z+17	; 0x11
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	64 85       	ldd	r22, Z+12	; 0x0c
 77e:	75 85       	ldd	r23, Z+13	; 0x0d
 780:	80 e7       	ldi	r24, 0x70	; 112
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	30 ce       	rjmp	.-928    	; 0x3e6 <qbufferWrite>
 786:	08 95       	ret

00000788 <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
 788:	2d de       	rcall	.-934    	; 0x3e4 <bspInit>
	gpioInit();
 78a:	f7 de       	rcall	.-530    	; 0x57a <gpioInit>
	uartInit();
 78c:	df cf       	rjmp	.-66     	; 0x74c <uartInit>
 78e:	08 95       	ret

00000790 <HAL_IncTick>:
 790:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <tick>
	return status;
}

void HAL_IncTick(void)
{
	tick += tickFreq;
 794:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <tick+0x1>
 798:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <tick+0x2>
 79c:	b0 91 53 05 	lds	r27, 0x0553	; 0x800553 <tick+0x3>
 7a0:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <tickFreq>
 7a4:	82 0f       	add	r24, r18
 7a6:	91 1d       	adc	r25, r1
 7a8:	a1 1d       	adc	r26, r1
 7aa:	b1 1d       	adc	r27, r1
 7ac:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <tick>
 7b0:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <tick+0x1>
 7b4:	a0 93 52 05 	sts	0x0552, r26	; 0x800552 <tick+0x2>
 7b8:	b0 93 53 05 	sts	0x0553, r27	; 0x800553 <tick+0x3>
 7bc:	08 95       	ret

000007be <GPIO_Init>:
	{&DDRG, &PORTG, &PING},
	};
	
void GPIO_Init(uint8_t port, GPIO_InitTypeDef *GPIO_Init)
{
	GPIO_TypeDef *gpio = &GPIO_descripter[port];
 7be:	90 e0       	ldi	r25, 0x00	; 0
	
	if(GPIO_Init->Mode == GPIO_MODE_INPUT)
 7c0:	db 01       	movw	r26, r22
 7c2:	11 96       	adiw	r26, 0x01	; 1
 7c4:	2c 91       	ld	r18, X
 7c6:	11 97       	sbiw	r26, 0x01	; 1
 7c8:	21 11       	cpse	r18, r1
 7ca:	19 c0       	rjmp	.+50     	; 0x7fe <GPIO_Init+0x40>
	{
		CLRB(*(gpio->DDRn), GPIO_Init->Pin);
 7cc:	fc 01       	movw	r30, r24
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	e8 0f       	add	r30, r24
 7d4:	f9 1f       	adc	r31, r25
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	e1 5e       	subi	r30, 0xE1	; 225
 7dc:	fe 4f       	sbci	r31, 0xFE	; 254
 7de:	01 90       	ld	r0, Z+
 7e0:	f0 81       	ld	r31, Z
 7e2:	e0 2d       	mov	r30, r0
 7e4:	20 81       	ld	r18, Z
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0c 90       	ld	r0, X
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <GPIO_Init+0x34>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	0a 94       	dec	r0
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <GPIO_Init+0x30>
 7f6:	80 95       	com	r24
 7f8:	82 23       	and	r24, r18
 7fa:	80 83       	st	Z, r24
 7fc:	08 95       	ret
	}
	else if(GPIO_Init->Mode == GPIO_MODE_OUTPUT)
 7fe:	21 30       	cpi	r18, 0x01	; 1
 800:	c1 f4       	brne	.+48     	; 0x832 <GPIO_Init+0x74>
	{
		SETB(*(gpio->DDRn), GPIO_Init->Pin);
 802:	fc 01       	movw	r30, r24
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	e8 0f       	add	r30, r24
 80a:	f9 1f       	adc	r31, r25
 80c:	ee 0f       	add	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	e1 5e       	subi	r30, 0xE1	; 225
 812:	fe 4f       	sbci	r31, 0xFE	; 254
 814:	01 90       	ld	r0, Z+
 816:	f0 81       	ld	r31, Z
 818:	e0 2d       	mov	r30, r0
 81a:	20 81       	ld	r18, Z
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	db 01       	movw	r26, r22
 822:	0c 90       	ld	r0, X
 824:	02 c0       	rjmp	.+4      	; 0x82a <GPIO_Init+0x6c>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	0a 94       	dec	r0
 82c:	e2 f7       	brpl	.-8      	; 0x826 <GPIO_Init+0x68>
 82e:	82 2b       	or	r24, r18
 830:	80 83       	st	Z, r24
 832:	08 95       	ret

00000834 <TIM2_OVF_ElapsedCallback>:
	TIM3_OVF_ElapsedCallback(htim);
}

void TIM0_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM0_OC_ElapsedCallback(htim);	
 834:	08 95       	ret

00000836 <TIM2_OVF_IRQHandler>:
 836:	fe cf       	rjmp	.-4      	; 0x834 <TIM2_OVF_ElapsedCallback>
 838:	08 95       	ret

0000083a <TIM2_OC_ElapsedCallback>:
{
	UNUSED(htim);
}

__attribute__((weak)) void TIM2_OC_ElapsedCallback(TIM8_HandleTypeDef *htim)
{
 83a:	08 95       	ret

0000083c <TIM2_OC_IRQHandler>:
	TIM0_OC_ElapsedCallback(htim);	
}

void TIM2_OC_IRQHandler(TIM8_HandleTypeDef *htim)
{
	TIM2_OC_ElapsedCallback(htim);
 83c:	fe cf       	rjmp	.-4      	; 0x83a <TIM2_OC_ElapsedCallback>
 83e:	08 95       	ret

00000840 <UART_Receive>:
{
	UNUSED(huart);
}

__attribute__((weak)) void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 840:	af 92       	push	r10
 842:	bf 92       	push	r11
 844:	cf 92       	push	r12
 846:	df 92       	push	r13
 848:	ef 92       	push	r14
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	8c 01       	movw	r16, r24
 856:	ec 01       	movw	r28, r24
 858:	88 81       	ld	r24, Y
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	1e 8a       	std	Y+22, r1	; 0x16
 85e:	59 8b       	std	Y+17, r21	; 0x11
 860:	48 8b       	std	Y+16, r20	; 0x10
 862:	5d 8b       	std	Y+21, r21	; 0x15
 864:	4c 8b       	std	Y+20, r20	; 0x14
 866:	2d 81       	ldd	r18, Y+5	; 0x05
 868:	24 30       	cpi	r18, 0x04	; 4
 86a:	41 f4       	brne	.+16     	; 0x87c <UART_Receive+0x3c>
 86c:	2f 81       	ldd	r18, Y+7	; 0x07
 86e:	21 11       	cpse	r18, r1
 870:	08 c0       	rjmp	.+16     	; 0x882 <UART_Receive+0x42>
 872:	e6 2e       	mov	r14, r22
 874:	f7 2e       	mov	r15, r23
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	05 c0       	rjmp	.+10     	; 0x886 <UART_Receive+0x46>
 87c:	e1 2c       	mov	r14, r1
 87e:	f1 2c       	mov	r15, r1
 880:	02 c0       	rjmp	.+4      	; 0x886 <UART_Receive+0x46>
 882:	e1 2c       	mov	r14, r1
 884:	f1 2c       	mov	r15, r1
 886:	45 2b       	or	r20, r21
 888:	d9 f1       	breq	.+118    	; 0x900 <UART_Receive+0xc0>
 88a:	a6 2e       	mov	r10, r22
 88c:	b7 2e       	mov	r11, r23
 88e:	d7 01       	movw	r26, r14
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	bc 01       	movw	r22, r24
 896:	66 0f       	add	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	68 0f       	add	r22, r24
 89c:	79 1f       	adc	r23, r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	67 5b       	subi	r22, 0xB7	; 183
 8a8:	7e 4f       	sbci	r23, 0xFE	; 254
 8aa:	6b 01       	movw	r12, r22
 8ac:	d2 e0       	ldi	r29, 0x02	; 2
 8ae:	cd 0e       	add	r12, r29
 8b0:	d1 1c       	adc	r13, r1
 8b2:	e6 01       	movw	r28, r12
 8b4:	e8 81       	ld	r30, Y
 8b6:	f9 81       	ldd	r31, Y+1	; 0x01
 8b8:	90 81       	ld	r25, Z
 8ba:	99 23       	and	r25, r25
 8bc:	1c f4       	brge	.+6      	; 0x8c4 <UART_Receive+0x84>
 8be:	90 81       	ld	r25, Z
 8c0:	95 ff       	sbrs	r25, 5
 8c2:	fa cf       	rjmp	.-12     	; 0x8b8 <UART_Receive+0x78>
 8c4:	e1 14       	cp	r14, r1
 8c6:	f1 04       	cpc	r15, r1
 8c8:	39 f4       	brne	.+14     	; 0x8d8 <UART_Receive+0x98>
 8ca:	eb 01       	movw	r28, r22
 8cc:	e8 81       	ld	r30, Y
 8ce:	f9 81       	ldd	r31, Y+1	; 0x01
 8d0:	80 81       	ld	r24, Z
 8d2:	f5 01       	movw	r30, r10
 8d4:	80 83       	st	Z, r24
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <UART_Receive+0xa8>
 8d8:	eb 01       	movw	r28, r22
 8da:	e8 81       	ld	r30, Y
 8dc:	f9 81       	ldd	r31, Y+1	; 0x01
 8de:	20 81       	ld	r18, Z
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	11 96       	adiw	r26, 0x01	; 1
 8e4:	3c 93       	st	X, r19
 8e6:	2e 93       	st	-X, r18
 8e8:	4f 5f       	subi	r20, 0xFF	; 255
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	df ef       	ldi	r29, 0xFF	; 255
 8ee:	ad 1a       	sub	r10, r29
 8f0:	bd 0a       	sbc	r11, r29
 8f2:	12 96       	adiw	r26, 0x02	; 2
 8f4:	f8 01       	movw	r30, r16
 8f6:	84 89       	ldd	r24, Z+20	; 0x14
 8f8:	95 89       	ldd	r25, Z+21	; 0x15
 8fa:	48 17       	cp	r20, r24
 8fc:	59 07       	cpc	r21, r25
 8fe:	c8 f2       	brcs	.-78     	; 0x8b2 <UART_Receive+0x72>
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	ff 90       	pop	r15
 90c:	ef 90       	pop	r14
 90e:	df 90       	pop	r13
 910:	cf 90       	pop	r12
 912:	bf 90       	pop	r11
 914:	af 90       	pop	r10
 916:	08 95       	ret

00000918 <UART_TxIRQHandler>:
 918:	1b cf       	rjmp	.-458    	; 0x750 <UART_TxCpltCallback>
 91a:	08 95       	ret

0000091c <UART_RxIRQHandler>:
{
	UART_TxCpltCallback(huart);
}

void UART_RxIRQHandler(UART_HandleTypeDef *huart)
{
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ec 01       	movw	r28, r24
	UART_Receive(huart, huart->pRxBuffPtr, huart->RxXferSize, 100);
 926:	48 89       	ldd	r20, Y+16	; 0x10
 928:	59 89       	ldd	r21, Y+17	; 0x11
 92a:	6c 85       	ldd	r22, Y+12	; 0x0c
 92c:	7d 85       	ldd	r23, Y+13	; 0x0d
 92e:	04 e6       	ldi	r16, 0x64	; 100
 930:	10 e0       	ldi	r17, 0x00	; 0
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	84 df       	rcall	.-248    	; 0x840 <UART_Receive>
	UART_RxCpltCallback(huart);
 938:	ce 01       	movw	r24, r28
 93a:	0b df       	rcall	.-490    	; 0x752 <UART_RxCpltCallback>
}
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	08 95       	ret

00000946 <main>:
#include "main.h"


int main(void)
{
    hwInit();
 946:	20 df       	rcall	.-448    	; 0x788 <hwInit>
	apInit();
 948:	c8 db       	rcall	.-2160   	; 0xda <apInit>
	
	apMain();
 94a:	c9 db       	rcall	.-2158   	; 0xde <apMain>
 94c:	80 e0       	ldi	r24, 0x00	; 0
}
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	08 95       	ret

00000952 <__udivmodsi4>:
 952:	a1 e2       	ldi	r26, 0x21	; 33
 954:	1a 2e       	mov	r1, r26
 956:	aa 1b       	sub	r26, r26
 958:	bb 1b       	sub	r27, r27
 95a:	fd 01       	movw	r30, r26
 95c:	0d c0       	rjmp	.+26     	; 0x978 <__udivmodsi4_ep>

0000095e <__udivmodsi4_loop>:
 95e:	aa 1f       	adc	r26, r26
 960:	bb 1f       	adc	r27, r27
 962:	ee 1f       	adc	r30, r30
 964:	ff 1f       	adc	r31, r31
 966:	a2 17       	cp	r26, r18
 968:	b3 07       	cpc	r27, r19
 96a:	e4 07       	cpc	r30, r20
 96c:	f5 07       	cpc	r31, r21
 96e:	20 f0       	brcs	.+8      	; 0x978 <__udivmodsi4_ep>
 970:	a2 1b       	sub	r26, r18
 972:	b3 0b       	sbc	r27, r19
 974:	e4 0b       	sbc	r30, r20
 976:	f5 0b       	sbc	r31, r21

00000978 <__udivmodsi4_ep>:
 978:	66 1f       	adc	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	1a 94       	dec	r1
 982:	69 f7       	brne	.-38     	; 0x95e <__udivmodsi4_loop>
 984:	60 95       	com	r22
 986:	70 95       	com	r23
 988:	80 95       	com	r24
 98a:	90 95       	com	r25
 98c:	9b 01       	movw	r18, r22
 98e:	ac 01       	movw	r20, r24
 990:	bd 01       	movw	r22, r26
 992:	cf 01       	movw	r24, r30
 994:	08 95       	ret

00000996 <__tablejump2__>:
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	00 24       	eor	r0, r0
 99c:	00 1c       	adc	r0, r0
 99e:	0b be       	out	0x3b, r0	; 59
 9a0:	07 90       	elpm	r0, Z+
 9a2:	f6 91       	elpm	r31, Z
 9a4:	e0 2d       	mov	r30, r0
 9a6:	09 94       	ijmp

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
